
Thesis_ProjectF405RGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800dd70  0800dd70  0000ed70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded0  0800ded0  0000f0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ded0  0800ded0  0000eed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ded8  0800ded8  0000f0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ded8  0800ded8  0000eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dedc  0800dedc  0000eedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800dee0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0a0  2**0
                  CONTENTS
 10 .bss          0000077c  200000a0  200000a0  0000f0a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000081c  2000081c  0000f0a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b4b  00000000  00000000  0000f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f13  00000000  00000000  00020c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00023b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d6e  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002129d  00000000  00000000  000259e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017de2  00000000  00000000  00046c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3715  00000000  00000000  0005ea65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012217a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff0  00000000  00000000  001221c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001271b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dd58 	.word	0x0800dd58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800dd58 	.word	0x0800dd58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_ldivmod>:
 8000aa0:	b97b      	cbnz	r3, 8000ac2 <__aeabi_ldivmod+0x22>
 8000aa2:	b972      	cbnz	r2, 8000ac2 <__aeabi_ldivmod+0x22>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bfbe      	ittt	lt
 8000aa8:	2000      	movlt	r0, #0
 8000aaa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aae:	e006      	blt.n	8000abe <__aeabi_ldivmod+0x1e>
 8000ab0:	bf08      	it	eq
 8000ab2:	2800      	cmpeq	r0, #0
 8000ab4:	bf1c      	itt	ne
 8000ab6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aba:	f04f 30ff 	movne.w	r0, #4294967295
 8000abe:	f000 b9b5 	b.w	8000e2c <__aeabi_idiv0>
 8000ac2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aca:	2900      	cmp	r1, #0
 8000acc:	db09      	blt.n	8000ae2 <__aeabi_ldivmod+0x42>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db1a      	blt.n	8000b08 <__aeabi_ldivmod+0x68>
 8000ad2:	f000 f84d 	bl	8000b70 <__udivmoddi4>
 8000ad6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ade:	b004      	add	sp, #16
 8000ae0:	4770      	bx	lr
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db1b      	blt.n	8000b24 <__aeabi_ldivmod+0x84>
 8000aec:	f000 f840 	bl	8000b70 <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	4252      	negs	r2, r2
 8000b02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b06:	4770      	bx	lr
 8000b08:	4252      	negs	r2, r2
 8000b0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b0e:	f000 f82f 	bl	8000b70 <__udivmoddi4>
 8000b12:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1a:	b004      	add	sp, #16
 8000b1c:	4240      	negs	r0, r0
 8000b1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b22:	4770      	bx	lr
 8000b24:	4252      	negs	r2, r2
 8000b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2a:	f000 f821 	bl	8000b70 <__udivmoddi4>
 8000b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b36:	b004      	add	sp, #16
 8000b38:	4252      	negs	r2, r2
 8000b3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <qmc5883p_Write_Reg>:
 *  Created on: Aug 14, 2023
 *      Author: UAVxLab
 */
#include "QMC5883P.h"

static void qmc5883p_Write_Reg(uint8_t reg, uint8_t value){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = value;
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, Q5883P_ADDR, reg, 1, &buf, 1, HAL_MAX_DELAY);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	f107 030f 	add.w	r3, r7, #15
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2158      	movs	r1, #88	@ 0x58
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <qmc5883p_Write_Reg+0x3c>)
 8000e5e:	f002 f941 	bl	80030e4 <HAL_I2C_Mem_Write>

}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000140 	.word	0x20000140

08000e70 <qmc5883p_Read_Reg>:
static void qmc5883p_Read_Reg(uint8_t reg, uint8_t *buffer, uint8_t len){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, Q5883P_ADDR, reg, 1, buffer, len, HAL_MAX_DELAY);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	9102      	str	r1, [sp, #8]
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2158      	movs	r1, #88	@ 0x58
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <qmc5883p_Read_Reg+0x38>)
 8000e9a:	f002 fa1d 	bl	80032d8 <HAL_I2C_Mem_Read>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000140 	.word	0x20000140

08000eac <qmc5883p_init>:
uint8_t qmc5883p_init(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

	uint8_t set_osr = 0xCD;		// set OSR to 200Hz
 8000eb2:	23cd      	movs	r3, #205	@ 0xcd
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t set_range = 0x08;	// set full range to 8 Guass
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	71bb      	strb	r3, [r7, #6]
	uint8_t qmc_ID;
	qmc5883p_Read_Reg(Q5883P_ID_ADDR, &qmc_ID, 1);
 8000eba:	1d7b      	adds	r3, r7, #5
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff ffd5 	bl	8000e70 <qmc5883p_Read_Reg>

	if ( qmc_ID != 0x80 ) return 0;
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	2b80      	cmp	r3, #128	@ 0x80
 8000eca:	d001      	beq.n	8000ed0 <qmc5883p_init+0x24>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e01e      	b.n	8000f0e <qmc5883p_init+0x62>

	qmc5883p_Write_Reg(0x29, 0x06);
 8000ed0:	2106      	movs	r1, #6
 8000ed2:	2029      	movs	r0, #41	@ 0x29
 8000ed4:	f7ff ffac 	bl	8000e30 <qmc5883p_Write_Reg>
	HAL_Delay(50);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f001 fc8d 	bl	80027f8 <HAL_Delay>
	qmc5883p_Write_Reg(Q5883P_CONTR_2, 0x40);
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f7ff ffa5 	bl	8000e30 <qmc5883p_Write_Reg>
	HAL_Delay(50);
 8000ee6:	2032      	movs	r0, #50	@ 0x32
 8000ee8:	f001 fc86 	bl	80027f8 <HAL_Delay>
	qmc5883p_Write_Reg(Q5883P_CONTR_2, set_range);
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	200b      	movs	r0, #11
 8000ef2:	f7ff ff9d 	bl	8000e30 <qmc5883p_Write_Reg>
	HAL_Delay(50);
 8000ef6:	2032      	movs	r0, #50	@ 0x32
 8000ef8:	f001 fc7e 	bl	80027f8 <HAL_Delay>
	qmc5883p_Write_Reg(Q5883P_CONTR_1, set_osr);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4619      	mov	r1, r3
 8000f00:	200a      	movs	r0, #10
 8000f02:	f7ff ff95 	bl	8000e30 <qmc5883p_Write_Reg>
	HAL_Delay(50);
 8000f06:	2032      	movs	r0, #50	@ 0x32
 8000f08:	f001 fc76 	bl	80027f8 <HAL_Delay>
	return 1;
 8000f0c:	2301      	movs	r3, #1

}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <qmc5883p_read>:
uint8_t qmc5883p_read(double magWorld[3]){
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

	uint8_t qmc_data_status;
	uint8_t buf[6];
	int16_t magraw[3];

	qmc5883p_Read_Reg(Q5883P_DATA_READY, &qmc_data_status, 1);
 8000f20:	f107 031b 	add.w	r3, r7, #27
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	2009      	movs	r0, #9
 8000f2a:	f7ff ffa1 	bl	8000e70 <qmc5883p_Read_Reg>

	if ( (qmc_data_status & 0x01) != 1 ) {
 8000f2e:	7efb      	ldrb	r3, [r7, #27]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <qmc5883p_read+0x24>

		return 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e04a      	b.n	8000fd2 <qmc5883p_read+0xba>
	}

	qmc5883p_Read_Reg(Q5883P_DATA_REG, buf, 6);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2206      	movs	r2, #6
 8000f42:	4619      	mov	r1, r3
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ff93 	bl	8000e70 <qmc5883p_Read_Reg>

	magraw[1] = -(buf[1] << 8 | buf[0]);
 8000f4a:	7d7b      	ldrb	r3, [r7, #21]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	7d3b      	ldrb	r3, [r7, #20]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	81fb      	strh	r3, [r7, #14]
	magraw[0] = -(buf[3] << 8 | buf[2]);
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	425b      	negs	r3, r3
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	81bb      	strh	r3, [r7, #12]
	magraw[2] = -(buf[5] << 8 | buf[4]);
 8000f7a:	7e7b      	ldrb	r3, [r7, #25]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	7e3b      	ldrb	r3, [r7, #24]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	823b      	strh	r3, [r7, #16]
//	magraw[1] = -magraw[0];
//	magraw[2] = -magraw[2];
//	magraw[0] = -magraw[1];
//	magraw[1] = magraw[0];

	for (int i=0; i<3; i++) magWorld[i] = (magraw[i] * 0.026666666666667); //ADC_value / Sensitivity * 100
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e018      	b.n	8000fca <qmc5883p_read+0xb2>
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3320      	adds	r3, #32
 8000f9e:	443b      	add	r3, r7
 8000fa0:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa61 	bl	800046c <__aeabi_i2d>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	18d4      	adds	r4, r2, r3
 8000fb2:	a30b      	add	r3, pc, #44	@ (adr r3, 8000fe0 <qmc5883p_read+0xc8>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fac2 	bl	8000540 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	e9c4 2300 	strd	r2, r3, [r4]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	dde3      	ble.n	8000f98 <qmc5883p_read+0x80>

	return 1;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	@ 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	b4e81baf 	.word	0xb4e81baf
 8000fe4:	3f9b4e81 	.word	0x3f9b4e81

08000fe8 <bmp280_ReadCalibrateValue>:
extern I2C_HandleTypeDef hi2c1;

uint8_t BMP280_MODE		=	(BMP280_TEMPERATURE_16BIT <<5 | BMP280_HIGHRES<<2 | BMP280_NORMALMODE);
uint8_t BMP280_FILTER 	=	(BME280_FILTER_X8 << 2);

static void bmp280_ReadCalibrateValue(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af04      	add	r7, sp, #16
	uint8_t buf[24];

	HAL_I2C_Mem_Read(&hi2c1, BMP280_I2CADDR, BMP280_DIG_T1, 1, buf, 24, 100);
 8000fee:	2364      	movs	r3, #100	@ 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2318      	movs	r3, #24
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2288      	movs	r2, #136	@ 0x88
 8000ffe:	21ec      	movs	r1, #236	@ 0xec
 8001000:	483a      	ldr	r0, [pc, #232]	@ (80010ec <bmp280_ReadCalibrateValue+0x104>)
 8001002:	f002 f969 	bl	80032d8 <HAL_I2C_Mem_Read>

	bmp280_cal.dig_T1 = buf[1] << 8 | buf[0];
 8001006:	787b      	ldrb	r3, [r7, #1]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	783b      	ldrb	r3, [r7, #0]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001018:	801a      	strh	r2, [r3, #0]
	bmp280_cal.dig_T2 = buf[3] << 8 | buf[2];
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	78bb      	ldrb	r3, [r7, #2]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 800102a:	805a      	strh	r2, [r3, #2]
	bmp280_cal.dig_T3 = buf[5] << 8 | buf[4];
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 800103c:	809a      	strh	r2, [r3, #4]

	bmp280_cal.dig_P1 = buf[7] << 8 | buf[6];
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001050:	80da      	strh	r2, [r3, #6]
	bmp280_cal.dig_P2 = buf[9] << 8 | buf[8];
 8001052:	7a7b      	ldrb	r3, [r7, #9]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7a3b      	ldrb	r3, [r7, #8]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001062:	811a      	strh	r2, [r3, #8]
	bmp280_cal.dig_P3 = buf[11]<< 8 | buf[10];
 8001064:	7afb      	ldrb	r3, [r7, #11]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001074:	815a      	strh	r2, [r3, #10]
	bmp280_cal.dig_P4 = buf[13]<< 8 | buf[12];
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001086:	819a      	strh	r2, [r3, #12]
	bmp280_cal.dig_P5 = buf[15]<< 8 | buf[14];
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 8001098:	81da      	strh	r2, [r3, #14]
	bmp280_cal.dig_P6 = buf[17]<< 8 | buf[16];
 800109a:	7c7b      	ldrb	r3, [r7, #17]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	7c3b      	ldrb	r3, [r7, #16]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 80010aa:	821a      	strh	r2, [r3, #16]
	bmp280_cal.dig_P7 = buf[19]<< 8 | buf[18];
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	7cbb      	ldrb	r3, [r7, #18]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 80010bc:	825a      	strh	r2, [r3, #18]
	bmp280_cal.dig_P8 = buf[21]<< 8 | buf[20];
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7d3b      	ldrb	r3, [r7, #20]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 80010ce:	829a      	strh	r2, [r3, #20]
	bmp280_cal.dig_P9 = buf[23]<< 8 | buf[22];
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7dbb      	ldrb	r3, [r7, #22]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <bmp280_ReadCalibrateValue+0x108>)
 80010e0:	82da      	strh	r2, [r3, #22]
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000ec 	.word	0x200000ec
 80010f0:	200000d4 	.word	0x200000d4

080010f4 <bmp280_Init>:
bool bmp280_Init() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af04      	add	r7, sp, #16
    uint8_t checkID;

    // Read chip ID
    HAL_I2C_Mem_Read(&hi2c1, BMP280_I2CADDR, BMP280_CHIPID, 1, &checkID, 1, 10);
 80010fa:	230a      	movs	r3, #10
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	22d0      	movs	r2, #208	@ 0xd0
 800110a:	21ec      	movs	r1, #236	@ 0xec
 800110c:	4816      	ldr	r0, [pc, #88]	@ (8001168 <bmp280_Init+0x74>)
 800110e:	f002 f8e3 	bl	80032d8 <HAL_I2C_Mem_Read>
    if (checkID != 0x58 && checkID != 0x60) return false; // Check for BMP280 or BME280
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b58      	cmp	r3, #88	@ 0x58
 8001116:	d004      	beq.n	8001122 <bmp280_Init+0x2e>
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b60      	cmp	r3, #96	@ 0x60
 800111c:	d001      	beq.n	8001122 <bmp280_Init+0x2e>
 800111e:	2300      	movs	r3, #0
 8001120:	e01e      	b.n	8001160 <bmp280_Init+0x6c>

    // Configure sensor settings
    uint8_t config = (BME280_FILTER_X8 << 2); // Set IIR filter coefficient
 8001122:	230c      	movs	r3, #12
 8001124:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, BMP280_I2CADDR, BMP280_CONFIG, 1, &config, 1, 10);
 8001126:	230a      	movs	r3, #10
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	22f5      	movs	r2, #245	@ 0xf5
 8001136:	21ec      	movs	r1, #236	@ 0xec
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <bmp280_Init+0x74>)
 800113a:	f001 ffd3 	bl	80030e4 <HAL_I2C_Mem_Write>

    uint8_t ctrl_meas = (BMP280_TEMPERATURE_16BIT << 5) | (BMP280_HIGHRES << 2) | BMP280_NORMALMODE;
 800113e:	2333      	movs	r3, #51	@ 0x33
 8001140:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, BMP280_I2CADDR, BMP280_CONTROL, 1, &ctrl_meas, 1, 10);
 8001142:	230a      	movs	r3, #10
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1d7b      	adds	r3, r7, #5
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	22f4      	movs	r2, #244	@ 0xf4
 8001152:	21ec      	movs	r1, #236	@ 0xec
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <bmp280_Init+0x74>)
 8001156:	f001 ffc5 	bl	80030e4 <HAL_I2C_Mem_Write>

    // Read calibration data
    bmp280_ReadCalibrateValue();
 800115a:	f7ff ff45 	bl	8000fe8 <bmp280_ReadCalibrateValue>

    return true;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000ec 	.word	0x200000ec

0800116c <bmp280_GetUP>:
}
bool bmp280_StartUP(){

	return true;
}
void bmp280_GetUP(){
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16

	uint8_t buf[6];
	HAL_I2C_Mem_Read(&hi2c1, BMP280_I2CADDR, BMP280_PRESSUREDATA, 1, buf, 6, 10);
 8001172:	230a      	movs	r3, #10
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2306      	movs	r3, #6
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	463b      	mov	r3, r7
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	22f7      	movs	r2, #247	@ 0xf7
 8001182:	21ec      	movs	r1, #236	@ 0xec
 8001184:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <bmp280_GetUP+0x54>)
 8001186:	f002 f8a7 	bl	80032d8 <HAL_I2C_Mem_Read>
	Baro.bmp280_up = (buf[0] << 12) | (buf[1] << 4) | buf[2] >> 4;
 800118a:	783b      	ldrb	r3, [r7, #0]
 800118c:	031a      	lsls	r2, r3, #12
 800118e:	787b      	ldrb	r3, [r7, #1]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	4313      	orrs	r3, r2
 8001194:	78ba      	ldrb	r2, [r7, #2]
 8001196:	0912      	lsrs	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	4313      	orrs	r3, r2
 800119c:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <bmp280_GetUP+0x58>)
 800119e:	6053      	str	r3, [r2, #4]
	Baro.bmp280_ut = (buf[3] << 12) | (buf[4] << 4) | buf[5] >> 4;
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	031a      	lsls	r2, r3, #12
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4313      	orrs	r3, r2
 80011aa:	797a      	ldrb	r2, [r7, #5]
 80011ac:	0912      	lsrs	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	4313      	orrs	r3, r2
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <bmp280_GetUP+0x58>)
 80011b4:	6093      	str	r3, [r2, #8]


}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000ec 	.word	0x200000ec
 80011c4:	200000bc 	.word	0x200000bc

080011c8 <bmp280_CompensateTemperature>:
int32_t bmp280_CompensateTemperature(int32_t adc_T) {
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, temp_adc, T;
    temp_adc = adc_T;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	617b      	str	r3, [r7, #20]

    var1 = ((((temp_adc >> 3) - ((int32_t)bmp280_cal.dig_T1 << 1))) * ((int32_t)bmp280_cal.dig_T2)) >> 11;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	10da      	asrs	r2, r3, #3
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <bmp280_CompensateTemperature+0x78>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <bmp280_CompensateTemperature+0x78>)
 80011e2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	12db      	asrs	r3, r3, #11
 80011ec:	613b      	str	r3, [r7, #16]
    var2 = (((((temp_adc >> 4) - ((int32_t)bmp280_cal.dig_T1)) * ((temp_adc >> 4) - ((int32_t)bmp280_cal.dig_T1))) >> 12) * ((int32_t)bmp280_cal.dig_T3)) >> 14;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	111b      	asrs	r3, r3, #4
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <bmp280_CompensateTemperature+0x78>)
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	1112      	asrs	r2, r2, #4
 80011fc:	4910      	ldr	r1, [pc, #64]	@ (8001240 <bmp280_CompensateTemperature+0x78>)
 80011fe:	8809      	ldrh	r1, [r1, #0]
 8001200:	1a52      	subs	r2, r2, r1
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	131b      	asrs	r3, r3, #12
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <bmp280_CompensateTemperature+0x78>)
 800120a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	139b      	asrs	r3, r3, #14
 8001214:	60fb      	str	r3, [r7, #12]

    Baro.t_fine = (var1 + var2);
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <bmp280_CompensateTemperature+0x7c>)
 800121e:	6013      	str	r3, [r2, #0]

    T = (Baro.t_fine * 5 + 128) >> 8;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <bmp280_CompensateTemperature+0x7c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3380      	adds	r3, #128	@ 0x80
 800122c:	121b      	asrs	r3, r3, #8
 800122e:	60bb      	str	r3, [r7, #8]

    return T;
 8001230:	68bb      	ldr	r3, [r7, #8]
}
 8001232:	4618      	mov	r0, r3
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200000d4 	.word	0x200000d4
 8001244:	200000bc 	.word	0x200000bc

08001248 <bmp280_CompensatePressure>:
int32_t bmp280_CompensatePressure(int32_t adc_P) {
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b0cc      	sub	sp, #304	@ 0x130
 800124e:	af00      	add	r7, sp, #0
 8001250:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    int32_t pres_adc;
    int64_t var1, var2, p;

    pres_adc = adc_P;
 8001254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001258:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    var1 = ((int64_t)Baro.t_fine) - 128000;
 800125c:	4baf      	ldr	r3, [pc, #700]	@ (800151c <bmp280_CompensatePressure+0x2d4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	461c      	mov	r4, r3
 8001264:	4615      	mov	r5, r2
 8001266:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800126a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800126e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (int64_t)bmp280_cal.dig_P6;
 8001272:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001276:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800127a:	fb03 f102 	mul.w	r1, r3, r2
 800127e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001282:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	18ca      	adds	r2, r1, r3
 800128c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001290:	fba3 8903 	umull	r8, r9, r3, r3
 8001294:	eb02 0309 	add.w	r3, r2, r9
 8001298:	4699      	mov	r9, r3
 800129a:	4ba1      	ldr	r3, [pc, #644]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 800129c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	17da      	asrs	r2, r3, #31
 80012a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012ac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012b0:	4603      	mov	r3, r0
 80012b2:	fb03 f209 	mul.w	r2, r3, r9
 80012b6:	460b      	mov	r3, r1
 80012b8:	fb08 f303 	mul.w	r3, r8, r3
 80012bc:	4413      	add	r3, r2
 80012be:	4602      	mov	r2, r0
 80012c0:	fba8 1202 	umull	r1, r2, r8, r2
 80012c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012c8:	460a      	mov	r2, r1
 80012ca:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012d2:	4413      	add	r3, r2
 80012d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012d8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)bmp280_cal.dig_P5) << 17);
 80012e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 80012e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	17da      	asrs	r2, r3, #31
 80012ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012fa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012fe:	462a      	mov	r2, r5
 8001300:	fb02 f203 	mul.w	r2, r2, r3
 8001304:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001308:	4621      	mov	r1, r4
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	441a      	add	r2, r3
 8001310:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001314:	4621      	mov	r1, r4
 8001316:	fba3 1301 	umull	r1, r3, r3, r1
 800131a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800131e:	460b      	mov	r3, r1
 8001320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800132e:	f04f 0000 	mov.w	r0, #0
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800133a:	462b      	mov	r3, r5
 800133c:	0459      	lsls	r1, r3, #17
 800133e:	4623      	mov	r3, r4
 8001340:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001344:	4623      	mov	r3, r4
 8001346:	0458      	lsls	r0, r3, #17
 8001348:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800134c:	1814      	adds	r4, r2, r0
 800134e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001350:	414b      	adcs	r3, r1
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
 8001354:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001358:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)bmp280_cal.dig_P4) << 35);
 800135c:	4b70      	ldr	r3, [pc, #448]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 800135e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001362:	b21b      	sxth	r3, r3
 8001364:	17da      	asrs	r2, r3, #31
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800136a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800137a:	00d9      	lsls	r1, r3, #3
 800137c:	2000      	movs	r0, #0
 800137e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001382:	1814      	adds	r4, r2, r0
 8001384:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001386:	414b      	adcs	r3, r1
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800138a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800138e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)bmp280_cal.dig_P3) >> 8) + ((var1 * (int64_t)bmp280_cal.dig_P2) << 12);
 8001392:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800139a:	fb03 f102 	mul.w	r1, r3, r2
 800139e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	18ca      	adds	r2, r1, r3
 80013ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013b0:	fba3 1303 	umull	r1, r3, r3, r3
 80013b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013b8:	460b      	mov	r3, r1
 80013ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 80013ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	17da      	asrs	r2, r3, #31
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013da:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013de:	462b      	mov	r3, r5
 80013e0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013e4:	4642      	mov	r2, r8
 80013e6:	fb02 f203 	mul.w	r2, r2, r3
 80013ea:	464b      	mov	r3, r9
 80013ec:	4621      	mov	r1, r4
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4622      	mov	r2, r4
 80013f6:	4641      	mov	r1, r8
 80013f8:	fba2 1201 	umull	r1, r2, r2, r1
 80013fc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001400:	460a      	mov	r2, r1
 8001402:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001406:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800140a:	4413      	add	r3, r2
 800140c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800141c:	4623      	mov	r3, r4
 800141e:	0a18      	lsrs	r0, r3, #8
 8001420:	462b      	mov	r3, r5
 8001422:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001426:	462b      	mov	r3, r5
 8001428:	1219      	asrs	r1, r3, #8
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 800142c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001430:	b21b      	sxth	r3, r3
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001438:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800143c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001440:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001444:	464a      	mov	r2, r9
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800144e:	4644      	mov	r4, r8
 8001450:	fb04 f303 	mul.w	r3, r4, r3
 8001454:	441a      	add	r2, r3
 8001456:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800145a:	4644      	mov	r4, r8
 800145c:	fba3 4304 	umull	r4, r3, r3, r4
 8001460:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001464:	4623      	mov	r3, r4
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800146a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001480:	464c      	mov	r4, r9
 8001482:	0323      	lsls	r3, r4, #12
 8001484:	4644      	mov	r4, r8
 8001486:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800148a:	4644      	mov	r4, r8
 800148c:	0322      	lsls	r2, r4, #12
 800148e:	1884      	adds	r4, r0, r2
 8001490:	633c      	str	r4, [r7, #48]	@ 0x30
 8001492:	eb41 0303 	adc.w	r3, r1, r3
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800149c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1) * ((int64_t)bmp280_cal.dig_P1)) >> 33;
 80014a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014a4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014a8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014ac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <bmp280_CompensatePressure+0x2d8>)
 80014b2:	88db      	ldrh	r3, [r3, #6]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014c0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c4:	462b      	mov	r3, r5
 80014c6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ca:	4642      	mov	r2, r8
 80014cc:	fb02 f203 	mul.w	r2, r2, r3
 80014d0:	464b      	mov	r3, r9
 80014d2:	4621      	mov	r1, r4
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4622      	mov	r2, r4
 80014dc:	4641      	mov	r1, r8
 80014de:	fba2 1201 	umull	r1, r2, r2, r1
 80014e2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014e6:	460a      	mov	r2, r1
 80014e8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014f0:	4413      	add	r3, r2
 80014f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001502:	4629      	mov	r1, r5
 8001504:	104a      	asrs	r2, r1, #1
 8001506:	4629      	mov	r1, r5
 8001508:	17cb      	asrs	r3, r1, #31
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0) return 0;
 800150e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001512:	4313      	orrs	r3, r2
 8001514:	d106      	bne.n	8001524 <bmp280_CompensatePressure+0x2dc>
 8001516:	2300      	movs	r3, #0
 8001518:	e14a      	b.n	80017b0 <bmp280_CompensatePressure+0x568>
 800151a:	bf00      	nop
 800151c:	200000bc 	.word	0x200000bc
 8001520:	200000d4 	.word	0x200000d4

    p = 1048576 - pres_adc;
 8001524:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001528:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001532:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001536:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 800153a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001544:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001548:	07db      	lsls	r3, r3, #31
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800154e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001552:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001556:	4621      	mov	r1, r4
 8001558:	1a89      	subs	r1, r1, r2
 800155a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800155c:	4629      	mov	r1, r5
 800155e:	eb61 0303 	sbc.w	r3, r1, r3
 8001562:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001564:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001568:	4622      	mov	r2, r4
 800156a:	462b      	mov	r3, r5
 800156c:	1891      	adds	r1, r2, r2
 800156e:	6239      	str	r1, [r7, #32]
 8001570:	415b      	adcs	r3, r3
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	4621      	mov	r1, r4
 800157a:	1851      	adds	r1, r2, r1
 800157c:	61b9      	str	r1, [r7, #24]
 800157e:	4629      	mov	r1, r5
 8001580:	414b      	adcs	r3, r1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001590:	4649      	mov	r1, r9
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4641      	mov	r1, r8
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4641      	mov	r1, r8
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4641      	mov	r1, r8
 80015a0:	1889      	adds	r1, r1, r2
 80015a2:	6139      	str	r1, [r7, #16]
 80015a4:	4649      	mov	r1, r9
 80015a6:	eb43 0101 	adc.w	r1, r3, r1
 80015aa:	6179      	str	r1, [r7, #20]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b8:	4649      	mov	r1, r9
 80015ba:	008b      	lsls	r3, r1, #2
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015c2:	4641      	mov	r1, r8
 80015c4:	008a      	lsls	r2, r1, #2
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	4622      	mov	r2, r4
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	460b      	mov	r3, r1
 80015d4:	462a      	mov	r2, r5
 80015d6:	eb42 0303 	adc.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015e8:	4649      	mov	r1, r9
 80015ea:	008b      	lsls	r3, r1, #2
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f2:	4641      	mov	r1, r8
 80015f4:	008a      	lsls	r2, r1, #2
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	4622      	mov	r2, r4
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	673b      	str	r3, [r7, #112]	@ 0x70
 8001602:	462b      	mov	r3, r5
 8001604:	460a      	mov	r2, r1
 8001606:	eb42 0303 	adc.w	r3, r2, r3
 800160a:	677b      	str	r3, [r7, #116]	@ 0x74
 800160c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001610:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001614:	f7ff fa44 	bl	8000aa0 <__aeabi_ldivmod>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)bmp280_cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001620:	4b66      	ldr	r3, [pc, #408]	@ (80017bc <bmp280_CompensatePressure+0x574>)
 8001622:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001626:	b21b      	sxth	r3, r3
 8001628:	17da      	asrs	r2, r3, #31
 800162a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800162c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800162e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0b50      	lsrs	r0, r2, #13
 800163c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001640:	1359      	asrs	r1, r3, #13
 8001642:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001646:	462b      	mov	r3, r5
 8001648:	fb00 f203 	mul.w	r2, r0, r3
 800164c:	4623      	mov	r3, r4
 800164e:	fb03 f301 	mul.w	r3, r3, r1
 8001652:	4413      	add	r3, r2
 8001654:	4622      	mov	r2, r4
 8001656:	fba2 1200 	umull	r1, r2, r2, r0
 800165a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800165e:	460a      	mov	r2, r1
 8001660:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001668:	4413      	add	r3, r2
 800166a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800166e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0b50      	lsrs	r0, r2, #13
 800167c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001680:	1359      	asrs	r1, r3, #13
 8001682:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001686:	462b      	mov	r3, r5
 8001688:	fb00 f203 	mul.w	r2, r0, r3
 800168c:	4623      	mov	r3, r4
 800168e:	fb03 f301 	mul.w	r3, r3, r1
 8001692:	4413      	add	r3, r2
 8001694:	4622      	mov	r2, r4
 8001696:	fba2 1200 	umull	r1, r2, r2, r0
 800169a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800169e:	460a      	mov	r2, r1
 80016a0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016a8:	4413      	add	r3, r2
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016ba:	4621      	mov	r1, r4
 80016bc:	0e4a      	lsrs	r2, r1, #25
 80016be:	4629      	mov	r1, r5
 80016c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016c4:	4629      	mov	r1, r5
 80016c6:	164b      	asrs	r3, r1, #25
 80016c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)bmp280_cal.dig_P8) * p) >> 19;
 80016cc:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <bmp280_CompensatePressure+0x574>)
 80016ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80016d8:	667a      	str	r2, [r7, #100]	@ 0x64
 80016da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016e2:	462a      	mov	r2, r5
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016ec:	4621      	mov	r1, r4
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016f8:	4621      	mov	r1, r4
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001708:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800171e:	4621      	mov	r1, r4
 8001720:	0cca      	lsrs	r2, r1, #19
 8001722:	4629      	mov	r1, r5
 8001724:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001728:	4629      	mov	r1, r5
 800172a:	14cb      	asrs	r3, r1, #19
 800172c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280_cal.dig_P7) << 4);
 8001730:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001734:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001738:	1884      	adds	r4, r0, r2
 800173a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001742:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001746:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800174a:	4621      	mov	r1, r4
 800174c:	1889      	adds	r1, r1, r2
 800174e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001750:	4629      	mov	r1, r5
 8001752:	eb43 0101 	adc.w	r1, r3, r1
 8001756:	6579      	str	r1, [r7, #84]	@ 0x54
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001764:	4623      	mov	r3, r4
 8001766:	0a18      	lsrs	r0, r3, #8
 8001768:	462b      	mov	r3, r5
 800176a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800176e:	462b      	mov	r3, r5
 8001770:	1219      	asrs	r1, r3, #8
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <bmp280_CompensatePressure+0x574>)
 8001774:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800177e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800178c:	464c      	mov	r4, r9
 800178e:	0123      	lsls	r3, r4, #4
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001796:	4644      	mov	r4, r8
 8001798:	0122      	lsls	r2, r4, #4
 800179a:	1884      	adds	r4, r0, r2
 800179c:	603c      	str	r4, [r7, #0]
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (int32_t)p;
 80017ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017bc:	200000d4 	.word	0x200000d4

080017c0 <bmp280_Calculate>:
static void bmp280_Calculate(int32_t *pressure, int32_t *temperature){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	int32_t t = bmp280_CompensateTemperature(Baro.bmp280_ut);
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <bmp280_Calculate+0x4c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fcfa 	bl	80011c8 <bmp280_CompensateTemperature>
 80017d4:	60f8      	str	r0, [r7, #12]
	int32_t p = bmp280_CompensatePressure(Baro.bmp280_up);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <bmp280_Calculate+0x4c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fd34 	bl	8001248 <bmp280_CompensatePressure>
 80017e0:	60b8      	str	r0, [r7, #8]

	if (pressure) *pressure = p / 256;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <bmp280_Calculate+0x38>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da00      	bge.n	80017f0 <bmp280_Calculate+0x30>
 80017ee:	33ff      	adds	r3, #255	@ 0xff
 80017f0:	121b      	asrs	r3, r3, #8
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
	if (temperature) * temperature = t;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <bmp280_Calculate+0x44>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	601a      	str	r2, [r3, #0]

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200000bc 	.word	0x200000bc

08001810 <pressureToAltitude>:

double pressureToAltitude(double pressure, double offsetAlti)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0b02 	vstr	d0, [r7, #8]
 800181a:	ed87 1b00 	vstr	d1, [r7]
   return (1.0f - pow(pressure / 101325.0f, 0.190295f)) * 4433000.0f / 100.0  - offsetAlti;
 800181e:	a326      	add	r3, pc, #152	@ (adr r3, 80018b8 <pressureToAltitude+0xa8>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001828:	f7fe ffb4 	bl	8000794 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	ec43 2b17 	vmov	d7, r2, r3
 8001834:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 80018a0 <pressureToAltitude+0x90>
 8001838:	eeb0 0a47 	vmov.f32	s0, s14
 800183c:	eef0 0a67 	vmov.f32	s1, s15
 8001840:	f00a fe16 	bl	800c470 <pow>
 8001844:	ec53 2b10 	vmov	r2, r3, d0
 8001848:	f04f 0000 	mov.w	r0, #0
 800184c:	4918      	ldr	r1, [pc, #96]	@ (80018b0 <pressureToAltitude+0xa0>)
 800184e:	f7fe fcbf 	bl	80001d0 <__aeabi_dsub>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a313      	add	r3, pc, #76	@ (adr r3, 80018a8 <pressureToAltitude+0x98>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fe6e 	bl	8000540 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <pressureToAltitude+0xa4>)
 8001872:	f7fe ff8f 	bl	8000794 <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001882:	f7fe fca5 	bl	80001d0 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	ec43 2b17 	vmov	d7, r2, r3
}
 800188e:	eeb0 0a47 	vmov.f32	s0, s14
 8001892:	eef0 0a67 	vmov.f32	s1, s15
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	20000000 	.word	0x20000000
 80018a4:	3fc85b96 	.word	0x3fc85b96
 80018a8:	00000000 	.word	0x00000000
 80018ac:	4150e91a 	.word	0x4150e91a
 80018b0:	3ff00000 	.word	0x3ff00000
 80018b4:	40590000 	.word	0x40590000
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40f8bcd0 	.word	0x40f8bcd0

080018c0 <bmp280_Update>:
{
    return powf(1.0f - (altCm / 4433000.0f), 5.254999) * 101325.0f;
}


void bmp280_Update(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	bmp280_GetUP();
 80018c4:	f7ff fc52 	bl	800116c <bmp280_GetUP>
	bmp280_Calculate(&Baro.baroPressure, &Baro.baroTemperature);
 80018c8:	4902      	ldr	r1, [pc, #8]	@ (80018d4 <bmp280_Update+0x14>)
 80018ca:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <bmp280_Update+0x18>)
 80018cc:	f7ff ff78 	bl	80017c0 <bmp280_Calculate>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000cc 	.word	0x200000cc
 80018d8:	200000c8 	.word	0x200000c8

080018dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_GPIO_Init+0x98>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <MX_GPIO_Init+0x98>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <MX_GPIO_Init+0x98>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_GPIO_Init+0x98>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_GPIO_Port, CS_GPIO_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2110      	movs	r1, #16
 800194a:	480b      	ldr	r0, [pc, #44]	@ (8001978 <MX_GPIO_Init+0x9c>)
 800194c:	f001 fa56 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_GPIO_Pin */
  GPIO_InitStruct.Pin = CS_GPIO_Pin;
 8001950:	2310      	movs	r3, #16
 8001952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4619      	mov	r1, r3
 8001966:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_GPIO_Init+0x9c>)
 8001968:	f001 f8ac 	bl	8002ac4 <HAL_GPIO_Init>

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000

0800197c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <MX_I2C1_Init+0x50>)
 8001982:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <MX_I2C1_Init+0x54>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_I2C1_Init+0x50>)
 8001988:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <MX_I2C1_Init+0x58>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_I2C1_Init+0x50>)
 800199a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800199e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <MX_I2C1_Init+0x50>)
 80019ba:	f001 fa39 	bl	8002e30 <HAL_I2C_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c4:	f000 fb32 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000ec 	.word	0x200000ec
 80019d0:	40005400 	.word	0x40005400
 80019d4:	000186a0 	.word	0x000186a0

080019d8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <MX_I2C2_Init+0x54>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_I2C2_Init+0x58>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <MX_I2C2_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <MX_I2C2_Init+0x50>)
 8001a16:	f001 fa0b 	bl	8002e30 <HAL_I2C_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a20:	f000 fb04 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000140 	.word	0x20000140
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	000186a0 	.word	0x000186a0

08001a34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	@ 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3a      	ldr	r2, [pc, #232]	@ (8001b3c <HAL_I2C_MspInit+0x108>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d134      	bne.n	8001ac0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a38      	ldr	r2, [pc, #224]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a72:	23c0      	movs	r3, #192	@ 0xc0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a76:	2312      	movs	r3, #18
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a82:	2304      	movs	r3, #4
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	482d      	ldr	r0, [pc, #180]	@ (8001b44 <HAL_I2C_MspInit+0x110>)
 8001a8e:	f001 f819 	bl	8002ac4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201f      	movs	r0, #31
 8001ab4:	f000 ff9f 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ab8:	201f      	movs	r0, #31
 8001aba:	f000 ffb8 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001abe:	e039      	b.n	8001b34 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	@ (8001b48 <HAL_I2C_MspInit+0x114>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d134      	bne.n	8001b34 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ae6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4810      	ldr	r0, [pc, #64]	@ (8001b44 <HAL_I2C_MspInit+0x110>)
 8001b04:	f000 ffde 	bl	8002ac4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001b12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_I2C_MspInit+0x10c>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2021      	movs	r0, #33	@ 0x21
 8001b2a:	f000 ff64 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b2e:	2021      	movs	r0, #33	@ 0x21
 8001b30:	f000 ff7d 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	00000000 	.word	0x00000000

08001b50 <sensorCalib>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void sensorCalib(void){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b09e      	sub	sp, #120	@ 0x78
 8001b54:	af00      	add	r7, sp, #0
  double AltiTmp;
  double mean_tmp[3];
  double accel[3];
  double gyro[3];
  double mag[3];
  for(int i=0; i<100; i++){
 8001b56:	2300      	movs	r3, #0
 8001b58:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b5a:	e084      	b.n	8001c66 <sensorCalib+0x116>

	 bmp280_Update();
 8001b5c:	f7ff feb0 	bl	80018c0 <bmp280_Update>
	 AltiTmp = pressureToAltitude(Baro.baroPressure, 0);
 8001b60:	4b85      	ldr	r3, [pc, #532]	@ (8001d78 <sensorCalib+0x228>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc81 	bl	800046c <__aeabi_i2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8001d70 <sensorCalib+0x220>
 8001b72:	ec43 2b10 	vmov	d0, r2, r3
 8001b76:	f7ff fe4b 	bl	8001810 <pressureToAltitude>
 8001b7a:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	 meanAlti += AltiTmp;
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d7c <sensorCalib+0x22c>)
 8001b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b84:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b88:	f7fe fb24 	bl	80001d4 <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	497a      	ldr	r1, [pc, #488]	@ (8001d7c <sensorCalib+0x22c>)
 8001b92:	e9c1 2300 	strd	r2, r3, [r1]
	 MPU6500_Read_Scaled(accel, gyro, mean_tmp, mean_tmp);
 8001b96:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b9a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b9e:	f107 0118 	add.w	r1, r7, #24
 8001ba2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001ba6:	f000 fb17 	bl	80021d8 <MPU6500_Read_Scaled>
	 qmc5883p_read(mag);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f9b3 	bl	8000f18 <qmc5883p_read>
	 mcalib(mag, mag);
 8001bb2:	463a      	mov	r2, r7
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00a fb0d 	bl	800c1d8 <mcalib>

	 for (int i=0; i<3; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bc2:	e047      	b.n	8001c54 <sensorCalib+0x104>
		 meanGyro[i] += gyro[i];
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001d80 <sensorCalib+0x230>)
 8001bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	3378      	adds	r3, #120	@ 0x78
 8001bd6:	443b      	add	r3, r7
 8001bd8:	3b60      	subs	r3, #96	@ 0x60
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe faf9 	bl	80001d4 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4866      	ldr	r0, [pc, #408]	@ (8001d80 <sensorCalib+0x230>)
 8001be8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	4401      	add	r1, r0
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]
		 meanMag[i] += mag[i];
 8001bf2:	4a64      	ldr	r2, [pc, #400]	@ (8001d84 <sensorCalib+0x234>)
 8001bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	3378      	adds	r3, #120	@ 0x78
 8001c04:	443b      	add	r3, r7
 8001c06:	3b78      	subs	r3, #120	@ 0x78
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fae2 	bl	80001d4 <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	485b      	ldr	r0, [pc, #364]	@ (8001d84 <sensorCalib+0x234>)
 8001c16:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c18:	00c9      	lsls	r1, r1, #3
 8001c1a:	4401      	add	r1, r0
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
		 meanAccel[i] += accel[i];
 8001c20:	4a59      	ldr	r2, [pc, #356]	@ (8001d88 <sensorCalib+0x238>)
 8001c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	3378      	adds	r3, #120	@ 0x78
 8001c32:	443b      	add	r3, r7
 8001c34:	3b48      	subs	r3, #72	@ 0x48
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe facb 	bl	80001d4 <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4851      	ldr	r0, [pc, #324]	@ (8001d88 <sensorCalib+0x238>)
 8001c44:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c46:	00c9      	lsls	r1, r1, #3
 8001c48:	4401      	add	r1, r0
 8001c4a:	e9c1 2300 	strd	r2, r3, [r1]
	 for (int i=0; i<3; i++){
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c50:	3301      	adds	r3, #1
 8001c52:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	ddb4      	ble.n	8001bc4 <sensorCalib+0x74>
	 }
	 HAL_Delay(10);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f000 fdcc 	bl	80027f8 <HAL_Delay>
  for(int i=0; i<100; i++){
 8001c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c62:	3301      	adds	r3, #1
 8001c64:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c68:	2b63      	cmp	r3, #99	@ 0x63
 8001c6a:	f77f af77 	ble.w	8001b5c <sensorCalib+0xc>
  }

  for(int i=0; i<3; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c72:	e03b      	b.n	8001cec <sensorCalib+0x19c>
    meanGyro[i] /= 100;
 8001c74:	4a42      	ldr	r2, [pc, #264]	@ (8001d80 <sensorCalib+0x230>)
 8001c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <sensorCalib+0x23c>)
 8001c86:	f7fe fd85 	bl	8000794 <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	483c      	ldr	r0, [pc, #240]	@ (8001d80 <sensorCalib+0x230>)
 8001c90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001c92:	00c9      	lsls	r1, r1, #3
 8001c94:	4401      	add	r1, r0
 8001c96:	e9c1 2300 	strd	r2, r3, [r1]
    meanMag[i] /= 100;
 8001c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <sensorCalib+0x234>)
 8001c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <sensorCalib+0x23c>)
 8001cac:	f7fe fd72 	bl	8000794 <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4833      	ldr	r0, [pc, #204]	@ (8001d84 <sensorCalib+0x234>)
 8001cb6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	4401      	add	r1, r0
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
    meanAccel[i] /= 100;
 8001cc0:	4a31      	ldr	r2, [pc, #196]	@ (8001d88 <sensorCalib+0x238>)
 8001cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <sensorCalib+0x23c>)
 8001cd2:	f7fe fd5f 	bl	8000794 <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	482b      	ldr	r0, [pc, #172]	@ (8001d88 <sensorCalib+0x238>)
 8001cdc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001cde:	00c9      	lsls	r1, r1, #3
 8001ce0:	4401      	add	r1, r0
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i=0; i<3; i++) {
 8001ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ce8:	3301      	adds	r3, #1
 8001cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	ddc0      	ble.n	8001c74 <sensorCalib+0x124>
  }
  meanAlti /= 100;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <sensorCalib+0x22c>)
 8001cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <sensorCalib+0x23c>)
 8001cfe:	f7fe fd49 	bl	8000794 <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	491d      	ldr	r1, [pc, #116]	@ (8001d7c <sensorCalib+0x22c>)
 8001d08:	e9c1 2300 	strd	r2, r3, [r1]
  static double RefAccel[3] = {0,0,9.81};
  for(int i=0; i<3; i++) AccelOffset[i] = meanAccel[i] - RefAccel[i];
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d10:	e018      	b.n	8001d44 <sensorCalib+0x1f4>
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <sensorCalib+0x238>)
 8001d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <sensorCalib+0x240>)
 8001d20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fa51 	bl	80001d0 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4818      	ldr	r0, [pc, #96]	@ (8001d94 <sensorCalib+0x244>)
 8001d34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001d36:	00c9      	lsls	r1, r1, #3
 8001d38:	4401      	add	r1, r0
 8001d3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d40:	3301      	adds	r3, #1
 8001d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	dde3      	ble.n	8001d12 <sensorCalib+0x1c2>
  initStateEKF(meanAccel, meanMag, meanAlti, initState);
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <sensorCalib+0x22c>)
 8001d4c:	ed93 7b00 	vldr	d7, [r3]
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <sensorCalib+0x248>)
 8001d52:	eeb0 0a47 	vmov.f32	s0, s14
 8001d56:	eef0 0a67 	vmov.f32	s1, s15
 8001d5a:	490a      	ldr	r1, [pc, #40]	@ (8001d84 <sensorCalib+0x234>)
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <sensorCalib+0x238>)
 8001d5e:	f00a f9ed 	bl	800c13c <initStateEKF>
}
 8001d62:	bf00      	nop
 8001d64:	3778      	adds	r7, #120	@ 0x78
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
	...
 8001d78:	200000bc 	.word	0x200000bc
 8001d7c:	20000210 	.word	0x20000210
 8001d80:	200001e0 	.word	0x200001e0
 8001d84:	200001f8 	.word	0x200001f8
 8001d88:	200001c8 	.word	0x200001c8
 8001d8c:	40590000 	.word	0x40590000
 8001d90:	20000008 	.word	0x20000008
 8001d94:	200005b8 	.word	0x200005b8
 8001d98:	20000198 	.word	0x20000198
 8001d9c:	00000000 	.word	0x00000000

08001da0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db0:	d13d      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x8e>
		static double magNEDTmp[3];
		qmc5883p_read(magNEDTmp);
 8001db2:	483d      	ldr	r0, [pc, #244]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001db4:	f7ff f8b0 	bl	8000f18 <qmc5883p_read>
		mcalib(magNEDTmp, magNED);
 8001db8:	493c      	ldr	r1, [pc, #240]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001dba:	483b      	ldr	r0, [pc, #236]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001dbc:	f00a fa0c 	bl	800c1d8 <mcalib>
//		qmc5883p_read(magNED);
		MPU6500_Read_Scaled(imu.accel, imu.gyro, AccelOffset, meanGyro);
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001dc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001dc4:	493c      	ldr	r1, [pc, #240]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001dc6:	483d      	ldr	r0, [pc, #244]	@ (8001ebc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001dc8:	f000 fa06 	bl	80021d8 <MPU6500_Read_Scaled>
//		ekf10filter(&veasna, &imu, &Mag, &baro);
		ekf10Step(&sys, &imu, magNED, alti);
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001dce:	ed93 7b00 	vldr	d7, [r3]
 8001dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd6:	eef0 0a67 	vmov.f32	s1, s15
 8001dda:	4a34      	ldr	r2, [pc, #208]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ddc:	4936      	ldr	r1, [pc, #216]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001dde:	4839      	ldr	r0, [pc, #228]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001de0:	f008 f972 	bl	800a0c8 <ekf10Step>
		for (int i = 0; i<3; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e01e      	b.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			eulDeg[i] = sys.euler[i] * 180/M_PI;
 8001dea:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001dfc:	f7fe fba0 	bl	8000540 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	a325      	add	r3, pc, #148	@ (adr r3, 8001ea0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fcc1 	bl	8000794 <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	482d      	ldr	r0, [pc, #180]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	00c9      	lsls	r1, r1, #3
 8001e1c:	4401      	add	r1, r0
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i<3; i++)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	dddd      	ble.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x4a>
		}
	}
	if (htim->Instance == TIM3){
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12d      	bne.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0xf4>
		bmp280_Update();
 8001e38:	f7ff fd42 	bl	80018c0 <bmp280_Update>
		for (int i=0; i<3; i++) alti = pressureToAltitude(Baro.baroPressure, meanAlti);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	e019      	b.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8001e42:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb10 	bl	800046c <__aeabi_i2d>
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e4e:	ed93 7b00 	vldr	d7, [r3]
 8001e52:	eeb0 1a47 	vmov.f32	s2, s14
 8001e56:	eef0 1a67 	vmov.f32	s3, s15
 8001e5a:	ec41 0b10 	vmov	d0, r0, r1
 8001e5e:	f7ff fcd7 	bl	8001810 <pressureToAltitude>
 8001e62:	eeb0 7a40 	vmov.f32	s14, s0
 8001e66:	eef0 7a60 	vmov.f32	s15, s1
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001e6c:	ed83 7b00 	vstr	d7, [r3]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	dde2      	ble.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0xa2>
		AltiM = sys.x[4];
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001e7e:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	@ 0x1f8
 8001e82:	4916      	ldr	r1, [pc, #88]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e84:	e9c1 2300 	strd	r2, r3, [r1]
		VelM = sys.x[5];
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001e8a:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	@ 0x200
 8001e8e:	4914      	ldr	r1, [pc, #80]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e90:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	54442d18 	.word	0x54442d18
 8001ea4:	400921fb 	.word	0x400921fb
 8001ea8:	200005d0 	.word	0x200005d0
 8001eac:	20000258 	.word	0x20000258
 8001eb0:	200001e0 	.word	0x200001e0
 8001eb4:	200005b8 	.word	0x200005b8
 8001eb8:	20000228 	.word	0x20000228
 8001ebc:	20000240 	.word	0x20000240
 8001ec0:	200005b0 	.word	0x200005b0
 8001ec4:	20000288 	.word	0x20000288
 8001ec8:	40668000 	.word	0x40668000
 8001ecc:	20000270 	.word	0x20000270
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	200000bc 	.word	0x200000bc
 8001ed8:	20000210 	.word	0x20000210
 8001edc:	20000218 	.word	0x20000218
 8001ee0:	20000220 	.word	0x20000220

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 fc14 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f834 	bl	8001f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f7ff fcf4 	bl	80018dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ef4:	f7ff fd42 	bl	800197c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ef8:	f7ff fd6e 	bl	80019d8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001efc:	f000 f9f2 	bl	80022e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001f00:	f000 fb00 	bl	8002504 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f04:	f000 fb4a 	bl	800259c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MPU6500_Init();
 8001f08:	f000 f94d 	bl	80021a6 <MPU6500_Init>
  qmc5883p_init();
 8001f0c:	f7fe ffce 	bl	8000eac <qmc5883p_init>
  bmp280_Init();
 8001f10:	f7ff f8f0 	bl	80010f4 <bmp280_Init>
  sensorCalib();
 8001f14:	f7ff fe1c 	bl	8001b50 <sensorCalib>
  ekf10Init(imuFs, initState, &sys);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <main+0x60>)
 8001f1a:	ed93 7b00 	vldr	d7, [r3]
 8001f1e:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <main+0x64>)
 8001f20:	480a      	ldr	r0, [pc, #40]	@ (8001f4c <main+0x68>)
 8001f22:	eeb0 0a47 	vmov.f32	s0, s14
 8001f26:	eef0 0a67 	vmov.f32	s1, s15
 8001f2a:	f007 ffdd 	bl	8009ee8 <ekf10Init>
  HAL_Delay(10);
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f000 fc62 	bl	80027f8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);
 8001f34:	4806      	ldr	r0, [pc, #24]	@ (8001f50 <main+0x6c>)
 8001f36:	f004 fe19 	bl	8006b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001f3a:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <main+0x70>)
 8001f3c:	f004 fe16 	bl	8006b6c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <main+0x5c>
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000288 	.word	0x20000288
 8001f4c:	20000198 	.word	0x20000198
 8001f50:	20000650 	.word	0x20000650
 8001f54:	20000698 	.word	0x20000698

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	@ 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	2230      	movs	r2, #48	@ 0x30
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00a fa0b 	bl	800c382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8c:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <SystemClock_Config+0xd0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <SystemClock_Config+0xd0>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <SystemClock_Config+0xd0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fcc:	23a8      	movs	r3, #168	@ 0xa8
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd8:	f107 0320 	add.w	r3, r7, #32
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fb1f 	bl	8005620 <HAL_RCC_OscConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fe8:	f000 f820 	bl	800202c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fec:	230f      	movs	r3, #15
 8001fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2105      	movs	r1, #5
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fd80 	bl	8005b10 <HAL_RCC_ClockConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002016:	f000 f809 	bl	800202c <Error_Handler>
  }
}
 800201a:	bf00      	nop
 800201c:	3750      	adds	r7, #80	@ 0x50
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <Error_Handler+0x8>

08002038 <MPU_Wirte_Register>:
#include "mpu_6500.h"
#include <math.h>

extern SPI_HandleTypeDef hspi1;
// SPI Communication Functions
void MPU_Wirte_Register(uint8_t reg, uint8_t value) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = reg & ~(0x80);  // Clear the read/write bit
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800204e:	b2db      	uxtb	r3, r3
 8002050:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	737b      	strb	r3, [r7, #13]
    MPU6500_CS_LOW();
 8002056:	2200      	movs	r2, #0
 8002058:	2110      	movs	r1, #16
 800205a:	480a      	ldr	r0, [pc, #40]	@ (8002084 <MPU_Wirte_Register+0x4c>)
 800205c:	f000 fece 	bl	8002dfc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8002060:	f107 010c 	add.w	r1, r7, #12
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	2202      	movs	r2, #2
 800206a:	4807      	ldr	r0, [pc, #28]	@ (8002088 <MPU_Wirte_Register+0x50>)
 800206c:	f003 ffe5 	bl	800603a <HAL_SPI_Transmit>
    MPU6500_CS_HIGH();
 8002070:	2201      	movs	r2, #1
 8002072:	2110      	movs	r1, #16
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MPU_Wirte_Register+0x4c>)
 8002076:	f000 fec1 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020000 	.word	0x40020000
 8002088:	200005f8 	.word	0x200005f8

0800208c <MPU_Read_Register>:
void MPU_Read_Register(uint8_t reg, uint8_t *buffer, uint8_t len) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	4613      	mov	r3, r2
 800209a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf = reg | 0x80;  // Set the read bit
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	73fb      	strb	r3, [r7, #15]
    MPU6500_CS_LOW();
 80020a6:	2200      	movs	r2, #0
 80020a8:	2110      	movs	r1, #16
 80020aa:	480e      	ldr	r0, [pc, #56]	@ (80020e4 <MPU_Read_Register+0x58>)
 80020ac:	f000 fea6 	bl	8002dfc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 80020b0:	f107 010f 	add.w	r1, r7, #15
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	2201      	movs	r2, #1
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <MPU_Read_Register+0x5c>)
 80020bc:	f003 ffbd 	bl	800603a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, len, HAL_MAX_DELAY);
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <MPU_Read_Register+0x5c>)
 80020cc:	f004 f8f9 	bl	80062c2 <HAL_SPI_Receive>
    MPU6500_CS_HIGH();
 80020d0:	2201      	movs	r2, #1
 80020d2:	2110      	movs	r1, #16
 80020d4:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MPU_Read_Register+0x58>)
 80020d6:	f000 fe91 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020000 	.word	0x40020000
 80020e8:	200005f8 	.word	0x200005f8

080020ec <MPU6500_Read>:


// Read raw accelerometer and gyroscope data
void MPU6500_Read(int16_t gyroADC[3], int16_t accelADC[3]) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]

    uint8_t buffer[6];

    // Read gyroscope data
    MPU_Read_Register(0x43, buffer, 6);
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	2206      	movs	r2, #6
 80020fc:	4619      	mov	r1, r3
 80020fe:	2043      	movs	r0, #67	@ 0x43
 8002100:	f7ff ffc4 	bl	800208c <MPU_Read_Register>
	gyroADC[1] = (buffer[0] << 8) | buffer[1];
 8002104:	7a3b      	ldrb	r3, [r7, #8]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b219      	sxth	r1, r3
 800210a:	7a7b      	ldrb	r3, [r7, #9]
 800210c:	b21a      	sxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	430a      	orrs	r2, r1
 8002114:	b212      	sxth	r2, r2
 8002116:	801a      	strh	r2, [r3, #0]
	gyroADC[0] = (buffer[2] << 8) | buffer[3];
 8002118:	7abb      	ldrb	r3, [r7, #10]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	b21a      	sxth	r2, r3
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21a      	sxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	801a      	strh	r2, [r3, #0]
	gyroADC[2] = -((buffer[4] << 8) | buffer[5]);
 800212a:	7b3b      	ldrb	r3, [r7, #12]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	7b7b      	ldrb	r3, [r7, #13]
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	425b      	negs	r3, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	b212      	sxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]

    // Read accelerometer data
    MPU_Read_Register(0x3B, buffer, 6);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	2206      	movs	r2, #6
 800214c:	4619      	mov	r1, r3
 800214e:	203b      	movs	r0, #59	@ 0x3b
 8002150:	f7ff ff9c 	bl	800208c <MPU_Read_Register>

    accelADC[1] = -((buffer[0] << 8) | buffer[1]);
 8002154:	7a3b      	ldrb	r3, [r7, #8]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	7a7b      	ldrb	r3, [r7, #9]
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	425b      	negs	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3302      	adds	r3, #2
 800216c:	b212      	sxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
    accelADC[0] = -((buffer[2] << 8) | buffer[3]);
 8002170:	7abb      	ldrb	r3, [r7, #10]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	b29b      	uxth	r3, r3
 8002180:	425b      	negs	r3, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	b21a      	sxth	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	801a      	strh	r2, [r3, #0]
    accelADC[2] = ((buffer[4] << 8) | buffer[5]);
 800218a:	7b3b      	ldrb	r3, [r7, #12]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b219      	sxth	r1, r3
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	b21a      	sxth	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	3304      	adds	r3, #4
 8002198:	430a      	orrs	r2, r1
 800219a:	b212      	sxth	r2, r2
 800219c:	801a      	strh	r2, [r3, #0]

//    accelADC[0] = (buffer[0] << 8) | buffer[1];
//    accelADC[1] = (buffer[2] << 8) | buffer[3];
//    accelADC[2] = -((buffer[4] << 8) | buffer[5]);
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <MPU6500_Init>:
// MPU-6500 Initialization
void MPU6500_Init(void) {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
    // Wake up the MPU-6500
    MPU_Wirte_Register(0x6B, 0x00);
 80021aa:	2100      	movs	r1, #0
 80021ac:	206b      	movs	r0, #107	@ 0x6b
 80021ae:	f7ff ff43 	bl	8002038 <MPU_Wirte_Register>

    // Set accelerometer range to ±8g
    MPU_Wirte_Register(0x1C, 0x10);
 80021b2:	2110      	movs	r1, #16
 80021b4:	201c      	movs	r0, #28
 80021b6:	f7ff ff3f 	bl	8002038 <MPU_Wirte_Register>

    // Set gyroscope range to ±1000 degrees/second
    MPU_Wirte_Register(0x1B, 0x10);
 80021ba:	2110      	movs	r1, #16
 80021bc:	201b      	movs	r0, #27
 80021be:	f7ff ff3b 	bl	8002038 <MPU_Wirte_Register>

    // Set gyroscope DLPF to 41 Hz
    MPU_Wirte_Register(0x1A, 0x03);
 80021c2:	2103      	movs	r1, #3
 80021c4:	201a      	movs	r0, #26
 80021c6:	f7ff ff37 	bl	8002038 <MPU_Wirte_Register>

    // Set accelerometer DLPF to 41 Hz
    MPU_Wirte_Register(0x1D, 0x03);
 80021ca:	2103      	movs	r1, #3
 80021cc:	201d      	movs	r0, #29
 80021ce:	f7ff ff33 	bl	8002038 <MPU_Wirte_Register>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <MPU6500_Read_Scaled>:

void MPU6500_Read_Scaled(double accel[3], double gyro[3], double meanAccel[3], double meanGyro[3]) {
 80021d8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80021dc:	b087      	sub	sp, #28
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	603b      	str	r3, [r7, #0]
	static int16_t gyroADC[3];
	static int16_t accelADC[3];
    MPU6500_Read(gyroADC, accelADC);
 80021e8:	493b      	ldr	r1, [pc, #236]	@ (80022d8 <MPU6500_Read_Scaled+0x100>)
 80021ea:	483c      	ldr	r0, [pc, #240]	@ (80022dc <MPU6500_Read_Scaled+0x104>)
 80021ec:	f7ff ff7e 	bl	80020ec <MPU6500_Read>
    for (int i=0; i<3; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e058      	b.n	80022a8 <MPU6500_Read_Scaled+0xd0>
        // Convert accelerometer raw values to g
        accel[i] = (double)accelADC[i] / ACCEL_SENSITIVITY * 9.81 - meanAccel[i];
 80021f6:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <MPU6500_Read_Scaled+0x100>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f934 	bl	800046c <__aeabi_i2d>
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <MPU6500_Read_Scaled+0x108>)
 800220a:	f7fe fac3 	bl	8000794 <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	a32a      	add	r3, pc, #168	@ (adr r3, 80022c0 <MPU6500_Read_Scaled+0xe8>)
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	f7fe f990 	bl	8000540 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4690      	mov	r8, r2
 8002226:	4699      	mov	r9, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	6979      	ldr	r1, [r7, #20]
 8002236:	00c9      	lsls	r1, r1, #3
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	1844      	adds	r4, r0, r1
 800223c:	4640      	mov	r0, r8
 800223e:	4649      	mov	r1, r9
 8002240:	f7fd ffc6 	bl	80001d0 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	e9c4 2300 	strd	r2, r3, [r4]
    	gyro[i] = (double)gyroADC[i] / GYRO_SENSITIVITY * (M_PI / 180.0) - meanGyro[i];
 800224c:	4a23      	ldr	r2, [pc, #140]	@ (80022dc <MPU6500_Read_Scaled+0x104>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f909 	bl	800046c <__aeabi_i2d>
 800225a:	a31b      	add	r3, pc, #108	@ (adr r3, 80022c8 <MPU6500_Read_Scaled+0xf0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe fa98 	bl	8000794 <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	a318      	add	r3, pc, #96	@ (adr r3, 80022d0 <MPU6500_Read_Scaled+0xf8>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f965 	bl	8000540 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	00c9      	lsls	r1, r1, #3
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	1844      	adds	r4, r0, r1
 8002292:	4640      	mov	r0, r8
 8002294:	4649      	mov	r1, r9
 8002296:	f7fd ff9b 	bl	80001d0 <__aeabi_dsub>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i=0; i<3; i++){
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dda3      	ble.n	80021f6 <MPU6500_Read_Scaled+0x1e>
    }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	51eb851f 	.word	0x51eb851f
 80022c4:	40239eb8 	.word	0x40239eb8
 80022c8:	66666666 	.word	0x66666666
 80022cc:	40406666 	.word	0x40406666
 80022d0:	a2529d39 	.word	0xa2529d39
 80022d4:	3f91df46 	.word	0x3f91df46
 80022d8:	200005f0 	.word	0x200005f0
 80022dc:	200005e8 	.word	0x200005e8
 80022e0:	40b00000 	.word	0x40b00000

080022e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022e8:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <MX_SPI1_Init+0x64>)
 80022ea:	4a18      	ldr	r2, [pc, #96]	@ (800234c <MX_SPI1_Init+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ee:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <MX_SPI1_Init+0x64>)
 80022f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <MX_SPI1_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <MX_SPI1_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <MX_SPI1_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002314:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002318:	2200      	movs	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800231c:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <MX_SPI1_Init+0x64>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <MX_SPI1_Init+0x64>)
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002330:	220a      	movs	r2, #10
 8002332:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	@ (8002348 <MX_SPI1_Init+0x64>)
 8002336:	f003 fdf7 	bl	8005f28 <HAL_SPI_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002340:	f7ff fe74 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200005f8 	.word	0x200005f8
 800234c:	40013000 	.word	0x40013000

08002350 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <HAL_SPI_MspInit+0x84>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 800237c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_SPI_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023aa:	23e0      	movs	r3, #224	@ 0xe0
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ba:	2305      	movs	r3, #5
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	@ (80023dc <HAL_SPI_MspInit+0x8c>)
 80023c6:	f000 fb7d 	bl	8002ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40013000 	.word	0x40013000
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000

080023e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_MspInit+0x4c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a0f      	ldr	r2, [pc, #60]	@ (800242c <HAL_MspInit+0x4c>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b0d      	ldr	r3, [pc, #52]	@ (800242c <HAL_MspInit+0x4c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_MspInit+0x4c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <HAL_MspInit+0x4c>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_MspInit+0x4c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <NMI_Handler+0x4>

08002438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <HardFault_Handler+0x4>

08002440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <MemManage_Handler+0x4>

08002448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <UsageFault_Handler+0x4>

08002458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002486:	f000 f997 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f004 fbd9 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000650 	.word	0x20000650

080024a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <TIM3_IRQHandler+0x10>)
 80024aa:	f004 fbcf 	bl	8006c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000698 	.word	0x20000698

080024b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <I2C1_EV_IRQHandler+0x10>)
 80024be:	f001 f93d 	bl	800373c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200000ec 	.word	0x200000ec

080024cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <I2C2_EV_IRQHandler+0x10>)
 80024d2:	f001 f933 	bl	800373c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000140 	.word	0x20000140

080024e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <SystemInit+0x20>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <SystemInit+0x20>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	463b      	mov	r3, r7
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <MX_TIM2_Init+0x94>)
 800252a:	2253      	movs	r2, #83	@ 0x53
 800252c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002534:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002536:	f242 720f 	movw	r2, #9999	@ 0x270f
 800253a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <MX_TIM2_Init+0x94>)
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002548:	4813      	ldr	r0, [pc, #76]	@ (8002598 <MX_TIM2_Init+0x94>)
 800254a:	f004 fabf 	bl	8006acc <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002554:	f7ff fd6a 	bl	800202c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800255c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4619      	mov	r1, r3
 8002564:	480c      	ldr	r0, [pc, #48]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002566:	f004 fc61 	bl	8006e2c <HAL_TIM_ConfigClockSource>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002570:	f7ff fd5c 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_TIM2_Init+0x94>)
 8002582:	f004 fe83 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800258c:	f7ff fd4e 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000650 	.word	0x20000650

0800259c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002634 <MX_TIM3_Init+0x98>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025c0:	2253      	movs	r2, #83	@ 0x53
 80025c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025cc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80025d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025de:	4814      	ldr	r0, [pc, #80]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025e0:	f004 fa74 	bl	8006acc <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025ea:	f7ff fd1f 	bl	800202c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	480d      	ldr	r0, [pc, #52]	@ (8002630 <MX_TIM3_Init+0x94>)
 80025fc:	f004 fc16 	bl	8006e2c <HAL_TIM_ConfigClockSource>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002606:	f7ff fd11 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002612:	463b      	mov	r3, r7
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	@ (8002630 <MX_TIM3_Init+0x94>)
 8002618:	f004 fe38 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002622:	f7ff fd03 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000698 	.word	0x20000698
 8002634:	40000400 	.word	0x40000400

08002638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002648:	d116      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201c      	movs	r0, #28
 800266c:	f000 f9c3 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002670:	201c      	movs	r0, #28
 8002672:	f000 f9dc 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002676:	e01a      	b.n	80026ae <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0f      	ldr	r2, [pc, #60]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d115      	bne.n	80026ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201d      	movs	r0, #29
 80026a4:	f000 f9a7 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a8:	201d      	movs	r0, #29
 80026aa:	f000 f9c0 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40000400 	.word	0x40000400

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026c4:	f7ff ff0c 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	@ (8002700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	@ (800270c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f009 fe57 	bl	800c3a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7ff fbf7 	bl	8001ee4 <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002704:	0800dee0 	.word	0x0800dee0
  ldr r2, =_sbss
 8002708:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800270c:	2000081c 	.word	0x2000081c

08002710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f94f 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	200f      	movs	r0, #15
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fe4a 	bl	80023e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f967 	bl	8002a4a <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f000 f92f 	bl	80029f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000020 	.word	0x20000020
 80027b0:	20000028 	.word	0x20000028
 80027b4:	20000024 	.word	0x20000024

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000028 	.word	0x20000028
 80027dc:	200006e0 	.word	0x200006e0

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200006e0 	.word	0x200006e0

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff ffee 	bl	80027e0 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffde 	bl	80027e0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000028 	.word	0x20000028

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	@ (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	@ (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	@ (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029ac:	d301      	bcc.n	80029b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00f      	b.n	80029d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <SysTick_Config+0x40>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ba:	210f      	movs	r1, #15
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f7ff ff8e 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <SysTick_Config+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <SysTick_Config+0x40>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff29 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff3e 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff8e 	bl	8002934 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5d 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff31 	bl	80028a4 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffa2 	bl	800299c <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e00c      	b.n	8002a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2205      	movs	r2, #5
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e16b      	b.n	8002db8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f040 815a 	bne.w	8002db2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d005      	beq.n	8002b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d130      	bne.n	8002b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d017      	beq.n	8002bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80b4 	beq.w	8002db2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	4a5f      	ldr	r2, [pc, #380]	@ (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c66:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd4 <HAL_GPIO_Init+0x310>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_GPIO_Init+0x314>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02b      	beq.n	8002cea <HAL_GPIO_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a51      	ldr	r2, [pc, #324]	@ (8002ddc <HAL_GPIO_Init+0x318>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x222>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	@ (8002de0 <HAL_GPIO_Init+0x31c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x21e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <HAL_GPIO_Init+0x320>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	@ (8002de8 <HAL_GPIO_Init+0x324>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002dec <HAL_GPIO_Init+0x328>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002df0 <HAL_GPIO_Init+0x32c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002df4 <HAL_GPIO_Init+0x330>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x20a>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00e      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cce:	2308      	movs	r3, #8
 8002cd0:	e00c      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e00a      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4935      	ldr	r1, [pc, #212]	@ (8002dd4 <HAL_GPIO_Init+0x310>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a32      	ldr	r2, [pc, #200]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a27      	ldr	r2, [pc, #156]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5e:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d82:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dac:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f ae90 	bls.w	8002ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	@ 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40021c00 	.word	0x40021c00
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e12b      	b.n	800309a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe fdec 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e94:	f003 f834 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8002e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a81      	ldr	r2, [pc, #516]	@ (80030a4 <HAL_I2C_Init+0x274>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d807      	bhi.n	8002eb4 <HAL_I2C_Init+0x84>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a80      	ldr	r2, [pc, #512]	@ (80030a8 <HAL_I2C_Init+0x278>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e006      	b.n	8002ec2 <HAL_I2C_Init+0x92>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80030ac <HAL_I2C_Init+0x27c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0e7      	b.n	800309a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a78      	ldr	r2, [pc, #480]	@ (80030b0 <HAL_I2C_Init+0x280>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80030a4 <HAL_I2C_Init+0x274>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <HAL_I2C_Init+0xd4>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e009      	b.n	8002f18 <HAL_I2C_Init+0xe8>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a69      	ldr	r2, [pc, #420]	@ (80030b4 <HAL_I2C_Init+0x284>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	495c      	ldr	r1, [pc, #368]	@ (80030a4 <HAL_I2C_Init+0x274>)
 8002f34:	428b      	cmp	r3, r1
 8002f36:	d819      	bhi.n	8002f6c <HAL_I2C_Init+0x13c>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e59      	subs	r1, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_I2C_Init+0x138>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e59      	subs	r1, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	e051      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e04f      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <HAL_I2C_Init+0x168>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e012      	b.n	8002fbe <HAL_I2C_Init+0x18e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x196>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <HAL_I2C_Init+0x1bc>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e58      	subs	r0, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	440b      	add	r3, r1
 8002fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	6809      	ldr	r1, [r1, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800303a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6911      	ldr	r1, [r2, #16]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68d2      	ldr	r2, [r2, #12]
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	000186a0 	.word	0x000186a0
 80030a8:	001e847f 	.word	0x001e847f
 80030ac:	003d08ff 	.word	0x003d08ff
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ca:	2b80      	cmp	r3, #128	@ 0x80
 80030cc:	d103      	bne.n	80030d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7ff fb6f 	bl	80027e0 <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80d9 	bne.w	80032c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2319      	movs	r3, #25
 8003118:	2201      	movs	r2, #1
 800311a:	496d      	ldr	r1, [pc, #436]	@ (80032d0 <HAL_I2C_Mem_Write+0x1ec>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f001 fffb 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	e0cc      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_I2C_Mem_Write+0x56>
 8003136:	2302      	movs	r3, #2
 8003138:	e0c5      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d007      	beq.n	8003160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	@ 0x21
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_I2C_Mem_Write+0x1f0>)
 80031a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a2:	88f8      	ldrh	r0, [r7, #6]
 80031a4:	893a      	ldrh	r2, [r7, #8]
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4603      	mov	r3, r0
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f001 fd8a 	bl	8004ccc <I2C_RequestMemoryWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d052      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e081      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f002 f8c0 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06b      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d11b      	bne.n	8003264 <HAL_I2C_Mem_Write+0x180>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1aa      	bne.n	80031c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f002 f8b3 	bl	80053dc <I2C_WaitOnBTFFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e016      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	00100002 	.word	0x00100002
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	@ 0x30
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f2:	f7ff fa75 	bl	80027e0 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 8214 	bne.w	800372e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2319      	movs	r3, #25
 800330c:	2201      	movs	r2, #1
 800330e:	497b      	ldr	r1, [pc, #492]	@ (80034fc <HAL_I2C_Mem_Read+0x224>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f001 ff01 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	e207      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2C_Mem_Read+0x56>
 800332a:	2302      	movs	r3, #2
 800332c:	e200      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2222      	movs	r2, #34	@ 0x22
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a5b      	ldr	r2, [pc, #364]	@ (8003500 <HAL_I2C_Mem_Read+0x228>)
 8003394:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003396:	88f8      	ldrh	r0, [r7, #6]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4603      	mov	r3, r0
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 fd26 	bl	8004df8 <I2C_RequestMemoryRead>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1bc      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d113      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e190      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11b      	bne.n	8003426 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e170      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	2b02      	cmp	r3, #2
 800342c:	d11b      	bne.n	8003466 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800343c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	e150      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800347c:	e144      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	2b03      	cmp	r3, #3
 8003484:	f200 80f1 	bhi.w	800366a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	2b01      	cmp	r3, #1
 800348e:	d123      	bne.n	80034d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f002 f81b 	bl	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e145      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034d6:	e117      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d14e      	bne.n	800357e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	2200      	movs	r2, #0
 80034e8:	4906      	ldr	r1, [pc, #24]	@ (8003504 <HAL_I2C_Mem_Read+0x22c>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f001 fe14 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e11a      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
 80034fa:	bf00      	nop
 80034fc:	00100002 	.word	0x00100002
 8003500:	ffff0000 	.word	0xffff0000
 8003504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800357c:	e0c4      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	2200      	movs	r2, #0
 8003586:	496c      	ldr	r1, [pc, #432]	@ (8003738 <HAL_I2C_Mem_Read+0x460>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f001 fdc5 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cb      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e0:	2200      	movs	r2, #0
 80035e2:	4955      	ldr	r1, [pc, #340]	@ (8003738 <HAL_I2C_Mem_Read+0x460>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f001 fd97 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e09d      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003668:	e04e      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f001 ff2e 	bl	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e058      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d124      	bne.n	8003708 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f aeb6 	bne.w	800347e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	00010004 	.word	0x00010004

0800373c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800375c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d003      	beq.n	8003774 <HAL_I2C_EV_IRQHandler+0x38>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	f040 80b1 	bne.w	80038d6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x6e>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003794:	d003      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x62>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_EV_IRQHandler+0x66>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x68>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f000 8114 	beq.w	80039d2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x90>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 ff12 	bl	80055e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fcd7 	bl	8004178 <I2C_Master_SB>
 80037ca:	e083      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_I2C_EV_IRQHandler+0xac>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fd4f 	bl	8004284 <I2C_Master_ADD10>
 80037e6:	e075      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_I2C_EV_IRQHandler+0xc8>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fd6b 	bl	80042d8 <I2C_Master_ADDR>
 8003802:	e067      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d036      	beq.n	800387c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381c:	f000 80db 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0x10a>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0x10a>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f937 	bl	8003ab2 <I2C_MasterTransmit_TXE>
 8003844:	e046      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80c2 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80bc 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	2b21      	cmp	r3, #33	@ 0x21
 8003862:	d103      	bne.n	800386c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f9c0 	bl	8003bea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386a:	e0b4      	b.n	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	f040 80b1 	bne.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fa2e 	bl	8003cd6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387a:	e0ac      	b.n	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388a:	f000 80a4 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <HAL_I2C_EV_IRQHandler+0x178>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_I2C_EV_IRQHandler+0x178>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 faaa 	bl	8003e06 <I2C_MasterReceive_RXNE>
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 808b 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8085 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fb62 	bl	8003f96 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d2:	e080      	b.n	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038d4:	e07f      	b.n	80039d6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e007      	b.n	80038f8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 ff29 	bl	8004776 <I2C_Slave_ADDR>
 8003924:	e05a      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x206>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 ff64 	bl	8004808 <I2C_Slave_STOPF>
 8003940:	e04c      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b21      	cmp	r3, #33	@ 0x21
 8003946:	d002      	beq.n	800394e <HAL_I2C_EV_IRQHandler+0x212>
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b29      	cmp	r3, #41	@ 0x29
 800394c:	d120      	bne.n	8003990 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x238>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x238>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fe44 	bl	80045fa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003972:	e032      	b.n	80039da <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d02d      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x29e>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d028      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fe73 	bl	8004674 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800398e:	e024      	b.n	80039da <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x27a>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x27a>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fe81 	bl	80046b6 <I2C_SlaveReceive_RXNE>
 80039b4:	e012      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 feb1 	bl	8004732 <I2C_SlaveReceive_BTF>
 80039d0:	e004      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d150      	bne.n	8003b7a <I2C_MasterTransmit_TXE+0xc8>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b21      	cmp	r3, #33	@ 0x21
 8003adc:	d14d      	bne.n	8003b7a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d01d      	beq.n	8003b20 <I2C_MasterTransmit_TXE+0x6e>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d01a      	beq.n	8003b20 <I2C_MasterTransmit_TXE+0x6e>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003af0:	d016      	beq.n	8003b20 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b00:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2211      	movs	r2, #17
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff62 	bl	80039e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b1e:	e060      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b2e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d107      	bne.n	8003b6a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ff7d 	bl	8003a62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b68:	e03b      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff35 	bl	80039e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b78:	e033      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b21      	cmp	r3, #33	@ 0x21
 8003b7e:	d005      	beq.n	8003b8c <I2C_MasterTransmit_TXE+0xda>
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b40      	cmp	r3, #64	@ 0x40
 8003b84:	d12d      	bne.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b22      	cmp	r3, #34	@ 0x22
 8003b8a:	d12a      	bne.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ba6:	e01c      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b40      	cmp	r3, #64	@ 0x40
 8003bb2:	d103      	bne.n	8003bbc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f88e 	bl	8003cd6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003bba:	e012      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003be0:	e7ff      	b.n	8003be2 <I2C_MasterTransmit_TXE+0x130>
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b21      	cmp	r3, #33	@ 0x21
 8003c02:	d164      	bne.n	8003cce <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c32:	e04c      	b.n	8003cce <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d01d      	beq.n	8003c76 <I2C_MasterTransmit_BTF+0x8c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d01a      	beq.n	8003c76 <I2C_MasterTransmit_BTF+0x8c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c46:	d016      	beq.n	8003c76 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c56:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2211      	movs	r2, #17
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff feb7 	bl	80039e2 <HAL_I2C_MasterTxCpltCallback>
}
 8003c74:	e02b      	b.n	8003cce <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c84:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c94:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d107      	bne.n	8003cc0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fed2 	bl	8003a62 <HAL_I2C_MemTxCpltCallback>
}
 8003cbe:	e006      	b.n	8003cce <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fe8a 	bl	80039e2 <HAL_I2C_MasterTxCpltCallback>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10b      	bne.n	8003d0e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d0c:	e077      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	121b      	asrs	r3, r3, #8
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d28:	e069      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10b      	bne.n	8003d4a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d48:	e059      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d152      	bne.n	8003df8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b22      	cmp	r3, #34	@ 0x22
 8003d56:	d10d      	bne.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d66:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d72:	e044      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b21      	cmp	r3, #33	@ 0x21
 8003d82:	d112      	bne.n	8003daa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003da8:	e029      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d124      	bne.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b21      	cmp	r3, #33	@ 0x21
 8003db8:	d121      	bne.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fe36 	bl	8003a62 <HAL_I2C_MemTxCpltCallback>
}
 8003df6:	e002      	b.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff f95d 	bl	80030b8 <I2C_Flush_DR>
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b22      	cmp	r3, #34	@ 0x22
 8003e18:	f040 80b9 	bne.w	8003f8e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d921      	bls.n	8003e74 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	f040 8096 	bne.w	8003f8e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e72:	e08c      	b.n	8003f8e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d07f      	beq.n	8003f7c <I2C_MasterReceive_RXNE+0x176>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d002      	beq.n	8003e88 <I2C_MasterReceive_RXNE+0x82>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d179      	bne.n	8003f7c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f001 faef 	bl	800546c <I2C_WaitOnSTOPRequestThroughIT>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d14c      	bne.n	8003f2e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d10a      	bne.n	8003f04 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fdba 	bl	8003a76 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f02:	e044      	b.n	8003f8e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d002      	beq.n	8003f18 <I2C_MasterReceive_RXNE+0x112>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d103      	bne.n	8003f20 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f1e:	e002      	b.n	8003f26 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2212      	movs	r2, #18
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fd65 	bl	80039f6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f2c:	e02f      	b.n	8003f8e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fd88 	bl	8003a8a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f7a:	e008      	b.n	8003f8e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	e7ff      	b.n	8003f8e <I2C_MasterReceive_RXNE+0x188>
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d11b      	bne.n	8003fe6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fe4:	e0c4      	b.n	8004170 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d129      	bne.n	8004044 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d00a      	beq.n	800401c <I2C_MasterReceive_BTF+0x86>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d007      	beq.n	800401c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004042:	e095      	b.n	8004170 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d17d      	bne.n	800414a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <I2C_MasterReceive_BTF+0xc4>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b10      	cmp	r3, #16
 8004058:	d108      	bne.n	800406c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e016      	b.n	800409a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b04      	cmp	r3, #4
 8004070:	d002      	beq.n	8004078 <I2C_MasterReceive_BTF+0xe2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d108      	bne.n	800408a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e007      	b.n	800409a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d10a      	bne.n	8004120 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fcac 	bl	8003a76 <HAL_I2C_MemRxCpltCallback>
}
 800411e:	e027      	b.n	8004170 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d002      	beq.n	8004134 <I2C_MasterReceive_BTF+0x19e>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b20      	cmp	r3, #32
 8004132:	d103      	bne.n	800413c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30
 800413a:	e002      	b.n	8004142 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2212      	movs	r2, #18
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fc57 	bl	80039f6 <HAL_I2C_MasterRxCpltCallback>
}
 8004148:	e012      	b.n	8004170 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d117      	bne.n	80041bc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041a4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041a6:	e067      	b.n	8004278 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
}
 80041ba:	e05d      	b.n	8004278 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c4:	d133      	bne.n	800422e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b21      	cmp	r3, #33	@ 0x21
 80041d0:	d109      	bne.n	80041e6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041e2:	611a      	str	r2, [r3, #16]
 80041e4:	e008      	b.n	80041f8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <I2C_Master_SB+0x92>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d032      	beq.n	8004278 <I2C_Master_SB+0x100>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02d      	beq.n	8004278 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422a:	605a      	str	r2, [r3, #4]
}
 800422c:	e024      	b.n	8004278 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10e      	bne.n	8004254 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	b29b      	uxth	r3, r3
 800423c:	11db      	asrs	r3, r3, #7
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 0306 	and.w	r3, r3, #6
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f063 030f 	orn	r3, r3, #15
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
}
 8004252:	e011      	b.n	8004278 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004260:	b29b      	uxth	r3, r3
 8004262:	11db      	asrs	r3, r3, #7
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f063 030e 	orn	r3, r3, #14
 8004270:	b2da      	uxtb	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	b2da      	uxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <I2C_Master_ADD10+0x26>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <I2C_Master_ADD10+0x48>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b480      	push	{r7}
 80042da:	b091      	sub	sp, #68	@ 0x44
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b22      	cmp	r3, #34	@ 0x22
 8004300:	f040 8169 	bne.w	80045d6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10f      	bne.n	800432c <I2C_Master_ADDR+0x54>
 800430c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004310:	2b40      	cmp	r3, #64	@ 0x40
 8004312:	d10b      	bne.n	800432c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004314:	2300      	movs	r3, #0
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	633b      	str	r3, [r7, #48]	@ 0x30
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	e160      	b.n	80045ee <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d11d      	bne.n	8004370 <I2C_Master_ADDR+0x98>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800433c:	d118      	bne.n	8004370 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004362:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	651a      	str	r2, [r3, #80]	@ 0x50
 800436e:	e13e      	b.n	80045ee <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d113      	bne.n	80043a2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e115      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	f040 808a 	bne.w	80044c2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b4:	d137      	bne.n	8004426 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d4:	d113      	bne.n	80043fe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	e0e7      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e0d3      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	2b08      	cmp	r3, #8
 800442a:	d02e      	beq.n	800448a <I2C_Master_ADDR+0x1b2>
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	2b20      	cmp	r3, #32
 8004430:	d02b      	beq.n	800448a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	2b12      	cmp	r3, #18
 8004436:	d102      	bne.n	800443e <I2C_Master_ADDR+0x166>
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	2b01      	cmp	r3, #1
 800443c:	d125      	bne.n	800448a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	2b04      	cmp	r3, #4
 8004442:	d00e      	beq.n	8004462 <I2C_Master_ADDR+0x18a>
 8004444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004446:	2b02      	cmp	r3, #2
 8004448:	d00b      	beq.n	8004462 <I2C_Master_ADDR+0x18a>
 800444a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444c:	2b10      	cmp	r3, #16
 800444e:	d008      	beq.n	8004462 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e007      	b.n	8004472 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004470:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	e0a1      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004498:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e085      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d14d      	bne.n	8004568 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d016      	beq.n	8004500 <I2C_Master_ADDR+0x228>
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d013      	beq.n	8004500 <I2C_Master_ADDR+0x228>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d010      	beq.n	8004500 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e007      	b.n	8004510 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800450e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451e:	d117      	bne.n	8004550 <I2C_Master_ADDR+0x278>
 8004520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004526:	d00b      	beq.n	8004540 <I2C_Master_ADDR+0x268>
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	2b01      	cmp	r3, #1
 800452c:	d008      	beq.n	8004540 <I2C_Master_ADDR+0x268>
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	2b08      	cmp	r3, #8
 8004532:	d005      	beq.n	8004540 <I2C_Master_ADDR+0x268>
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	2b10      	cmp	r3, #16
 8004538:	d002      	beq.n	8004540 <I2C_Master_ADDR+0x268>
 800453a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453c:	2b20      	cmp	r3, #32
 800453e:	d107      	bne.n	8004550 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800454e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	e032      	b.n	80045ce <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004576:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004586:	d117      	bne.n	80045b8 <I2C_Master_ADDR+0x2e0>
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800458e:	d00b      	beq.n	80045a8 <I2C_Master_ADDR+0x2d0>
 8004590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004592:	2b01      	cmp	r3, #1
 8004594:	d008      	beq.n	80045a8 <I2C_Master_ADDR+0x2d0>
 8004596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004598:	2b08      	cmp	r3, #8
 800459a:	d005      	beq.n	80045a8 <I2C_Master_ADDR+0x2d0>
 800459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d002      	beq.n	80045a8 <I2C_Master_ADDR+0x2d0>
 80045a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d107      	bne.n	80045b8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045d4:	e00b      	b.n	80045ee <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	e7ff      	b.n	80045ee <I2C_Master_ADDR+0x316>
 80045ee:	bf00      	nop
 80045f0:	3744      	adds	r7, #68	@ 0x44
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004608:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02b      	beq.n	800466c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d114      	bne.n	800466c <I2C_SlaveTransmit_TXE+0x72>
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b29      	cmp	r3, #41	@ 0x29
 8004646:	d111      	bne.n	800466c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004656:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2221      	movs	r2, #33	@ 0x21
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2228      	movs	r2, #40	@ 0x28
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff f9cf 	bl	8003a0a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d011      	beq.n	80046aa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02c      	beq.n	800472a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d114      	bne.n	800472a <I2C_SlaveReceive_RXNE+0x74>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b2a      	cmp	r3, #42	@ 0x2a
 8004704:	d111      	bne.n	800472a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004714:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2222      	movs	r2, #34	@ 0x22
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2228      	movs	r2, #40	@ 0x28
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff f97a 	bl	8003a1e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d012      	beq.n	800476a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004790:	2b28      	cmp	r3, #40	@ 0x28
 8004792:	d125      	bne.n	80047e0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	81bb      	strh	r3, [r7, #12]
 80047c2:	e002      	b.n	80047ca <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047d2:	89ba      	ldrh	r2, [r7, #12]
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff f92a 	bl	8003a32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047de:	e00e      	b.n	80047fe <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004826:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004854:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004864:	d172      	bne.n	800494c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b22      	cmp	r3, #34	@ 0x22
 800486a:	d002      	beq.n	8004872 <I2C_Slave_STOPF+0x6a>
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004870:	d135      	bne.n	80048de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe f8fb 	bl	8002aa6 <HAL_DMA_GetState>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d049      	beq.n	800494a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	4a69      	ldr	r2, [pc, #420]	@ (8004a60 <I2C_Slave_STOPF+0x258>)
 80048bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe f8cd 	bl	8002a62 <HAL_DMA_Abort_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d03d      	beq.n	800494a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048d8:	4610      	mov	r0, r2
 80048da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048dc:	e035      	b.n	800494a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004910:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f8c5 	bl	8002aa6 <HAL_DMA_GetState>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d014      	beq.n	800494c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	4a4e      	ldr	r2, [pc, #312]	@ (8004a60 <I2C_Slave_STOPF+0x258>)
 8004928:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe f897 	bl	8002a62 <HAL_DMA_Abort_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004944:	4610      	mov	r0, r2
 8004946:	4798      	blx	r3
 8004948:	e000      	b.n	800494c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800494a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d03e      	beq.n	80049d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d112      	bne.n	800498a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d112      	bne.n	80049be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f843 	bl	8004a68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049e2:	e039      	b.n	8004a58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e8:	d109      	bne.n	80049fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2228      	movs	r2, #40	@ 0x28
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff f810 	bl	8003a1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b28      	cmp	r3, #40	@ 0x28
 8004a08:	d111      	bne.n	8004a2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <I2C_Slave_STOPF+0x25c>)
 8004a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff f811 	bl	8003a4e <HAL_I2C_ListenCpltCallback>
}
 8004a2c:	e014      	b.n	8004a58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	2b22      	cmp	r3, #34	@ 0x22
 8004a34:	d002      	beq.n	8004a3c <I2C_Slave_STOPF+0x234>
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b22      	cmp	r3, #34	@ 0x22
 8004a3a:	d10d      	bne.n	8004a58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fe ffe3 	bl	8003a1e <HAL_I2C_SlaveRxCpltCallback>
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	08004fc9 	.word	0x08004fc9
 8004a64:	ffff0000 	.word	0xffff0000

08004a68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a80:	7bbb      	ldrb	r3, [r7, #14]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d002      	beq.n	8004a8c <I2C_ITError+0x24>
 8004a86:	7bbb      	ldrb	r3, [r7, #14]
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d10a      	bne.n	8004aa2 <I2C_ITError+0x3a>
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b22      	cmp	r3, #34	@ 0x22
 8004a90:	d107      	bne.n	8004aa2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004aa8:	2b28      	cmp	r3, #40	@ 0x28
 8004aaa:	d107      	bne.n	8004abc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2228      	movs	r2, #40	@ 0x28
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004aba:	e015      	b.n	8004ae8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aca:	d00a      	beq.n	8004ae2 <I2C_ITError+0x7a>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b60      	cmp	r3, #96	@ 0x60
 8004ad0:	d007      	beq.n	8004ae2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af6:	d162      	bne.n	8004bbe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d020      	beq.n	8004b58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004cc4 <I2C_ITError+0x25c>)
 8004b1c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd ff9d 	bl	8002a62 <HAL_DMA_Abort_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8089 	beq.w	8004c42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b52:	4610      	mov	r0, r2
 8004b54:	4798      	blx	r3
 8004b56:	e074      	b.n	8004c42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	4a59      	ldr	r2, [pc, #356]	@ (8004cc4 <I2C_ITError+0x25c>)
 8004b5e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fd ff7c 	bl	8002a62 <HAL_DMA_Abort_IT>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d068      	beq.n	8004c42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d10b      	bne.n	8004b96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3
 8004bbc:	e041      	b.n	8004c42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b60      	cmp	r3, #96	@ 0x60
 8004bc8:	d125      	bne.n	8004c16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be2:	2b40      	cmp	r3, #64	@ 0x40
 8004be4:	d10b      	bne.n	8004bfe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fe ff45 	bl	8003a9e <HAL_I2C_AbortCpltCallback>
 8004c14:	e015      	b.n	8004c42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d10b      	bne.n	8004c3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fe ff24 	bl	8003a8a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d113      	bne.n	8004cbc <I2C_ITError+0x254>
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b28      	cmp	r3, #40	@ 0x28
 8004c98:	d110      	bne.n	8004cbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <I2C_ITError+0x260>)
 8004c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fe fec9 	bl	8003a4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08004fc9 	.word	0x08004fc9
 8004cc8:	ffff0000 	.word	0xffff0000

08004ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	813b      	strh	r3, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa08 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1c:	d103      	bne.n	8004d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e05f      	b.n	8004dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	6a3a      	ldr	r2, [r7, #32]
 8004d3e:	492d      	ldr	r1, [pc, #180]	@ (8004df4 <I2C_RequestMemoryWrite+0x128>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fa63 	bl	800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04c      	b.n	8004dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 faee 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d107      	bne.n	8004d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e02b      	b.n	8004dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d98:	893b      	ldrh	r3, [r7, #8]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	e021      	b.n	8004de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004da4:	893b      	ldrh	r3, [r7, #8]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fac8 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d107      	bne.n	8004dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e005      	b.n	8004dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dde:	893b      	ldrh	r3, [r7, #8]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	00010002 	.word	0x00010002

08004df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	817b      	strh	r3, [r7, #10]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	813b      	strh	r3, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f96a 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e58:	d103      	bne.n	8004e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e0aa      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e66:	897b      	ldrh	r3, [r7, #10]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	4952      	ldr	r1, [pc, #328]	@ (8004fc4 <I2C_RequestMemoryRead+0x1cc>)
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f9c5 	bl	800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e097      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea4:	6a39      	ldr	r1, [r7, #32]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa50 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d107      	bne.n	8004eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e076      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	611a      	str	r2, [r3, #16]
 8004ede:	e021      	b.n	8004f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef0:	6a39      	ldr	r1, [r7, #32]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa2a 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d107      	bne.n	8004f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e050      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1a:	893b      	ldrh	r3, [r7, #8]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	6a39      	ldr	r1, [r7, #32]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa0f 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d107      	bne.n	8004f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e035      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f8d3 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f86:	d103      	bne.n	8004f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e013      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f94:	897b      	ldrh	r3, [r7, #10]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	4906      	ldr	r1, [pc, #24]	@ (8004fc4 <I2C_RequestMemoryRead+0x1cc>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f92e 	bl	800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	00010002 	.word	0x00010002

08004fc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8005110 <I2C_DMAAbort+0x148>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8005114 <I2C_DMAAbort+0x14c>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0a1a      	lsrs	r2, r3, #8
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	00da      	lsls	r2, r3, #3
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800500e:	e00a      	b.n	8005026 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005024:	d0ea      	beq.n	8004ffc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	2200      	movs	r2, #0
 8005034:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	2200      	movs	r2, #0
 8005044:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005054:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	2200      	movs	r2, #0
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	2200      	movs	r2, #0
 800507a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b60      	cmp	r3, #96	@ 0x60
 8005096:	d10e      	bne.n	80050b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7fe fcf5 	bl	8003a9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050b4:	e027      	b.n	8005106 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050bc:	2b28      	cmp	r3, #40	@ 0x28
 80050be:	d117      	bne.n	80050f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2228      	movs	r2, #40	@ 0x28
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050ee:	e007      	b.n	8005100 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005100:	6978      	ldr	r0, [r7, #20]
 8005102:	f7fe fcc2 	bl	8003a8a <HAL_I2C_ErrorCallback>
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000020 	.word	0x20000020
 8005114:	14f8b589 	.word	0x14f8b589

08005118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005128:	e048      	b.n	80051bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d044      	beq.n	80051bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fd fb55 	bl	80027e0 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d139      	bne.n	80051bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10d      	bne.n	800516e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	43da      	mvns	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	e00c      	b.n	8005188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	43da      	mvns	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	429a      	cmp	r2, r3
 800518c:	d116      	bne.n	80051bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e023      	b.n	8005204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10d      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	43da      	mvns	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	e00c      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	43da      	mvns	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d093      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521a:	e071      	b.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d123      	bne.n	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e067      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d041      	beq.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fd fab0 	bl	80027e0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d136      	bne.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10c      	bne.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	43da      	mvns	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf14      	ite	ne
 80052ae:	2301      	movne	r3, #1
 80052b0:	2300      	moveq	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	e00b      	b.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	43da      	mvns	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4013      	ands	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf14      	ite	ne
 80052c8:	2301      	movne	r3, #1
 80052ca:	2300      	moveq	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e021      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10c      	bne.n	8005324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e00b      	b.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	43da      	mvns	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f af6d 	bne.w	800521c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005358:	e034      	b.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f915 	bl	800558a <I2C_IsAcknowledgeFailed>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e034      	b.n	80053d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d028      	beq.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fd fa35 	bl	80027e0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11d      	bne.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b80      	cmp	r3, #128	@ 0x80
 8005394:	d016      	beq.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ce:	2b80      	cmp	r3, #128	@ 0x80
 80053d0:	d1c3      	bne.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e8:	e034      	b.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f8cd 	bl	800558a <I2C_IsAcknowledgeFailed>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e034      	b.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d028      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fd f9ed 	bl	80027e0 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11d      	bne.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d016      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e007      	b.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d1c3      	bne.n	80053ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005478:	4b13      	ldr	r3, [pc, #76]	@ (80054c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	4a13      	ldr	r2, [pc, #76]	@ (80054cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	0a1a      	lsrs	r2, r3, #8
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3b01      	subs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e008      	b.n	80054bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d0e9      	beq.n	800548e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20000020 	.word	0x20000020
 80054cc:	14f8b589 	.word	0x14f8b589

080054d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054dc:	e049      	b.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d119      	bne.n	8005520 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e030      	b.n	8005582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005520:	f7fd f95e 	bl	80027e0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11d      	bne.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b40      	cmp	r3, #64	@ 0x40
 8005542:	d016      	beq.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e007      	b.n	8005582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b40      	cmp	r3, #64	@ 0x40
 800557e:	d1ae      	bne.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d11b      	bne.n	80055da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80055f8:	d103      	bne.n	8005602 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005600:	e007      	b.n	8005612 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800560a:	d102      	bne.n	8005612 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2208      	movs	r2, #8
 8005610:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e267      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d075      	beq.n	800572a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800563e:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00c      	beq.n	8005664 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564a:	4b85      	ldr	r3, [pc, #532]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005652:	2b08      	cmp	r3, #8
 8005654:	d112      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b82      	ldr	r3, [pc, #520]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b7e      	ldr	r3, [pc, #504]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05b      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d157      	bne.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e242      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x74>
 8005686:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a75      	ldr	r2, [pc, #468]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x98>
 800569e:	4b70      	ldr	r3, [pc, #448]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6c      	ldr	r2, [pc, #432]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 80056b8:	4b69      	ldr	r3, [pc, #420]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a68      	ldr	r2, [pc, #416]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b66      	ldr	r3, [pc, #408]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd f882 	bl	80027e0 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd f87e 	bl	80027e0 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	@ 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e207      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fd f86e 	bl	80027e0 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd f86a 	bl	80027e0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	@ 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e1f3      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571a:	4b51      	ldr	r3, [pc, #324]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d063      	beq.n	80057fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b47      	ldr	r3, [pc, #284]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800574a:	2b08      	cmp	r3, #8
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b44      	ldr	r3, [pc, #272]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b41      	ldr	r3, [pc, #260]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1c7      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4937      	ldr	r1, [pc, #220]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e03a      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b34      	ldr	r3, [pc, #208]	@ (8005864 <HAL_RCC_OscConfig+0x244>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fd f823 	bl	80027e0 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800579e:	f7fd f81f 	bl	80027e0 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e1a8      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4b28      	ldr	r3, [pc, #160]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4925      	ldr	r1, [pc, #148]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	e015      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <HAL_RCC_OscConfig+0x244>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd f802 	bl	80027e0 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fc fffe 	bl	80027e0 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e187      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d036      	beq.n	8005878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCC_OscConfig+0x248>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fc ffe2 	bl	80027e0 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005820:	f7fc ffde 	bl	80027e0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e167      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005832:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x200>
 800583e:	e01b      	b.n	8005878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005840:	4b09      	ldr	r3, [pc, #36]	@ (8005868 <HAL_RCC_OscConfig+0x248>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fc ffcb 	bl	80027e0 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	e00e      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584e:	f7fc ffc7 	bl	80027e0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d907      	bls.n	800586c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e150      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	42470000 	.word	0x42470000
 8005868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	4b88      	ldr	r3, [pc, #544]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ea      	bne.n	800584e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8097 	beq.w	80059b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4b81      	ldr	r3, [pc, #516]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b77      	ldr	r3, [pc, #476]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c2:	4b74      	ldr	r3, [pc, #464]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ce:	f7fc ff87 	bl	80027e0 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fc ff83 	bl	80027e0 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e10c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x2ea>
 80058fc:	4b64      	ldr	r3, [pc, #400]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a63      	ldr	r2, [pc, #396]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	e01c      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x30c>
 8005912:	4b5f      	ldr	r3, [pc, #380]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	4a5e      	ldr	r2, [pc, #376]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	6713      	str	r3, [r2, #112]	@ 0x70
 800591e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a5b      	ldr	r2, [pc, #364]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800592c:	4b58      	ldr	r3, [pc, #352]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005930:	4a57      	ldr	r2, [pc, #348]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	@ 0x70
 8005938:	4b55      	ldr	r3, [pc, #340]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a54      	ldr	r2, [pc, #336]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fc ff48 	bl	80027e0 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fc ff44 	bl	80027e0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0cb      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596a:	4b49      	ldr	r3, [pc, #292]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ee      	beq.n	8005954 <HAL_RCC_OscConfig+0x334>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fc ff32 	bl	80027e0 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	e00a      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fc ff2e 	bl	80027e0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0b5      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005996:	4b3e      	ldr	r3, [pc, #248]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ee      	bne.n	8005980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	4a38      	ldr	r2, [pc, #224]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a1 	beq.w	8005b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059be:	4b34      	ldr	r3, [pc, #208]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d05c      	beq.n	8005a84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d141      	bne.n	8005a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fc ff02 	bl	80027e0 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fc fefe 	bl	80027e0 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e087      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	491b      	ldr	r1, [pc, #108]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fc fed7 	bl	80027e0 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fc fed3 	bl	80027e0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e05c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a48:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x416>
 8005a54:	e054      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fc fec0 	bl	80027e0 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc febc 	bl	80027e0 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e045      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x444>
 8005a82:	e03d      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e038      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b0c <HAL_RCC_OscConfig+0x4ec>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d028      	beq.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d121      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d11a      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0cc      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b24:	4b68      	ldr	r3, [pc, #416]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d90c      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b65      	ldr	r3, [pc, #404]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b63      	ldr	r3, [pc, #396]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0b8      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b64:	4b59      	ldr	r3, [pc, #356]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a58      	ldr	r2, [pc, #352]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a52      	ldr	r2, [pc, #328]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	494d      	ldr	r1, [pc, #308]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d044      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bae:	4b47      	ldr	r3, [pc, #284]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e07f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e067      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bee:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 0203 	bic.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4934      	ldr	r1, [pc, #208]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c00:	f7fc fdee 	bl	80027e0 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fc fdea 	bl	80027e0 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e04f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 020c 	and.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d1eb      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c30:	4b25      	ldr	r3, [pc, #148]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20c      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b22      	ldr	r3, [pc, #136]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e032      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c64:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4916      	ldr	r1, [pc, #88]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	490e      	ldr	r1, [pc, #56]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c96:	f000 f821 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	490a      	ldr	r1, [pc, #40]	@ (8005cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	5ccb      	ldrb	r3, [r1, r3]
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005cb2:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc fd4e 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800dd70 	.word	0x0800dd70
 8005cd4:	20000020 	.word	0x20000020
 8005cd8:	20000024 	.word	0x20000024

08005cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce0:	b094      	sub	sp, #80	@ 0x50
 8005ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf4:	4b79      	ldr	r3, [pc, #484]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d00d      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x40>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	f200 80e1 	bhi.w	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x34>
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d0e:	e0db      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b73      	ldr	r3, [pc, #460]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d14:	e0db      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d16:	4b73      	ldr	r3, [pc, #460]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d1a:	e0d8      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d26:	4b6d      	ldr	r3, [pc, #436]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d063      	beq.n	8005dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d32:	4b6a      	ldr	r3, [pc, #424]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	099b      	lsrs	r3, r3, #6
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	0159      	lsls	r1, r3, #5
 8005d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d60:	0150      	lsls	r0, r2, #5
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4621      	mov	r1, r4
 8005d68:	1a51      	subs	r1, r2, r1
 8005d6a:	6139      	str	r1, [r7, #16]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	018b      	lsls	r3, r1, #6
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	018a      	lsls	r2, r1, #6
 8005d8e:	4651      	mov	r1, sl
 8005d90:	ebb2 0801 	subs.w	r8, r2, r1
 8005d94:	4659      	mov	r1, fp
 8005d96:	eb63 0901 	sbc.w	r9, r3, r1
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dae:	4690      	mov	r8, r2
 8005db0:	4699      	mov	r9, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	eb18 0303 	adds.w	r3, r8, r3
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	462b      	mov	r3, r5
 8005dbc:	eb49 0303 	adc.w	r3, r9, r3
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	024b      	lsls	r3, r1, #9
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dd8:	4621      	mov	r1, r4
 8005dda:	024a      	lsls	r2, r1, #9
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dec:	f7fa fea8 	bl	8000b40 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df8:	e058      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfa:	4b38      	ldr	r3, [pc, #224]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	099b      	lsrs	r3, r3, #6
 8005e00:	2200      	movs	r2, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	4611      	mov	r1, r2
 8005e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	f04f 0000 	mov.w	r0, #0
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	0159      	lsls	r1, r3, #5
 8005e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e26:	0150      	lsls	r0, r2, #5
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e50:	eb63 050b 	sbc.w	r5, r3, fp
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	00eb      	lsls	r3, r5, #3
 8005e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e62:	00e2      	lsls	r2, r4, #3
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	4643      	mov	r3, r8
 8005e6a:	18e3      	adds	r3, r4, r3
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	eb45 0303 	adc.w	r3, r5, r3
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e82:	4629      	mov	r1, r5
 8005e84:	028b      	lsls	r3, r1, #10
 8005e86:	4621      	mov	r1, r4
 8005e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	028a      	lsls	r2, r1, #10
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	2200      	movs	r2, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea0:	f7fa fe4e 	bl	8000b40 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec6:	e002      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3750      	adds	r7, #80	@ 0x50
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	007a1200 	.word	0x007a1200

08005ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000020 	.word	0x20000020

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f04:	f7ff fff0 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b05      	ldr	r3, [pc, #20]	@ (8005f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	0a9b      	lsrs	r3, r3, #10
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4903      	ldr	r1, [pc, #12]	@ (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40023800 	.word	0x40023800
 8005f24:	0800dd80 	.word	0x0800dd80

08005f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07b      	b.n	8006032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f4a:	d009      	beq.n	8005f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	61da      	str	r2, [r3, #28]
 8005f52:	e005      	b.n	8005f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc f9e8 	bl	8002350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	ea42 0103 	orr.w	r1, r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0104 	and.w	r1, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0210 	and.w	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604a:	f7fc fbc9 	bl	80027e0 <HAL_GetTick>
 800604e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d001      	beq.n	8006064 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006060:	2302      	movs	r3, #2
 8006062:	e12a      	b.n	80062ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Transmit+0x36>
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e122      	b.n	80062ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_SPI_Transmit+0x48>
 800607e:	2302      	movs	r3, #2
 8006080:	e11b      	b.n	80062ba <HAL_SPI_Transmit+0x280>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2203      	movs	r2, #3
 800608e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d0:	d10f      	bne.n	80060f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d007      	beq.n	8006110 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006118:	d152      	bne.n	80061c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_SPI_Transmit+0xee>
 8006122:	8b7b      	ldrh	r3, [r7, #26]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d145      	bne.n	80061b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800614c:	e032      	b.n	80061b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b02      	cmp	r3, #2
 800615a:	d112      	bne.n	8006182 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006180:	e018      	b.n	80061b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006182:	f7fc fb2d 	bl	80027e0 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d803      	bhi.n	800619a <HAL_SPI_Transmit+0x160>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d102      	bne.n	80061a0 <HAL_SPI_Transmit+0x166>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e082      	b.n	80062ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1c7      	bne.n	800614e <HAL_SPI_Transmit+0x114>
 80061be:	e053      	b.n	8006268 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit+0x194>
 80061c8:	8b7b      	ldrh	r3, [r7, #26]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d147      	bne.n	800625e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061f4:	e033      	b.n	800625e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b02      	cmp	r3, #2
 8006202:	d113      	bne.n	800622c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	86da      	strh	r2, [r3, #54]	@ 0x36
 800622a:	e018      	b.n	800625e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800622c:	f7fc fad8 	bl	80027e0 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d803      	bhi.n	8006244 <HAL_SPI_Transmit+0x20a>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d102      	bne.n	800624a <HAL_SPI_Transmit+0x210>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e02d      	b.n	80062ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1c6      	bne.n	80061f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fbd9 	bl	8006a24 <SPI_EndRxTxTransaction>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af02      	add	r7, sp, #8
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	4613      	mov	r3, r2
 80062d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	e104      	b.n	80064ec <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_Receive+0x2c>
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0fc      	b.n	80064ec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062fa:	d112      	bne.n	8006322 <HAL_SPI_Receive+0x60>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10e      	bne.n	8006322 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2204      	movs	r2, #4
 8006308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8eb 	bl	80064f4 <HAL_SPI_TransmitReceive>
 800631e:	4603      	mov	r3, r0
 8006320:	e0e4      	b.n	80064ec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006322:	f7fc fa5d 	bl	80027e0 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_SPI_Receive+0x74>
 8006332:	2302      	movs	r3, #2
 8006334:	e0da      	b.n	80064ec <HAL_SPI_Receive+0x22a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2204      	movs	r2, #4
 8006342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	88fa      	ldrh	r2, [r7, #6]
 800635c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006384:	d10f      	bne.n	80063a6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b0:	2b40      	cmp	r3, #64	@ 0x40
 80063b2:	d007      	beq.n	80063c4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d170      	bne.n	80064ae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063cc:	e035      	b.n	800643a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d115      	bne.n	8006408 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f103 020c 	add.w	r2, r3, #12
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006406:	e018      	b.n	800643a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006408:	f7fc f9ea 	bl	80027e0 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d803      	bhi.n	8006420 <HAL_SPI_Receive+0x15e>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d102      	bne.n	8006426 <HAL_SPI_Receive+0x164>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e058      	b.n	80064ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1c4      	bne.n	80063ce <HAL_SPI_Receive+0x10c>
 8006444:	e038      	b.n	80064b8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d113      	bne.n	800647c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	b292      	uxth	r2, r2
 8006460:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800647a:	e018      	b.n	80064ae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647c:	f7fc f9b0 	bl	80027e0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d803      	bhi.n	8006494 <HAL_SPI_Receive+0x1d2>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d102      	bne.n	800649a <HAL_SPI_Receive+0x1d8>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e01e      	b.n	80064ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1c6      	bne.n	8006446 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fa4b 	bl	8006958 <SPI_EndRxTransaction>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80064ea:	2300      	movs	r3, #0
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	@ 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006502:	2301      	movs	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006506:	f7fc f96b 	bl	80027e0 <HAL_GetTick>
 800650a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006512:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800651e:	7ffb      	ldrb	r3, [r7, #31]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d00c      	beq.n	800653e <HAL_SPI_TransmitReceive+0x4a>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800652a:	d106      	bne.n	800653a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_SPI_TransmitReceive+0x46>
 8006534:	7ffb      	ldrb	r3, [r7, #31]
 8006536:	2b04      	cmp	r3, #4
 8006538:	d001      	beq.n	800653e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
 800653c:	e17f      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x5c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x5c>
 800654a:	887b      	ldrh	r3, [r7, #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e174      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x6e>
 800655e:	2302      	movs	r3, #2
 8006560:	e16d      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b04      	cmp	r3, #4
 8006574:	d003      	beq.n	800657e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2205      	movs	r2, #5
 800657a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	887a      	ldrh	r2, [r7, #2]
 800658e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	887a      	ldrh	r2, [r7, #2]
 8006594:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	887a      	ldrh	r2, [r7, #2]
 80065a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b40      	cmp	r3, #64	@ 0x40
 80065c0:	d007      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065da:	d17e      	bne.n	80066da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_SPI_TransmitReceive+0xf6>
 80065e4:	8afb      	ldrh	r3, [r7, #22]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d16c      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	881a      	ldrh	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	1c9a      	adds	r2, r3, #2
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660e:	e059      	b.n	80066c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d11b      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x162>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d016      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x162>
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	2b01      	cmp	r3, #1
 800662c:	d113      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	1c9a      	adds	r2, r3, #2
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d119      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x1a4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d014      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	b292      	uxth	r2, r2
 800667a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006698:	f7fc f8a2 	bl	80027e0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d80d      	bhi.n	80066c4 <HAL_SPI_TransmitReceive+0x1d0>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d009      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0bc      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1a0      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x11c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d19b      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x11c>
 80066d8:	e082      	b.n	80067e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x1f4>
 80066e2:	8afb      	ldrh	r3, [r7, #22]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d171      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670e:	e05d      	b.n	80067cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d11c      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x264>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_SPI_TransmitReceive+0x264>
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	2b01      	cmp	r3, #1
 800672c:	d114      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	d119      	bne.n	800679a <HAL_SPI_TransmitReceive+0x2a6>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d014      	beq.n	800679a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006796:	2301      	movs	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800679a:	f7fc f821 	bl	80027e0 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d803      	bhi.n	80067b2 <HAL_SPI_TransmitReceive+0x2be>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d102      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x2c4>
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e038      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d19c      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d197      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e0:	6a3a      	ldr	r2, [r7, #32]
 80067e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f91d 	bl	8006a24 <SPI_EndRxTxTransaction>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e01d      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800683c:	2300      	movs	r3, #0
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	@ 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006858:	f7fb ffc2 	bl	80027e0 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	4413      	add	r3, r2
 8006866:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006868:	f7fb ffba 	bl	80027e0 <HAL_GetTick>
 800686c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800686e:	4b39      	ldr	r3, [pc, #228]	@ (8006954 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	015b      	lsls	r3, r3, #5
 8006874:	0d1b      	lsrs	r3, r3, #20
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800687e:	e055      	b.n	800692c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d051      	beq.n	800692c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006888:	f7fb ffaa 	bl	80027e0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	429a      	cmp	r2, r3
 8006896:	d902      	bls.n	800689e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d13d      	bne.n	800691a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068b6:	d111      	bne.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c0:	d004      	beq.n	80068cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ca:	d107      	bne.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e4:	d10f      	bne.n	8006906 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006904:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e018      	b.n	800694c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e002      	b.n	800692c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3b01      	subs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4013      	ands	r3, r2
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	429a      	cmp	r2, r3
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	429a      	cmp	r2, r3
 8006948:	d19a      	bne.n	8006880 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000020 	.word	0x20000020

08006958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696c:	d111      	bne.n	8006992 <SPI_EndRxTransaction+0x3a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006976:	d004      	beq.n	8006982 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006980:	d107      	bne.n	8006992 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006990:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800699a:	d12a      	bne.n	80069f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a4:	d012      	beq.n	80069cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	@ 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff ff49 	bl	8006848 <SPI_WaitFlagStateUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02d      	beq.n	8006a18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f043 0220 	orr.w	r2, r3, #32
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e026      	b.n	8006a1a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	2101      	movs	r1, #1
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff ff36 	bl	8006848 <SPI_WaitFlagStateUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01a      	beq.n	8006a18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e6:	f043 0220 	orr.w	r2, r3, #32
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e013      	b.n	8006a1a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2101      	movs	r1, #1
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ff23 	bl	8006848 <SPI_WaitFlagStateUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	f043 0220 	orr.w	r2, r3, #32
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e000      	b.n	8006a1a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2201      	movs	r2, #1
 8006a38:	2102      	movs	r1, #2
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff ff04 	bl	8006848 <SPI_WaitFlagStateUntilTimeout>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e032      	b.n	8006abc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <SPI_EndRxTxTransaction+0xa0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <SPI_EndRxTxTransaction+0xa4>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	0d5b      	lsrs	r3, r3, #21
 8006a62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a74:	d112      	bne.n	8006a9c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	@ 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff fee1 	bl	8006848 <SPI_WaitFlagStateUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d016      	beq.n	8006aba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e00f      	b.n	8006abc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab2:	2b80      	cmp	r3, #128	@ 0x80
 8006ab4:	d0f2      	beq.n	8006a9c <SPI_EndRxTxTransaction+0x78>
 8006ab6:	e000      	b.n	8006aba <SPI_EndRxTxTransaction+0x96>
        break;
 8006ab8:	bf00      	nop
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000020 	.word	0x20000020
 8006ac8:	165e9f81 	.word	0x165e9f81

08006acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e041      	b.n	8006b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fb fda0 	bl	8002638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f000 fa7e 	bl	800700c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d001      	beq.n	8006b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e04e      	b.n	8006c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a23      	ldr	r2, [pc, #140]	@ (8006c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d022      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bae:	d01d      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d018      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d013      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	@ (8006c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x80>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a18      	ldr	r2, [pc, #96]	@ (8006c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d111      	bne.n	8006c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d010      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0e:	e007      	b.n	8006c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40010400 	.word	0x40010400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40001800 	.word	0x40001800

08006c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0202 	mvn.w	r2, #2
 8006c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f999 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f98b 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f99c 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0204 	mvn.w	r2, #4
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f973 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f965 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f976 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d020      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0208 	mvn.w	r2, #8
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f94d 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f93f 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f950 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d020      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0210 	mvn.w	r2, #16
 8006d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f927 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f919 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f92a 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0201 	mvn.w	r2, #1
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fa fff4 	bl	8001da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fade 	bl	8007398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f8fb 	bl	8006ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0220 	mvn.w	r2, #32
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fab0 	bl	8007384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_TIM_ConfigClockSource+0x1c>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e0b4      	b.n	8006fb2 <HAL_TIM_ConfigClockSource+0x186>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e80:	d03e      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0xd4>
 8006e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e86:	f200 8087 	bhi.w	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	f000 8086 	beq.w	8006f9e <HAL_TIM_ConfigClockSource+0x172>
 8006e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e96:	d87f      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b70      	cmp	r3, #112	@ 0x70
 8006e9a:	d01a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0xa6>
 8006e9c:	2b70      	cmp	r3, #112	@ 0x70
 8006e9e:	d87b      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea0:	2b60      	cmp	r3, #96	@ 0x60
 8006ea2:	d050      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0x11a>
 8006ea4:	2b60      	cmp	r3, #96	@ 0x60
 8006ea6:	d877      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea8:	2b50      	cmp	r3, #80	@ 0x50
 8006eaa:	d03c      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0xfa>
 8006eac:	2b50      	cmp	r3, #80	@ 0x50
 8006eae:	d873      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb0:	2b40      	cmp	r3, #64	@ 0x40
 8006eb2:	d058      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0x13a>
 8006eb4:	2b40      	cmp	r3, #64	@ 0x40
 8006eb6:	d86f      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb8:	2b30      	cmp	r3, #48	@ 0x30
 8006eba:	d064      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x15a>
 8006ebc:	2b30      	cmp	r3, #48	@ 0x30
 8006ebe:	d86b      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d060      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x15a>
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d867      	bhi.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05c      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x15a>
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d05a      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x15a>
 8006ed0:	e062      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ee2:	f000 f9b3 	bl	800724c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	609a      	str	r2, [r3, #8]
      break;
 8006efe:	e04f      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f10:	f000 f99c 	bl	800724c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f22:	609a      	str	r2, [r3, #8]
      break;
 8006f24:	e03c      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f32:	461a      	mov	r2, r3
 8006f34:	f000 f910 	bl	8007158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2150      	movs	r1, #80	@ 0x50
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f969 	bl	8007216 <TIM_ITRx_SetConfig>
      break;
 8006f44:	e02c      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f52:	461a      	mov	r2, r3
 8006f54:	f000 f92f 	bl	80071b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2160      	movs	r1, #96	@ 0x60
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f959 	bl	8007216 <TIM_ITRx_SetConfig>
      break;
 8006f64:	e01c      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f72:	461a      	mov	r2, r3
 8006f74:	f000 f8f0 	bl	8007158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2140      	movs	r1, #64	@ 0x40
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f949 	bl	8007216 <TIM_ITRx_SetConfig>
      break;
 8006f84:	e00c      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f000 f940 	bl	8007216 <TIM_ITRx_SetConfig>
      break;
 8006f96:	e003      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9c:	e000      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a43      	ldr	r2, [pc, #268]	@ (800712c <TIM_Base_SetConfig+0x120>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702a:	d00f      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a40      	ldr	r2, [pc, #256]	@ (8007130 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00b      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3f      	ldr	r2, [pc, #252]	@ (8007134 <TIM_Base_SetConfig+0x128>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a3e      	ldr	r2, [pc, #248]	@ (8007138 <TIM_Base_SetConfig+0x12c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a3d      	ldr	r2, [pc, #244]	@ (800713c <TIM_Base_SetConfig+0x130>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d108      	bne.n	800705e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a32      	ldr	r2, [pc, #200]	@ (800712c <TIM_Base_SetConfig+0x120>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d02b      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706c:	d027      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2f      	ldr	r2, [pc, #188]	@ (8007130 <TIM_Base_SetConfig+0x124>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d023      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2e      	ldr	r2, [pc, #184]	@ (8007134 <TIM_Base_SetConfig+0x128>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01f      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2d      	ldr	r2, [pc, #180]	@ (8007138 <TIM_Base_SetConfig+0x12c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01b      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2c      	ldr	r2, [pc, #176]	@ (800713c <TIM_Base_SetConfig+0x130>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d017      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2b      	ldr	r2, [pc, #172]	@ (8007140 <TIM_Base_SetConfig+0x134>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2a      	ldr	r2, [pc, #168]	@ (8007144 <TIM_Base_SetConfig+0x138>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00f      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a29      	ldr	r2, [pc, #164]	@ (8007148 <TIM_Base_SetConfig+0x13c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00b      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a28      	ldr	r2, [pc, #160]	@ (800714c <TIM_Base_SetConfig+0x140>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d007      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a27      	ldr	r2, [pc, #156]	@ (8007150 <TIM_Base_SetConfig+0x144>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a26      	ldr	r2, [pc, #152]	@ (8007154 <TIM_Base_SetConfig+0x148>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d108      	bne.n	80070d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a0e      	ldr	r2, [pc, #56]	@ (800712c <TIM_Base_SetConfig+0x120>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_Base_SetConfig+0xf2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a10      	ldr	r2, [pc, #64]	@ (800713c <TIM_Base_SetConfig+0x130>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d103      	bne.n	8007106 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f043 0204 	orr.w	r2, r3, #4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40010000 	.word	0x40010000
 8007130:	40000400 	.word	0x40000400
 8007134:	40000800 	.word	0x40000800
 8007138:	40000c00 	.word	0x40000c00
 800713c:	40010400 	.word	0x40010400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800
 800714c:	40001800 	.word	0x40001800
 8007150:	40001c00 	.word	0x40001c00
 8007154:	40002000 	.word	0x40002000

08007158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f023 0201 	bic.w	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f023 030a 	bic.w	r3, r3, #10
 8007194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	621a      	str	r2, [r3, #32]
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b087      	sub	sp, #28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	f023 0210 	bic.w	r2, r3, #16
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	031b      	lsls	r3, r3, #12
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	f043 0307 	orr.w	r3, r3, #7
 8007238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	609a      	str	r2, [r3, #8]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	021a      	lsls	r2, r3, #8
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	431a      	orrs	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4313      	orrs	r3, r2
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	609a      	str	r2, [r3, #8]
}
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e05a      	b.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a21      	ldr	r2, [pc, #132]	@ (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f0:	d01d      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1b      	ldr	r2, [pc, #108]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1a      	ldr	r2, [pc, #104]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a18      	ldr	r2, [pc, #96]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a17      	ldr	r2, [pc, #92]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a15      	ldr	r2, [pc, #84]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d10c      	bne.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40010400 	.word	0x40010400
 800737c:	40014000 	.word	0x40014000
 8007380:	40001800 	.word	0x40001800

08007384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	0000      	movs	r0, r0
	...

080073b0 <b_atan2>:
 * Arguments    : double y
 *                double x
 * Return Type  : double
 */
static double b_atan2(double y, double x)
{
 80073b0:	b5b0      	push	{r4, r5, r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80073ba:	ed87 1b00 	vstr	d1, [r7]
  double r;
  if (rtIsNaN(y) || rtIsNaN(x)) {
 80073be:	ed97 0b02 	vldr	d0, [r7, #8]
 80073c2:	f004 ffc9 	bl	800c358 <rtIsNaN>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <b_atan2+0x2a>
 80073cc:	ed97 0b00 	vldr	d0, [r7]
 80073d0:	f004 ffc2 	bl	800c358 <rtIsNaN>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <b_atan2+0x36>
    r = rtNaN;
 80073da:	4b4d      	ldr	r3, [pc, #308]	@ (8007510 <b_atan2+0x160>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80073e4:	e07e      	b.n	80074e4 <b_atan2+0x134>
  } else if (rtIsInf(y) && rtIsInf(x)) {
 80073e6:	ed97 0b02 	vldr	d0, [r7, #8]
 80073ea:	f004 ff87 	bl	800c2fc <rtIsInf>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d03b      	beq.n	800746c <b_atan2+0xbc>
 80073f4:	ed97 0b00 	vldr	d0, [r7]
 80073f8:	f004 ff80 	bl	800c2fc <rtIsInf>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d034      	beq.n	800746c <b_atan2+0xbc>
    int i;
    int i1;
    if (y > 0.0) {
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800740e:	f7f9 fb27 	bl	8000a60 <__aeabi_dcmpgt>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <b_atan2+0x6e>
      i = 1;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e002      	b.n	8007424 <b_atan2+0x74>
    } else {
      i = -1;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	617b      	str	r3, [r7, #20]
    }
    if (x > 0.0) {
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007430:	f7f9 fb16 	bl	8000a60 <__aeabi_dcmpgt>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <b_atan2+0x90>
      i1 = 1;
 800743a:	2301      	movs	r3, #1
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	e002      	b.n	8007446 <b_atan2+0x96>
    } else {
      i1 = -1;
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	613b      	str	r3, [r7, #16]
    }
    r = atan2(i, i1);
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f7f9 f810 	bl	800046c <__aeabi_i2d>
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	6938      	ldr	r0, [r7, #16]
 8007452:	f7f9 f80b 	bl	800046c <__aeabi_i2d>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	ec43 2b11 	vmov	d1, r2, r3
 800745e:	ec45 4b10 	vmov	d0, r4, r5
 8007462:	f005 f803 	bl	800c46c <atan2>
 8007466:	ed87 0b06 	vstr	d0, [r7, #24]
  } else if (rtIsInf(y) && rtIsInf(x)) {
 800746a:	e03b      	b.n	80074e4 <b_atan2+0x134>
  } else if (x == 0.0) {
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007478:	f7f9 faca 	bl	8000a10 <__aeabi_dcmpeq>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d028      	beq.n	80074d4 <b_atan2+0x124>
    if (y > 0.0) {
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800748e:	f7f9 fae7 	bl	8000a60 <__aeabi_dcmpgt>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <b_atan2+0xf4>
      r = RT_PI / 2.0;
 8007498:	a319      	add	r3, pc, #100	@ (adr r3, 8007500 <b_atan2+0x150>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80074a2:	e01f      	b.n	80074e4 <b_atan2+0x134>
    } else if (y < 0.0) {
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074b0:	f7f9 fab8 	bl	8000a24 <__aeabi_dcmplt>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <b_atan2+0x116>
      r = -(RT_PI / 2.0);
 80074ba:	a313      	add	r3, pc, #76	@ (adr r3, 8007508 <b_atan2+0x158>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80074c4:	e00e      	b.n	80074e4 <b_atan2+0x134>
    } else {
      r = 0.0;
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80074d2:	e007      	b.n	80074e4 <b_atan2+0x134>
    }
  } else {
    r = atan2(y, x);
 80074d4:	ed97 1b00 	vldr	d1, [r7]
 80074d8:	ed97 0b02 	vldr	d0, [r7, #8]
 80074dc:	f004 ffc6 	bl	800c46c <atan2>
 80074e0:	ed87 0b06 	vstr	d0, [r7, #24]
  }
  return r;
 80074e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80074ec:	eeb0 0a47 	vmov.f32	s0, s14
 80074f0:	eef0 0a67 	vmov.f32	s1, s15
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bdb0      	pop	{r4, r5, r7, pc}
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w
 8007500:	54442d18 	.word	0x54442d18
 8007504:	3ff921fb 	.word	0x3ff921fb
 8007508:	54442d18 	.word	0x54442d18
 800750c:	bff921fb 	.word	0xbff921fb
 8007510:	20000030 	.word	0x20000030

08007514 <b_diag>:
 * Arguments    : const double v[3]
 *                double d[3][3]
 * Return Type  : void
 */
static void b_diag(const double v[3], double d[3][3])
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < 3; i++) {
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e02c      	b.n	800757e <b_diag+0x6a>
    d[i][0] = 0.0;
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4613      	mov	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4413      	add	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	461a      	mov	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	1899      	adds	r1, r3, r2
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	e9c1 2300 	strd	r2, r3, [r1]
    d[i][1] = 0.0;
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	461a      	mov	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	1899      	adds	r1, r3, r2
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	e9c1 2302 	strd	r2, r3, [r1, #8]
    d[i][2] = 0.0;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4613      	mov	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4413      	add	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	461a      	mov	r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1899      	adds	r1, r3, r2
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (i = 0; i < 3; i++) {
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b02      	cmp	r3, #2
 8007582:	ddcf      	ble.n	8007524 <b_diag+0x10>
  }
  d[0][0] = v[0];
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	e9c1 2300 	strd	r2, r3, [r1]
  d[1][1] = v[1];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3308      	adds	r3, #8
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	f102 0118 	add.w	r1, r2, #24
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  d[2][2] = v[2];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3310      	adds	r3, #16
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <b_eye>:
/*
 * Arguments    : double b_I[4][4]
 * Return Type  : void
 */
static void b_eye(double b_I[4][4])
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  int i;
  for (i = 0; i < 4; i++) {
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e02a      	b.n	8007624 <b_eye+0x64>
    b_I[i][0] = 0.0;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	015b      	lsls	r3, r3, #5
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	18d1      	adds	r1, r2, r3
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	e9c1 2300 	strd	r2, r3, [r1]
    b_I[i][1] = 0.0;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	015b      	lsls	r3, r3, #5
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	18d1      	adds	r1, r2, r3
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    b_I[i][2] = 0.0;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	015b      	lsls	r3, r3, #5
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	18d1      	adds	r1, r2, r3
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	e9c1 2304 	strd	r2, r3, [r1, #16]
    b_I[i][3] = 0.0;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	015b      	lsls	r3, r3, #5
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	18d1      	adds	r1, r2, r3
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  for (i = 0; i < 4; i++) {
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b03      	cmp	r3, #3
 8007628:	ddd1      	ble.n	80075ce <b_eye+0xe>
  }
  b_I[0][0] = 1.0;
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <b_eye+0xb4>)
 8007632:	e9c1 2300 	strd	r2, r3, [r1]
  b_I[1][1] = 1.0;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f103 0120 	add.w	r1, r3, #32
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <b_eye+0xb4>)
 8007642:	e9c1 2302 	strd	r2, r3, [r1, #8]
  b_I[2][2] = 1.0;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	4b08      	ldr	r3, [pc, #32]	@ (8007674 <b_eye+0xb4>)
 8007652:	e9c1 2304 	strd	r2, r3, [r1, #16]
  b_I[3][3] = 1.0;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	4b04      	ldr	r3, [pc, #16]	@ (8007674 <b_eye+0xb4>)
 8007662:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	3ff00000 	.word	0x3ff00000

08007678 <b_norm>:
/*
 * Arguments    : const double x[3]
 * Return Type  : double
 */
static double b_norm(const double x[3])
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	@ 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  double absxk;
  double scale;
  double t;
  double y;
  scale = 3.3121686421112381E-170;
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 8007688:	e9c7 2308 	strd	r2, r3, [r7, #32]
  absxk = fabs(x[0]);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4611      	mov	r1, r2
 8007694:	6139      	str	r1, [r7, #16]
 8007696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800769a:	617b      	str	r3, [r7, #20]
  if (absxk > 3.3121686421112381E-170) {
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 80076a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80076a8:	f7f9 f9da 	bl	8000a60 <__aeabi_dcmpgt>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d009      	beq.n	80076c6 <b_norm+0x4e>
    y = 1.0;
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007874 <b_norm+0x1fc>)
 80076b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 80076bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80076c4:	e015      	b.n	80076f2 <b_norm+0x7a>
  } else {
    t = absxk / 3.3121686421112381E-170;
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 80076ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80076d2:	f7f9 f85f 	bl	8000794 <__aeabi_ddiv>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y = t * t;
 80076de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076e6:	f7f8 ff2b 	bl	8000540 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  absxk = fabs(x[1]);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3308      	adds	r3, #8
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4611      	mov	r1, r2
 80076fc:	6139      	str	r1, [r7, #16]
 80076fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007702:	617b      	str	r3, [r7, #20]
  if (absxk > scale) {
 8007704:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800770c:	f7f9 f9a8 	bl	8000a60 <__aeabi_dcmpgt>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d029      	beq.n	800776a <b_norm+0xf2>
    t = scale / absxk;
 8007716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800771a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800771e:	f7f9 f839 	bl	8000794 <__aeabi_ddiv>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y = y * t * t + 1.0;
 800772a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007732:	f7f8 ff05 	bl	8000540 <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4610      	mov	r0, r2
 800773c:	4619      	mov	r1, r3
 800773e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007742:	f7f8 fefd 	bl	8000540 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	4b48      	ldr	r3, [pc, #288]	@ (8007874 <b_norm+0x1fc>)
 8007754:	f7f8 fd3e 	bl	80001d4 <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 8007760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007764:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8007768:	e019      	b.n	800779e <b_norm+0x126>
  } else {
    t = absxk / scale;
 800776a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800776e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007772:	f7f9 f80f 	bl	8000794 <__aeabi_ddiv>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y += t * t;
 800777e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007786:	f7f8 fedb 	bl	8000540 <__aeabi_dmul>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007792:	f7f8 fd1f 	bl	80001d4 <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  absxk = fabs(x[2]);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3310      	adds	r3, #16
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	4611      	mov	r1, r2
 80077a8:	6139      	str	r1, [r7, #16]
 80077aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077ae:	617b      	str	r3, [r7, #20]
  if (absxk > scale) {
 80077b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077b8:	f7f9 f952 	bl	8000a60 <__aeabi_dcmpgt>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d029      	beq.n	8007816 <b_norm+0x19e>
    t = scale / absxk;
 80077c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80077ca:	f7f8 ffe3 	bl	8000794 <__aeabi_ddiv>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y = y * t * t + 1.0;
 80077d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077de:	f7f8 feaf 	bl	8000540 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077ee:	f7f8 fea7 	bl	8000540 <__aeabi_dmul>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007874 <b_norm+0x1fc>)
 8007800:	f7f8 fce8 	bl	80001d4 <__adddf3>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 800780c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007810:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8007814:	e019      	b.n	800784a <b_norm+0x1d2>
  } else {
    t = absxk / scale;
 8007816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800781a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800781e:	f7f8 ffb9 	bl	8000794 <__aeabi_ddiv>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y += t * t;
 800782a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800782e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007832:	f7f8 fe85 	bl	8000540 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800783e:	f7f8 fcc9 	bl	80001d4 <__adddf3>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  return scale * sqrt(y);
 800784a:	ed97 0b06 	vldr	d0, [r7, #24]
 800784e:	f004 fe7f 	bl	800c550 <sqrt>
 8007852:	ec51 0b10 	vmov	r0, r1, d0
 8007856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800785a:	f7f8 fe71 	bl	8000540 <__aeabi_dmul>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	ec43 2b17 	vmov	d7, r2, r3
}
 8007866:	eeb0 0a47 	vmov.f32	s0, s14
 800786a:	eef0 0a67 	vmov.f32	s1, s15
 800786e:	3728      	adds	r7, #40	@ 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	3ff00000 	.word	0x3ff00000

08007878 <blkdiag>:
 *                double y[7][7]
 * Return Type  : void
 */
static void blkdiag(double varargin_1[3][3], double varargin_2[3][3],
                    double varargin_3, double y[7][7])
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6178      	str	r0, [r7, #20]
 8007880:	6139      	str	r1, [r7, #16]
 8007882:	ed87 0b02 	vstr	d0, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  int i;
  memset(&y[0][0], 0, 49U * sizeof(double));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f004 fd76 	bl	800c382 <memset>
  for (i = 0; i < 3; i++) {
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e07a      	b.n	8007992 <blkdiag+0x11a>
    y[i][0] = varargin_1[i][0];
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	461a      	mov	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	1898      	adds	r0, r3, r2
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1899      	adds	r1, r3, r2
 80078bc:	e9d0 2300 	ldrd	r2, r3, [r0]
 80078c0:	e9c1 2300 	strd	r2, r3, [r1]
    y[i + 3][3] = varargin_2[i][0];
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	461a      	mov	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1898      	adds	r0, r3, r2
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	4613      	mov	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	33a8      	adds	r3, #168	@ 0xa8
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	18d1      	adds	r1, r2, r3
 80078e4:	e9d0 2300 	ldrd	r2, r3, [r0]
 80078e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    y[i][1] = varargin_1[i][1];
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	461a      	mov	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	1898      	adds	r0, r3, r2
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	1899      	adds	r1, r3, r2
 800790c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8007910:	e9c1 2302 	strd	r2, r3, [r1, #8]
    y[i + 3][4] = varargin_2[i][1];
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	4613      	mov	r3, r2
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4413      	add	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	461a      	mov	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	1898      	adds	r0, r3, r2
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	4613      	mov	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	33a8      	adds	r3, #168	@ 0xa8
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	18d1      	adds	r1, r2, r3
 8007934:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8007938:	e9c1 2308 	strd	r2, r3, [r1, #32]
    y[i][2] = varargin_1[i][2];
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	461a      	mov	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	1898      	adds	r0, r3, r2
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	4613      	mov	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1899      	adds	r1, r3, r2
 800795c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8007960:	e9c1 2304 	strd	r2, r3, [r1, #16]
    y[i + 3][5] = varargin_2[i][2];
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	4613      	mov	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4413      	add	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	461a      	mov	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1898      	adds	r0, r3, r2
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	4613      	mov	r3, r2
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	33a8      	adds	r3, #168	@ 0xa8
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	18d1      	adds	r1, r2, r3
 8007984:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8007988:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  for (i = 0; i < 3; i++) {
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b02      	cmp	r3, #2
 8007996:	dd81      	ble.n	800789c <blkdiag+0x24>
  }
  y[6][6] = varargin_3;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 800799e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 80079a6:	bf00      	nop
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <c_norm>:
/*
 * Arguments    : const double x[2]
 * Return Type  : double
 */
static double c_norm(const double x[2])
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  double absxk;
  double scale;
  double t;
  double y;
  scale = 3.3121686421112381E-170;
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 80079c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  absxk = fabs(x[0]);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	4611      	mov	r1, r2
 80079cc:	6139      	str	r1, [r7, #16]
 80079ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079d2:	617b      	str	r3, [r7, #20]
  if (absxk > 3.3121686421112381E-170) {
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 80079dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079e0:	f7f9 f83e 	bl	8000a60 <__aeabi_dcmpgt>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <c_norm+0x4e>
    y = 1.0;
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	4b44      	ldr	r3, [pc, #272]	@ (8007b00 <c_norm+0x150>)
 80079f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 80079f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80079fc:	e015      	b.n	8007a2a <c_norm+0x7a>
  } else {
    t = absxk / 3.3121686421112381E-170;
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 8007a06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a0a:	f7f8 fec3 	bl	8000794 <__aeabi_ddiv>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y = t * t;
 8007a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a1e:	f7f8 fd8f 	bl	8000540 <__aeabi_dmul>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  absxk = fabs(x[1]);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4611      	mov	r1, r2
 8007a34:	6139      	str	r1, [r7, #16]
 8007a36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a3a:	617b      	str	r3, [r7, #20]
  if (absxk > scale) {
 8007a3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a44:	f7f9 f80c 	bl	8000a60 <__aeabi_dcmpgt>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d029      	beq.n	8007aa2 <c_norm+0xf2>
    t = scale / absxk;
 8007a4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a56:	f7f8 fe9d 	bl	8000794 <__aeabi_ddiv>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y = y * t * t + 1.0;
 8007a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a6a:	f7f8 fd69 	bl	8000540 <__aeabi_dmul>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4610      	mov	r0, r2
 8007a74:	4619      	mov	r1, r3
 8007a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a7a:	f7f8 fd61 	bl	8000540 <__aeabi_dmul>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007b00 <c_norm+0x150>)
 8007a8c:	f7f8 fba2 	bl	80001d4 <__adddf3>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 8007a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8007aa0:	e019      	b.n	8007ad6 <c_norm+0x126>
  } else {
    t = absxk / scale;
 8007aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007aa6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007aaa:	f7f8 fe73 	bl	8000794 <__aeabi_ddiv>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    y += t * t;
 8007ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007abe:	f7f8 fd3f 	bl	8000540 <__aeabi_dmul>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007aca:	f7f8 fb83 	bl	80001d4 <__adddf3>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  return scale * sqrt(y);
 8007ad6:	ed97 0b06 	vldr	d0, [r7, #24]
 8007ada:	f004 fd39 	bl	800c550 <sqrt>
 8007ade:	ec51 0b10 	vmov	r0, r1, d0
 8007ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ae6:	f7f8 fd2b 	bl	8000540 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	ec43 2b17 	vmov	d7, r2, r3
}
 8007af2:	eeb0 0a47 	vmov.f32	s0, s14
 8007af6:	eef0 0a67 	vmov.f32	s1, s15
 8007afa:	3728      	adds	r7, #40	@ 0x28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	3ff00000 	.word	0x3ff00000

08007b04 <diag>:
 * Arguments    : const double v[6]
 *                double d[6][6]
 * Return Type  : void
 */
static void diag(const double v[6], double d[6][6])
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  int j;
  memset(&d[0][0], 0, 36U * sizeof(double));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f004 fc33 	bl	800c382 <memset>
  for (j = 0; j < 6; j++) {
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e015      	b.n	8007b4e <diag+0x4a>
    d[j][j] = v[j];
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	18d1      	adds	r1, r2, r3
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	4413      	add	r3, r2
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	461a      	mov	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	1898      	adds	r0, r3, r2
 8007b3a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007b3e:	68f9      	ldr	r1, [r7, #12]
 8007b40:	00c9      	lsls	r1, r1, #3
 8007b42:	4401      	add	r1, r0
 8007b44:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 6; j++) {
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	dde6      	ble.n	8007b22 <diag+0x1e>
  }
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <ecompass>:
 *                double *O_d
 * Return Type  : double
 */
static double ecompass(const double a[3], const double m[3], double *O_b,
                       double *O_c, double *O_d)
{
 8007b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b64:	b0b8      	sub	sp, #224	@ 0xe0
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	61f8      	str	r0, [r7, #28]
 8007b6a:	61b9      	str	r1, [r7, #24]
 8007b6c:	617a      	str	r2, [r7, #20]
 8007b6e:	613b      	str	r3, [r7, #16]
  int k;
  bool b[3][3];
  bool y[3];
  bool exitg1;
  bool nanPageIdx;
  Reast[0] = a[1] * m[2] - m[1] * a[2];
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3308      	adds	r3, #8
 8007b74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	3310      	adds	r3, #16
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fcde 	bl	8000540 <__aeabi_dmul>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	461d      	mov	r5, r3
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	3310      	adds	r3, #16
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	f7f8 fcd0 	bl	8000540 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fb12 	bl	80001d0 <__aeabi_dsub>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  Reast[1] = m[0] * a[2] - a[0] * m[2];
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fcbd 	bl	8000540 <__aeabi_dmul>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4614      	mov	r4, r2
 8007bcc:	461d      	mov	r5, r3
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fcb0 	bl	8000540 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7f8 faf2 	bl	80001d0 <__aeabi_dsub>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  Reast[2] = a[0] * m[1] - m[0] * a[1];
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fc9d 	bl	8000540 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	461d      	mov	r5, r3
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3308      	adds	r3, #8
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fc90 	bl	8000540 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fad2 	bl	80001d0 <__aeabi_dsub>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  R[2][0] = a[0];
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  R[1][0] = Reast[0];
 8007c3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007c42:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  R[2][1] = a[1];
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  R[1][1] = Reast[1];
 8007c52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c56:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  R[2][2] = a[2];
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
  R[1][2] = Reast[2];
 8007c66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c6a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  R[0][0] = Reast[1] * a[2] - a[1] * Reast[2];
 8007c6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	3310      	adds	r3, #16
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fc61 	bl	8000540 <__aeabi_dmul>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4614      	mov	r4, r2
 8007c84:	461d      	mov	r5, r3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c92:	f7f8 fc55 	bl	8000540 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fa97 	bl	80001d0 <__aeabi_dsub>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  R[0][1] = a[0] * Reast[2] - Reast[0] * a[2];
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cb4:	f7f8 fc44 	bl	8000540 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	461d      	mov	r5, r3
 8007cc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3310      	adds	r3, #16
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fc38 	bl	8000540 <__aeabi_dmul>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fa7a 	bl	80001d0 <__aeabi_dsub>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  R[0][2] = Reast[0] * a[1] - a[0] * Reast[1];
 8007ce4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	3308      	adds	r3, #8
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f7f8 fc26 	bl	8000540 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	461d      	mov	r5, r3
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d06:	f7f8 fc1b 	bl	8000540 <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	f7f8 fa5d 	bl	80001d0 <__aeabi_dsub>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  for (k = 0; k < 3; k++) {
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d24:	e0e7      	b.n	8007ef6 <ecompass+0x396>
    double d;
    double d1;
    O_a = R[k][0];
 8007d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4413      	add	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	33d0      	adds	r3, #208	@ 0xd0
 8007d34:	f107 0210 	add.w	r2, r7, #16
 8007d38:	4413      	add	r3, r2
 8007d3a:	3b78      	subs	r3, #120	@ 0x78
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    pd = R[k][1];
 8007d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d48:	4613      	mov	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	33d0      	adds	r3, #208	@ 0xd0
 8007d52:	f107 0210 	add.w	r2, r7, #16
 8007d56:	4413      	add	r3, r2
 8007d58:	3b70      	subs	r3, #112	@ 0x70
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    d = R[k][2];
 8007d62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d66:	4613      	mov	r3, r2
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	4413      	add	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	33d0      	adds	r3, #208	@ 0xd0
 8007d70:	f107 0210 	add.w	r2, r7, #16
 8007d74:	4413      	add	r3, r2
 8007d76:	3b68      	subs	r3, #104	@ 0x68
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    d1 = sqrt((O_a * O_a + pd * pd) + d * d);
 8007d80:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8007d84:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8007d88:	f7f8 fbda 	bl	8000540 <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4614      	mov	r4, r2
 8007d92:	461d      	mov	r5, r3
 8007d94:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8007d98:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007d9c:	f7f8 fbd0 	bl	8000540 <__aeabi_dmul>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fa14 	bl	80001d4 <__adddf3>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	461d      	mov	r5, r3
 8007db4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8007db8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007dbc:	f7f8 fbc0 	bl	8000540 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa04 	bl	80001d4 <__adddf3>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	ec43 2b17 	vmov	d7, r2, r3
 8007dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8007dd8:	eef0 0a67 	vmov.f32	s1, s15
 8007ddc:	f004 fbb8 	bl	800c550 <sqrt>
 8007de0:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
    O_a /= d1;
 8007de4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8007de8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8007dec:	f7f8 fcd2 	bl	8000794 <__aeabi_ddiv>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    R[k][0] = O_a;
 8007df8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	33d0      	adds	r3, #208	@ 0xd0
 8007e06:	f107 0210 	add.w	r2, r7, #16
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f1a3 0178 	sub.w	r1, r3, #120	@ 0x78
 8007e10:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8007e14:	e9c1 2300 	strd	r2, r3, [r1]
    b[k][0] = rtIsNaN(O_a);
 8007e18:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8007e1c:	f004 fa9c 	bl	800c358 <rtIsNaN>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4619      	mov	r1, r3
 8007e24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e28:	4613      	mov	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	33d0      	adds	r3, #208	@ 0xd0
 8007e30:	f107 0210 	add.w	r2, r7, #16
 8007e34:	4413      	add	r3, r2
 8007e36:	3bbc      	subs	r3, #188	@ 0xbc
 8007e38:	460a      	mov	r2, r1
 8007e3a:	701a      	strb	r2, [r3, #0]
    O_a = pd / d1;
 8007e3c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8007e40:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007e44:	f7f8 fca6 	bl	8000794 <__aeabi_ddiv>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    R[k][1] = O_a;
 8007e50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e54:	4613      	mov	r3, r2
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	4413      	add	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	33d0      	adds	r3, #208	@ 0xd0
 8007e5e:	f107 0210 	add.w	r2, r7, #16
 8007e62:	4413      	add	r3, r2
 8007e64:	f1a3 0170 	sub.w	r1, r3, #112	@ 0x70
 8007e68:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8007e6c:	e9c1 2300 	strd	r2, r3, [r1]
    b[k][1] = rtIsNaN(O_a);
 8007e70:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8007e74:	f004 fa70 	bl	800c358 <rtIsNaN>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e80:	4613      	mov	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4413      	add	r3, r2
 8007e86:	33d0      	adds	r3, #208	@ 0xd0
 8007e88:	f107 0210 	add.w	r2, r7, #16
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3bbb      	subs	r3, #187	@ 0xbb
 8007e90:	460a      	mov	r2, r1
 8007e92:	701a      	strb	r2, [r3, #0]
    O_a = d / d1;
 8007e94:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8007e98:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007e9c:	f7f8 fc7a 	bl	8000794 <__aeabi_ddiv>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    R[k][2] = O_a;
 8007ea8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007eac:	4613      	mov	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	33d0      	adds	r3, #208	@ 0xd0
 8007eb6:	f107 0210 	add.w	r2, r7, #16
 8007eba:	4413      	add	r3, r2
 8007ebc:	f1a3 0168 	sub.w	r1, r3, #104	@ 0x68
 8007ec0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8007ec4:	e9c1 2300 	strd	r2, r3, [r1]
    b[k][2] = rtIsNaN(O_a);
 8007ec8:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8007ecc:	f004 fa44 	bl	800c358 <rtIsNaN>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ed8:	4613      	mov	r3, r2
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	4413      	add	r3, r2
 8007ede:	33d0      	adds	r3, #208	@ 0xd0
 8007ee0:	f107 0210 	add.w	r2, r7, #16
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3bba      	subs	r3, #186	@ 0xba
 8007ee8:	460a      	mov	r2, r1
 8007eea:	701a      	strb	r2, [r3, #0]
  for (k = 0; k < 3; k++) {
 8007eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	f77f af13 	ble.w	8007d26 <ecompass+0x1c6>
  }
  for (k = 0; k < 3; k++) {
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f06:	e03d      	b.n	8007f84 <ecompass+0x424>
    y[k] = false;
 8007f08:	f107 0220 	add.w	r2, r7, #32
 8007f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f10:	4413      	add	r3, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
    b_k = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    exitg1 = false;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    while ((!exitg1) && (b_k < 3)) {
 8007f22:	e01f      	b.n	8007f64 <ecompass+0x404>
      if (b[k][b_k]) {
 8007f24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f28:	4613      	mov	r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	33d0      	adds	r3, #208	@ 0xd0
 8007f30:	f107 0210 	add.w	r2, r7, #16
 8007f34:	189a      	adds	r2, r3, r2
 8007f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3bbc      	subs	r3, #188	@ 0xbc
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <ecompass+0x3fa>
        y[k] = true;
 8007f44:	f107 0220 	add.w	r2, r7, #32
 8007f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f4c:	4413      	add	r3, r2
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
        exitg1 = true;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8007f58:	e004      	b.n	8007f64 <ecompass+0x404>
      } else {
        b_k++;
 8007f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    while ((!exitg1) && (b_k < 3)) {
 8007f64:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007f68:	f083 0301 	eor.w	r3, r3, #1
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <ecompass+0x41a>
 8007f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	ddd4      	ble.n	8007f24 <ecompass+0x3c4>
  for (k = 0; k < 3; k++) {
 8007f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	ddbd      	ble.n	8007f08 <ecompass+0x3a8>
      }
    }
  }
  nanPageIdx = false;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
  k = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  exitg1 = false;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
  while ((!exitg1) && (k < 3)) {
 8007f9e:	e013      	b.n	8007fc8 <ecompass+0x468>
    if (y[k]) {
 8007fa0:	f107 0220 	add.w	r2, r7, #32
 8007fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fa8:	4413      	add	r3, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <ecompass+0x45e>
      nanPageIdx = true;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
      exitg1 = true;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8007fbc:	e004      	b.n	8007fc8 <ecompass+0x468>
    } else {
      k++;
 8007fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while ((!exitg1) && (k < 3)) {
 8007fc8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007fcc:	f083 0301 	eor.w	r3, r3, #1
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <ecompass+0x47e>
 8007fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	dde0      	ble.n	8007fa0 <ecompass+0x440>
    }
  }
  if (nanPageIdx) {
 8007fde:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d051      	beq.n	800808a <ecompass+0x52a>
    for (b_k = 0; b_k < 3; b_k++) {
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fec:	e03a      	b.n	8008064 <ecompass+0x504>
      R[b_k][0] = 0.0;
 8007fee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	33d0      	adds	r3, #208	@ 0xd0
 8007ffc:	f107 0210 	add.w	r2, r7, #16
 8008000:	4413      	add	r3, r2
 8008002:	f1a3 0178 	sub.w	r1, r3, #120	@ 0x78
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	e9c1 2300 	strd	r2, r3, [r1]
      R[b_k][1] = 0.0;
 8008012:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8008016:	4613      	mov	r3, r2
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	4413      	add	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	33d0      	adds	r3, #208	@ 0xd0
 8008020:	f107 0210 	add.w	r2, r7, #16
 8008024:	4413      	add	r3, r2
 8008026:	f1a3 0170 	sub.w	r1, r3, #112	@ 0x70
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	e9c1 2300 	strd	r2, r3, [r1]
      R[b_k][2] = 0.0;
 8008036:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800803a:	4613      	mov	r3, r2
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4413      	add	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	33d0      	adds	r3, #208	@ 0xd0
 8008044:	f107 0210 	add.w	r2, r7, #16
 8008048:	4413      	add	r3, r2
 800804a:	f1a3 0168 	sub.w	r1, r3, #104	@ 0x68
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_k = 0; b_k < 3; b_k++) {
 800805a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800805e:	3301      	adds	r3, #1
 8008060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008068:	2b02      	cmp	r3, #2
 800806a:	ddc0      	ble.n	8007fee <ecompass+0x48e>
    }
    R[0][0] = 1.0;
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	4b99      	ldr	r3, [pc, #612]	@ (80082d8 <ecompass+0x778>)
 8008072:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    R[1][1] = 1.0;
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	4b97      	ldr	r3, [pc, #604]	@ (80082d8 <ecompass+0x778>)
 800807c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    R[2][2] = 1.0;
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	4b94      	ldr	r3, [pc, #592]	@ (80082d8 <ecompass+0x778>)
 8008086:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
  }
  pd = (R[0][0] + R[1][1]) + R[2][2];
 800808a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800808e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008092:	f7f8 f89f 	bl	80001d4 <__adddf3>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80080a2:	f7f8 f897 	bl	80001d4 <__adddf3>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
  psquared[0] = (2.0 * pd + 1.0) - pd;
 80080ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	f7f8 f88d 	bl	80001d4 <__adddf3>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	4b84      	ldr	r3, [pc, #528]	@ (80082d8 <ecompass+0x778>)
 80080c8:	f7f8 f884 	bl	80001d4 <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4610      	mov	r0, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80080d8:	f7f8 f87a 	bl	80001d0 <__aeabi_dsub>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  psquared[1] = (2.0 * R[0][0] + 1.0) - pd;
 80080e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	f7f8 f872 	bl	80001d4 <__adddf3>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	4b76      	ldr	r3, [pc, #472]	@ (80082d8 <ecompass+0x778>)
 80080fe:	f7f8 f869 	bl	80001d4 <__adddf3>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800810e:	f7f8 f85f 	bl	80001d0 <__aeabi_dsub>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  psquared[2] = (2.0 * R[1][1] + 1.0) - pd;
 800811a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	f7f8 f857 	bl	80001d4 <__adddf3>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	4b69      	ldr	r3, [pc, #420]	@ (80082d8 <ecompass+0x778>)
 8008134:	f7f8 f84e 	bl	80001d4 <__adddf3>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4610      	mov	r0, r2
 800813e:	4619      	mov	r1, r3
 8008140:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008144:	f7f8 f844 	bl	80001d0 <__aeabi_dsub>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  psquared[3] = (2.0 * R[2][2] + 1.0) - pd;
 8008150:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	f7f8 f83c 	bl	80001d4 <__adddf3>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4610      	mov	r0, r2
 8008162:	4619      	mov	r1, r3
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	4b5b      	ldr	r3, [pc, #364]	@ (80082d8 <ecompass+0x778>)
 800816a:	f7f8 f833 	bl	80001d4 <__adddf3>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800817a:	f7f8 f829 	bl	80001d0 <__aeabi_dsub>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  if (!rtIsNaN(psquared[0])) {
 8008186:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800818a:	eeb0 0a47 	vmov.f32	s0, s14
 800818e:	eef0 0a67 	vmov.f32	s1, s15
 8008192:	f004 f8e1 	bl	800c358 <rtIsNaN>
 8008196:	4603      	mov	r3, r0
 8008198:	f083 0301 	eor.w	r3, r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <ecompass+0x64a>
    idx = 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081a8:	e038      	b.n	800821c <ecompass+0x6bc>
  } else {
    idx = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    k = 2;
 80081b0:	2302      	movs	r3, #2
 80081b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    exitg1 = false;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    while ((!exitg1) && (k < 5)) {
 80081bc:	e023      	b.n	8008206 <ecompass+0x6a6>
      if (!rtIsNaN(psquared[k - 1])) {
 80081be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081c2:	3b01      	subs	r3, #1
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	33d0      	adds	r3, #208	@ 0xd0
 80081c8:	f107 0210 	add.w	r2, r7, #16
 80081cc:	4413      	add	r3, r2
 80081ce:	3b98      	subs	r3, #152	@ 0x98
 80081d0:	ed93 7b00 	vldr	d7, [r3]
 80081d4:	eeb0 0a47 	vmov.f32	s0, s14
 80081d8:	eef0 0a67 	vmov.f32	s1, s15
 80081dc:	f004 f8bc 	bl	800c358 <rtIsNaN>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f083 0301 	eor.w	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <ecompass+0x69c>
        idx = k;
 80081ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        exitg1 = true;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 80081fa:	e004      	b.n	8008206 <ecompass+0x6a6>
      } else {
        k++;
 80081fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008200:	3301      	adds	r3, #1
 8008202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    while ((!exitg1) && (k < 5)) {
 8008206:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800820a:	f083 0301 	eor.w	r3, r3, #1
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <ecompass+0x6bc>
 8008214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008218:	2b04      	cmp	r3, #4
 800821a:	ddd0      	ble.n	80081be <ecompass+0x65e>
      }
    }
  }
  if (idx == 0) {
 800821c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d107      	bne.n	8008234 <ecompass+0x6d4>
    pd = psquared[0];
 8008224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008228:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    idx = 1;
 800822c:	2301      	movs	r3, #1
 800822e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008232:	e03d      	b.n	80082b0 <ecompass+0x750>
  } else {
    pd = psquared[idx - 1];
 8008234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008238:	3b01      	subs	r3, #1
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	33d0      	adds	r3, #208	@ 0xd0
 800823e:	f107 0210 	add.w	r2, r7, #16
 8008242:	4413      	add	r3, r2
 8008244:	3b98      	subs	r3, #152	@ 0x98
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    b_k = idx + 1;
 800824e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008252:	3301      	adds	r3, #1
 8008254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    for (k = b_k; k < 5; k++) {
 8008258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800825c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008260:	e022      	b.n	80082a8 <ecompass+0x748>
      O_a = psquared[k - 1];
 8008262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008266:	3b01      	subs	r3, #1
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	33d0      	adds	r3, #208	@ 0xd0
 800826c:	f107 0210 	add.w	r2, r7, #16
 8008270:	4413      	add	r3, r2
 8008272:	3b98      	subs	r3, #152	@ 0x98
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
      if (pd < O_a) {
 800827c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8008280:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008284:	f7f8 fbce 	bl	8000a24 <__aeabi_dcmplt>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <ecompass+0x73e>
        pd = O_a;
 800828e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8008292:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        idx = k;
 8008296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800829a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    for (k = b_k; k < 5; k++) {
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082a2:	3301      	adds	r3, #1
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	ddd8      	ble.n	8008262 <ecompass+0x702>
      }
    }
  }
  switch (idx) {
 80082b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	f000 80bd 	beq.w	8008434 <ecompass+0x8d4>
 80082ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082be:	2b03      	cmp	r3, #3
 80082c0:	f300 8110 	bgt.w	80084e4 <ecompass+0x984>
 80082c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d007      	beq.n	80082dc <ecompass+0x77c>
 80082cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d05a      	beq.n	800838a <ecompass+0x82a>
 80082d4:	e106      	b.n	80084e4 <ecompass+0x984>
 80082d6:	bf00      	nop
 80082d8:	3ff00000 	.word	0x3ff00000
  case 1:
    pd = sqrt(pd);
 80082dc:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 80082e0:	f004 f936 	bl	800c550 <sqrt>
 80082e4:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
    O_a = 0.5 * pd;
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	4b7c      	ldr	r3, [pc, #496]	@ (80084e0 <ecompass+0x980>)
 80082ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80082f2:	f7f8 f925 	bl	8000540 <__aeabi_dmul>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    pd = 0.5 / pd;
 80082fe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	4976      	ldr	r1, [pc, #472]	@ (80084e0 <ecompass+0x980>)
 8008308:	f7f8 fa44 	bl	8000794 <__aeabi_ddiv>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    *O_b = pd * (R[2][1] - R[1][2]);
 8008314:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8008318:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800831c:	f7f7 ff58 	bl	80001d0 <__aeabi_dsub>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4610      	mov	r0, r2
 8008326:	4619      	mov	r1, r3
 8008328:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800832c:	f7f8 f908 	bl	8000540 <__aeabi_dmul>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	e9c1 2300 	strd	r2, r3, [r1]
    *O_c = pd * (R[0][2] - R[2][0]);
 800833a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800833e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8008342:	f7f7 ff45 	bl	80001d0 <__aeabi_dsub>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008352:	f7f8 f8f5 	bl	8000540 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	6939      	ldr	r1, [r7, #16]
 800835c:	e9c1 2300 	strd	r2, r3, [r1]
    *O_d = pd * (R[1][0] - R[0][1]);
 8008360:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008364:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008368:	f7f7 ff32 	bl	80001d0 <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4610      	mov	r0, r2
 8008372:	4619      	mov	r1, r3
 8008374:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008378:	f7f8 f8e2 	bl	8000540 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8008384:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8008388:	e101      	b.n	800858e <ecompass+0xa2e>
  case 2:
    pd = sqrt(pd);
 800838a:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 800838e:	f004 f8df 	bl	800c550 <sqrt>
 8008392:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
    *O_b = 0.5 * pd;
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	4b51      	ldr	r3, [pc, #324]	@ (80084e0 <ecompass+0x980>)
 800839c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80083a0:	f7f8 f8ce 	bl	8000540 <__aeabi_dmul>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	6979      	ldr	r1, [r7, #20]
 80083aa:	e9c1 2300 	strd	r2, r3, [r1]
    pd = 0.5 / pd;
 80083ae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	494a      	ldr	r1, [pc, #296]	@ (80084e0 <ecompass+0x980>)
 80083b8:	f7f8 f9ec 	bl	8000794 <__aeabi_ddiv>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    O_a = pd * (R[2][1] - R[1][2]);
 80083c4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80083c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80083cc:	f7f7 ff00 	bl	80001d0 <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80083d8:	f7f8 f8b2 	bl	8000540 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    *O_c = pd * (R[1][0] + R[0][1]);
 80083e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083e8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80083ec:	f7f7 fef2 	bl	80001d4 <__adddf3>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4610      	mov	r0, r2
 80083f6:	4619      	mov	r1, r3
 80083f8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80083fc:	f7f8 f8a0 	bl	8000540 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	6939      	ldr	r1, [r7, #16]
 8008406:	e9c1 2300 	strd	r2, r3, [r1]
    *O_d = pd * (R[2][0] + R[0][2]);
 800840a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800840e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008412:	f7f7 fedf 	bl	80001d4 <__adddf3>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008422:	f7f8 f88d 	bl	8000540 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800842e:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8008432:	e0ac      	b.n	800858e <ecompass+0xa2e>
  case 3:
    pd = sqrt(pd);
 8008434:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8008438:	f004 f88a 	bl	800c550 <sqrt>
 800843c:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
    *O_c = 0.5 * pd;
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	4b26      	ldr	r3, [pc, #152]	@ (80084e0 <ecompass+0x980>)
 8008446:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800844a:	f7f8 f879 	bl	8000540 <__aeabi_dmul>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	6939      	ldr	r1, [r7, #16]
 8008454:	e9c1 2300 	strd	r2, r3, [r1]
    pd = 0.5 / pd;
 8008458:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800845c:	f04f 0000 	mov.w	r0, #0
 8008460:	491f      	ldr	r1, [pc, #124]	@ (80084e0 <ecompass+0x980>)
 8008462:	f7f8 f997 	bl	8000794 <__aeabi_ddiv>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    O_a = pd * (R[0][2] - R[2][0]);
 800846e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008472:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8008476:	f7f7 feab 	bl	80001d0 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008482:	f7f8 f85d 	bl	8000540 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    *O_b = pd * (R[1][0] + R[0][1]);
 800848e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008492:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008496:	f7f7 fe9d 	bl	80001d4 <__adddf3>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80084a6:	f7f8 f84b 	bl	8000540 <__aeabi_dmul>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	6979      	ldr	r1, [r7, #20]
 80084b0:	e9c1 2300 	strd	r2, r3, [r1]
    *O_d = pd * (R[2][1] + R[1][2]);
 80084b4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80084b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80084bc:	f7f7 fe8a 	bl	80001d4 <__adddf3>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80084cc:	f7f8 f838 	bl	8000540 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80084d8:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80084dc:	e057      	b.n	800858e <ecompass+0xa2e>
 80084de:	bf00      	nop
 80084e0:	3fe00000 	.word	0x3fe00000
  default:
    pd = sqrt(pd);
 80084e4:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 80084e8:	f004 f832 	bl	800c550 <sqrt>
 80084ec:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
    *O_d = 0.5 * pd;
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	4b47      	ldr	r3, [pc, #284]	@ (8008614 <ecompass+0xab4>)
 80084f6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80084fa:	f7f8 f821 	bl	8000540 <__aeabi_dmul>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8008506:	e9c1 2300 	strd	r2, r3, [r1]
    pd = 0.5 / pd;
 800850a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800850e:	f04f 0000 	mov.w	r0, #0
 8008512:	4940      	ldr	r1, [pc, #256]	@ (8008614 <ecompass+0xab4>)
 8008514:	f7f8 f93e 	bl	8000794 <__aeabi_ddiv>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    O_a = pd * (R[1][0] - R[0][1]);
 8008520:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008524:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008528:	f7f7 fe52 	bl	80001d0 <__aeabi_dsub>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008534:	f7f8 f804 	bl	8000540 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    *O_b = pd * (R[2][0] + R[0][2]);
 8008540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008544:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008548:	f7f7 fe44 	bl	80001d4 <__adddf3>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4610      	mov	r0, r2
 8008552:	4619      	mov	r1, r3
 8008554:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008558:	f7f7 fff2 	bl	8000540 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	6979      	ldr	r1, [r7, #20]
 8008562:	e9c1 2300 	strd	r2, r3, [r1]
    *O_c = pd * (R[2][1] + R[1][2]);
 8008566:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800856a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800856e:	f7f7 fe31 	bl	80001d4 <__adddf3>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800857e:	f7f7 ffdf 	bl	8000540 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	6939      	ldr	r1, [r7, #16]
 8008588:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 800858c:	bf00      	nop
  }
  if (O_a < 0.0) {
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800859a:	f7f8 fa43 	bl	8000a24 <__aeabi_dcmplt>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d02b      	beq.n	80085fc <ecompass+0xa9c>
    O_a = -O_a;
 80085a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	ed97 7b00 	vldr	d7, [r7]
 80085b8:	ed87 7b36 	vstr	d7, [r7, #216]	@ 0xd8
    *O_b = -*O_b;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	60ba      	str	r2, [r7, #8]
 80085c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80085d0:	ed83 7b00 	vstr	d7, [r3]
    *O_c = -*O_c;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	4692      	mov	sl, r2
 80085dc:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	e9c3 ab00 	strd	sl, fp, [r3]
    *O_d = -*O_d;
 80085e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	4690      	mov	r8, r2
 80085f0:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80085f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085f8:	e9c3 8900 	strd	r8, r9, [r3]
  }
  return O_a;
 80085fc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8008600:	ec43 2b17 	vmov	d7, r2, r3
}
 8008604:	eeb0 0a47 	vmov.f32	s0, s14
 8008608:	eef0 0a67 	vmov.f32	s1, s15
 800860c:	37e0      	adds	r7, #224	@ 0xe0
 800860e:	46bd      	mov	sp, r7
 8008610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008614:	3fe00000 	.word	0x3fe00000

08008618 <eye>:
/*
 * Arguments    : double b_I[6][6]
 * Return Type  : void
 */
static void eye(double b_I[6][6])
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  int k;
  memset(&b_I[0][0], 0, 36U * sizeof(double));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f003 feaa 	bl	800c382 <memset>
  for (k = 0; k < 6; k++) {
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e012      	b.n	800865a <eye+0x42>
    b_I[k][k] = 1.0;
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4613      	mov	r3, r2
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	4413      	add	r3, r2
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	18d1      	adds	r1, r2, r3
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	4b07      	ldr	r3, [pc, #28]	@ (800866c <eye+0x54>)
 8008650:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 6; k++) {
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3301      	adds	r3, #1
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b05      	cmp	r3, #5
 800865e:	dde9      	ble.n	8008634 <eye+0x1c>
  }
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	3ff00000 	.word	0x3ff00000

08008670 <mrdiv>:
 * Arguments    : double A[7][6]
 *                double B[7][7]
 * Return Type  : void
 */
static void mrdiv(double A[7][6], double B[7][7])
{
 8008670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008674:	b0f7      	sub	sp, #476	@ 0x1dc
 8008676:	af00      	add	r7, sp, #0
 8008678:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800867c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008680:	6018      	str	r0, [r3, #0]
 8008682:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008686:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800868a:	6019      	str	r1, [r3, #0]
  int jA;
  int jBcol;
  int jp1j;
  int k;
  signed char ipiv[7];
  for (i = 0; i < 7; i++) {
 800868c:	2300      	movs	r3, #0
 800868e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8008692:	e043      	b.n	800871c <mrdiv+0xac>
    for (i1 = 0; i1 < 7; i1++) {
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800869a:	e027      	b.n	80086ec <mrdiv+0x7c>
      b_A[i][i1] = B[i][i1];
 800869c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	461a      	mov	r2, r3
 80086aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80086ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	441a      	add	r2, r3
 80086b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80086c6:	f5a3 76e4 	sub.w	r6, r3, #456	@ 0x1c8
 80086ca:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4433      	add	r3, r6
 80086de:	e9c3 0100 	strd	r0, r1, [r3]
    for (i1 = 0; i1 < 7; i1++) {
 80086e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80086e6:	3301      	adds	r3, #1
 80086e8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80086ec:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80086f0:	2b06      	cmp	r3, #6
 80086f2:	ddd3      	ble.n	800869c <mrdiv+0x2c>
    }
    ipiv[i] = (signed char)(i + 1);
 80086f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	3301      	adds	r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	b259      	sxtb	r1, r3
 8008700:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008704:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8008708:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800870c:	4413      	add	r3, r2
 800870e:	460a      	mov	r2, r1
 8008710:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 7; i++) {
 8008712:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008716:	3301      	adds	r3, #1
 8008718:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800871c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008720:	2b06      	cmp	r3, #6
 8008722:	ddb7      	ble.n	8008694 <mrdiv+0x24>
  }
  for (j = 0; j < 6; j++) {
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800872a:	e1a1      	b.n	8008a70 <mrdiv+0x400>
    int b_tmp;
    int mmj_tmp;
    mmj_tmp = 5 - j;
 800872c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008730:	f1c3 0305 	rsb	r3, r3, #5
 8008734:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    b_tmp = j << 3;
 8008738:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    jp1j = b_tmp + 2;
 8008742:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008746:	3302      	adds	r3, #2
 8008748:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    jA = 8 - j;
 800874c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008750:	f1c3 0308 	rsb	r3, r3, #8
 8008754:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    jBcol = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    smax = fabs((&b_A[0][0])[b_tmp]);
 800875e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	f107 0210 	add.w	r2, r7, #16
 8008768:	4413      	add	r3, r2
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4611      	mov	r1, r2
 8008770:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
 8008774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008778:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    for (k = 2; k < jA; k++) {
 800877c:	2302      	movs	r3, #2
 800877e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008782:	e02b      	b.n	80087dc <mrdiv+0x16c>
      double s;
      s = fabs((&b_A[0][0])[(b_tmp + k) - 1]);
 8008784:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8008788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800878c:	4413      	add	r3, r2
 800878e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008792:	3b01      	subs	r3, #1
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	f107 0210 	add.w	r2, r7, #16
 800879a:	4413      	add	r3, r2
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 80087a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087aa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
      if (s > smax) {
 80087ae:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80087b2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80087b6:	f7f8 f953 	bl	8000a60 <__aeabi_dcmpgt>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d008      	beq.n	80087d2 <mrdiv+0x162>
        jBcol = k - 1;
 80087c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        smax = s;
 80087ca:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80087ce:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    for (k = 2; k < jA; k++) {
 80087d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80087d6:	3301      	adds	r3, #1
 80087d8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80087dc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80087e0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80087e4:	429a      	cmp	r2, r3
 80087e6:	dbcd      	blt.n	8008784 <mrdiv+0x114>
      }
    }
    if ((&b_A[0][0])[b_tmp + jBcol] != 0.0) {
 80087e8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80087ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	f107 0210 	add.w	r2, r7, #16
 80087f8:	4413      	add	r3, r2
 80087fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	f7f8 f903 	bl	8000a10 <__aeabi_dcmpeq>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 809b 	bne.w	8008948 <mrdiv+0x2d8>
      if (jBcol != 0) {
 8008812:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d05a      	beq.n	80088d0 <mrdiv+0x260>
        jA = j + jBcol;
 800881a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800881e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008822:	4413      	add	r3, r2
 8008824:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        ipiv[j] = (signed char)(jA + 1);
 8008828:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800882c:	b2db      	uxtb	r3, r3
 800882e:	3301      	adds	r3, #1
 8008830:	b2db      	uxtb	r3, r3
 8008832:	b259      	sxtb	r1, r3
 8008834:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008838:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 800883c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008840:	4413      	add	r3, r2
 8008842:	460a      	mov	r2, r1
 8008844:	701a      	strb	r2, [r3, #0]
        for (k = 0; k < 7; k++) {
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800884c:	e03c      	b.n	80088c8 <mrdiv+0x258>
          jBcol = j + k * 7;
 800884e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008852:	4613      	mov	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800885c:	4413      	add	r3, r2
 800885e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
          smax = (&b_A[0][0])[jBcol];
 8008862:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	f107 0210 	add.w	r2, r7, #16
 800886c:	4413      	add	r3, r2
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
          i = jA + k * 7;
 8008876:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008884:	4413      	add	r3, r2
 8008886:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
          (&b_A[0][0])[jBcol] = (&b_A[0][0])[i];
 800888a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	f107 0210 	add.w	r2, r7, #16
 8008894:	4413      	add	r3, r2
 8008896:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800889a:	00d2      	lsls	r2, r2, #3
 800889c:	f107 0110 	add.w	r1, r7, #16
 80088a0:	4411      	add	r1, r2
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	e9c1 2300 	strd	r2, r3, [r1]
          (&b_A[0][0])[i] = smax;
 80088aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	f107 0210 	add.w	r2, r7, #16
 80088b4:	18d1      	adds	r1, r2, r3
 80088b6:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80088ba:	e9c1 2300 	strd	r2, r3, [r1]
        for (k = 0; k < 7; k++) {
 80088be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80088c2:	3301      	adds	r3, #1
 80088c4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80088c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	ddbe      	ble.n	800884e <mrdiv+0x1de>
        }
      }
      i = (b_tmp - j) + 7;
 80088d0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80088d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	3307      	adds	r3, #7
 80088dc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
      for (b_i = jp1j; b_i <= i; b_i++) {
 80088e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80088e4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80088e8:	e028      	b.n	800893c <mrdiv+0x2cc>
        (&b_A[0][0])[b_i - 1] /= (&b_A[0][0])[b_tmp];
 80088ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80088ee:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80088f2:	3b01      	subs	r3, #1
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	f107 0210 	add.w	r2, r7, #16
 80088fa:	4413      	add	r3, r2
 80088fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008900:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	f107 0210 	add.w	r2, r7, #16
 800890a:	4413      	add	r3, r2
 800890c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008910:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008914:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008918:	3b01      	subs	r3, #1
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	f107 0210 	add.w	r2, r7, #16
 8008920:	18d6      	adds	r6, r2, r3
 8008922:	4642      	mov	r2, r8
 8008924:	464b      	mov	r3, r9
 8008926:	f7f7 ff35 	bl	8000794 <__aeabi_ddiv>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9c6 2300 	strd	r2, r3, [r6]
      for (b_i = jp1j; b_i <= i; b_i++) {
 8008932:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008936:	3301      	adds	r3, #1
 8008938:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800893c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008940:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008944:	429a      	cmp	r2, r3
 8008946:	ddd0      	ble.n	80088ea <mrdiv+0x27a>
      }
    }
    jA = b_tmp;
 8008948:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800894c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    for (jBcol = 0; jBcol <= mmj_tmp; jBcol++) {
 8008950:	2300      	movs	r3, #0
 8008952:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8008956:	e07f      	b.n	8008a58 <mrdiv+0x3e8>
      smax = (&b_A[0][0])[(b_tmp + jBcol * 7) + 7];
 8008958:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	1a9a      	subs	r2, r3, r2
 8008962:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8008966:	4413      	add	r3, r2
 8008968:	3307      	adds	r3, #7
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	f107 0210 	add.w	r2, r7, #16
 8008970:	4413      	add	r3, r2
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
      if (smax != 0.0) {
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8008986:	f7f8 f843 	bl	8000a10 <__aeabi_dcmpeq>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d159      	bne.n	8008a44 <mrdiv+0x3d4>
        i = jA + 9;
 8008990:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008994:	3309      	adds	r3, #9
 8008996:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        i1 = (jA - j) + 14;
 800899a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800899e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	330e      	adds	r3, #14
 80089a6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (jp1j = i; jp1j <= i1; jp1j++) {
 80089aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80089ae:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80089b2:	e041      	b.n	8008a38 <mrdiv+0x3c8>
          (&b_A[0][0])[jp1j - 1] +=
 80089b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80089b8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80089bc:	3b01      	subs	r3, #1
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	f107 0210 	add.w	r2, r7, #16
 80089c4:	4413      	add	r3, r2
 80089c6:	e9d3 8900 	ldrd	r8, r9, [r3]
              (&b_A[0][0])[((b_tmp + jp1j) - jA) - 8] * -smax;
 80089ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80089ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80089d2:	441a      	add	r2, r3
 80089d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80089de:	3b08      	subs	r3, #8
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	f107 0210 	add.w	r2, r7, #16
 80089e6:	4413      	add	r3, r2
 80089e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089ec:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 80089f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80089f4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80089f8:	4622      	mov	r2, r4
 80089fa:	462b      	mov	r3, r5
 80089fc:	f7f7 fda0 	bl	8000540 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
          (&b_A[0][0])[jp1j - 1] +=
 8008a08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008a0c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008a10:	3b01      	subs	r3, #1
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	f107 0210 	add.w	r2, r7, #16
 8008a18:	18d6      	adds	r6, r2, r3
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4649      	mov	r1, r9
 8008a22:	f7f7 fbd7 	bl	80001d4 <__adddf3>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9c6 2300 	strd	r2, r3, [r6]
        for (jp1j = i; jp1j <= i1; jp1j++) {
 8008a2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008a32:	3301      	adds	r3, #1
 8008a34:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8008a38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8008a3c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a40:	429a      	cmp	r2, r3
 8008a42:	ddb7      	ble.n	80089b4 <mrdiv+0x344>
        }
      }
      jA += 7;
 8008a44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a48:	3307      	adds	r3, #7
 8008a4a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    for (jBcol = 0; jBcol <= mmj_tmp; jBcol++) {
 8008a4e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008a52:	3301      	adds	r3, #1
 8008a54:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8008a58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8008a5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008a60:	429a      	cmp	r2, r3
 8008a62:	f77f af79 	ble.w	8008958 <mrdiv+0x2e8>
  for (j = 0; j < 6; j++) {
 8008a66:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008a70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008a74:	2b05      	cmp	r3, #5
 8008a76:	f77f ae59 	ble.w	800872c <mrdiv+0xbc>
    }
  }
  for (j = 0; j < 7; j++) {
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008a80:	e0d1      	b.n	8008c26 <mrdiv+0x5b6>
    jBcol = 6 * j - 1;
 8008a82:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008a86:	4613      	mov	r3, r2
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    jA = 7 * j;
 8008a94:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    for (k = 0; k < j; k++) {
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008aa8:	e06d      	b.n	8008b86 <mrdiv+0x516>
      jp1j = 6 * k;
 8008aaa:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008aae:	4613      	mov	r3, r2
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	4413      	add	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      smax = (&b_A[0][0])[k + jA];
 8008aba:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008abe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008ac2:	4413      	add	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	f107 0210 	add.w	r2, r7, #16
 8008aca:	4413      	add	r3, r2
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
      if (smax != 0.0) {
 8008ad4:	f04f 0200 	mov.w	r2, #0
 8008ad8:	f04f 0300 	mov.w	r3, #0
 8008adc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8008ae0:	f7f7 ff96 	bl	8000a10 <__aeabi_dcmpeq>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d148      	bne.n	8008b7c <mrdiv+0x50c>
        for (b_i = 0; b_i < 6; b_i++) {
 8008aea:	2300      	movs	r3, #0
 8008aec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008af0:	e040      	b.n	8008b74 <mrdiv+0x504>
          i = (b_i + jBcol) + 1;
 8008af2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008af6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008afa:	4413      	add	r3, r2
 8008afc:	3301      	adds	r3, #1
 8008afe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
          (&A[0][0])[i] -= smax * (&A[0][0])[b_i + jp1j];
 8008b02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	4413      	add	r3, r2
 8008b14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8008b26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008b2a:	440b      	add	r3, r1
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4413      	add	r3, r2
 8008b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b34:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8008b38:	f7f7 fd02 	bl	8000540 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b48:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	18d6      	adds	r6, r2, r3
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f7f7 fb37 	bl	80001d0 <__aeabi_dsub>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9c6 2300 	strd	r2, r3, [r6]
        for (b_i = 0; b_i < 6; b_i++) {
 8008b6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008b6e:	3301      	adds	r3, #1
 8008b70:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008b74:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	ddba      	ble.n	8008af2 <mrdiv+0x482>
    for (k = 0; k < j; k++) {
 8008b7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008b80:	3301      	adds	r3, #1
 8008b82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008b86:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008b8a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	db8b      	blt.n	8008aaa <mrdiv+0x43a>
        }
      }
    }
    smax = 1.0 / (&b_A[0][0])[j + jA];
 8008b92:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008b96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b9a:	4413      	add	r3, r2
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	f107 0210 	add.w	r2, r7, #16
 8008ba2:	4413      	add	r3, r2
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f04f 0000 	mov.w	r0, #0
 8008bac:	49af      	ldr	r1, [pc, #700]	@ (8008e6c <mrdiv+0x7fc>)
 8008bae:	f7f7 fdf1 	bl	8000794 <__aeabi_ddiv>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    for (b_i = 0; b_i < 6; b_i++) {
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008bc0:	e028      	b.n	8008c14 <mrdiv+0x5a4>
      i = (b_i + jBcol) + 1;
 8008bc2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008bc6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008bca:	4413      	add	r3, r2
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
      (&A[0][0])[i] *= smax;
 8008bd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	4413      	add	r3, r2
 8008be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008be8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	18d4      	adds	r4, r2, r3
 8008bfa:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8008bfe:	f7f7 fc9f 	bl	8000540 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_i = 0; b_i < 6; b_i++) {
 8008c0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008c14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	ddd2      	ble.n	8008bc2 <mrdiv+0x552>
  for (j = 0; j < 7; j++) {
 8008c1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008c20:	3301      	adds	r3, #1
 8008c22:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008c26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008c2a:	2b06      	cmp	r3, #6
 8008c2c:	f77f af29 	ble.w	8008a82 <mrdiv+0x412>
    }
  }
  for (j = 6; j >= 0; j--) {
 8008c30:	2306      	movs	r3, #6
 8008c32:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008c36:	e092      	b.n	8008d5e <mrdiv+0x6ee>
    jBcol = 6 * j - 1;
 8008c38:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	4413      	add	r3, r2
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	3b01      	subs	r3, #1
 8008c46:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    jA = 7 * j - 1;
 8008c4a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008c4e:	4613      	mov	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	3b01      	subs	r3, #1
 8008c56:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    i = j + 2;
 8008c5a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008c5e:	3302      	adds	r3, #2
 8008c60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    for (k = i; k < 8; k++) {
 8008c64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008c68:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008c6c:	e06e      	b.n	8008d4c <mrdiv+0x6dc>
      jp1j = 6 * (k - 1);
 8008c6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008c72:	1e5a      	subs	r2, r3, #1
 8008c74:	4613      	mov	r3, r2
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4413      	add	r3, r2
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      smax = (&b_A[0][0])[k + jA];
 8008c80:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008c84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008c88:	4413      	add	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	f107 0210 	add.w	r2, r7, #16
 8008c90:	4413      	add	r3, r2
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
      if (smax != 0.0) {
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8008ca6:	f7f7 feb3 	bl	8000a10 <__aeabi_dcmpeq>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d148      	bne.n	8008d42 <mrdiv+0x6d2>
        for (b_i = 0; b_i < 6; b_i++) {
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008cb6:	e040      	b.n	8008d3a <mrdiv+0x6ca>
          i1 = (b_i + jBcol) + 1;
 8008cb8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008cbc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
          (&A[0][0])[i1] -= smax * (&A[0][0])[b_i + jp1j];
 8008cc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ccc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008cde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ce2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8008cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008cf0:	440b      	add	r3, r1
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cfa:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8008cfe:	f7f7 fc1f 	bl	8000540 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d0e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	18d6      	adds	r6, r2, r3
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4620      	mov	r0, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 fa54 	bl	80001d0 <__aeabi_dsub>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	e9c6 2300 	strd	r2, r3, [r6]
        for (b_i = 0; b_i < 6; b_i++) {
 8008d30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008d34:	3301      	adds	r3, #1
 8008d36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008d3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	ddba      	ble.n	8008cb8 <mrdiv+0x648>
    for (k = i; k < 8; k++) {
 8008d42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008d46:	3301      	adds	r3, #1
 8008d48:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008d4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008d50:	2b07      	cmp	r3, #7
 8008d52:	dd8c      	ble.n	8008c6e <mrdiv+0x5fe>
  for (j = 6; j >= 0; j--) {
 8008d54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008d5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f6bf af68 	bge.w	8008c38 <mrdiv+0x5c8>
        }
      }
    }
  }
  for (j = 5; j >= 0; j--) {
 8008d68:	2305      	movs	r3, #5
 8008d6a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008d6e:	e072      	b.n	8008e56 <mrdiv+0x7e6>
    signed char i2;
    i2 = ipiv[j];
 8008d70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d74:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8008d78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008d7c:	4413      	add	r3, r2
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
    if (i2 != j + 1) {
 8008d84:	f997 21af 	ldrsb.w	r2, [r7, #431]	@ 0x1af
 8008d88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d05c      	beq.n	8008e4c <mrdiv+0x7dc>
      for (b_i = 0; b_i < 6; b_i++) {
 8008d92:	2300      	movs	r3, #0
 8008d94:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008d98:	e054      	b.n	8008e44 <mrdiv+0x7d4>
        smax = A[j][b_i];
 8008d9a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	461a      	mov	r2, r3
 8008da8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	441a      	add	r2, r3
 8008db4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	4413      	add	r3, r2
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
        A[j][b_i] = A[i2 - 1][b_i];
 8008dc4:	f997 21af 	ldrsb.w	r2, [r7, #431]	@ 0x1af
 8008dc8:	4613      	mov	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	4413      	add	r3, r2
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	3b30      	subs	r3, #48	@ 0x30
 8008dd2:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008dd6:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	18d1      	adds	r1, r2, r3
 8008dde:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	461a      	mov	r2, r3
 8008dec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008df0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	1898      	adds	r0, r3, r2
 8008df8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	440b      	add	r3, r1
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8008e08:	00c9      	lsls	r1, r1, #3
 8008e0a:	4401      	add	r1, r0
 8008e0c:	e9c1 2300 	strd	r2, r3, [r1]
        A[i2 - 1][b_i] = smax;
 8008e10:	f997 21af 	ldrsb.w	r2, [r7, #431]	@ 0x1af
 8008e14:	4613      	mov	r3, r2
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	4413      	add	r3, r2
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	3b30      	subs	r3, #48	@ 0x30
 8008e1e:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008e22:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	441a      	add	r2, r3
 8008e2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	18d1      	adds	r1, r2, r3
 8008e32:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8008e36:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_i = 0; b_i < 6; b_i++) {
 8008e3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008e44:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008e48:	2b05      	cmp	r3, #5
 8008e4a:	dda6      	ble.n	8008d9a <mrdiv+0x72a>
  for (j = 5; j >= 0; j--) {
 8008e4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008e50:	3b01      	subs	r3, #1
 8008e52:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008e56:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da88      	bge.n	8008d70 <mrdiv+0x700>
      }
    }
  }
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8008e66:	46bd      	mov	sp, r7
 8008e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6c:	3ff00000 	.word	0x3ff00000

08008e70 <quat2eul>:
 * Arguments    : const double q[4]
 *                double eul[3]
 * Return Type  : void
 */
static void quat2eul(const double q[4], double eul[3])
{
 8008e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e74:	ed2d 8b02 	vpush	{d8}
 8008e78:	b090      	sub	sp, #64	@ 0x40
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  double c;
  double unnamed_idx_0_tmp;
  double z1_idx_0;
  double z1_idx_1;
  double z1_idx_2;
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	ed93 7b00 	vldr	d7, [r3]
 8008e86:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 8009128 <quat2eul+0x2b8>
 8008e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8008e8e:	eef0 0a67 	vmov.f32	s1, s15
 8008e92:	f000 ff09 	bl	8009ca8 <rt_powd_snf>
 8008e96:	ec5b ab10 	vmov	sl, fp, d0
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	ed93 7b00 	vldr	d7, [r3]
 8008ea2:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8009128 <quat2eul+0x2b8>
 8008ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eaa:	eef0 0a67 	vmov.f32	s1, s15
 8008eae:	f000 fefb 	bl	8009ca8 <rt_powd_snf>
 8008eb2:	ec53 2b10 	vmov	r2, r3, d0
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	4659      	mov	r1, fp
 8008eba:	f7f7 f98b 	bl	80001d4 <__adddf3>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4692      	mov	sl, r2
 8008ec4:	469b      	mov	fp, r3
                  rt_powd_snf(q[2], 2.0)) +
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3310      	adds	r3, #16
 8008eca:	ed93 7b00 	vldr	d7, [r3]
 8008ece:	ed9f 1b96 	vldr	d1, [pc, #600]	@ 8009128 <quat2eul+0x2b8>
 8008ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8008ed6:	eef0 0a67 	vmov.f32	s1, s15
 8008eda:	f000 fee5 	bl	8009ca8 <rt_powd_snf>
 8008ede:	ec53 2b10 	vmov	r2, r3, d0
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f7f7 f975 	bl	80001d4 <__adddf3>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4692      	mov	sl, r2
 8008ef0:	469b      	mov	fp, r3
                 rt_powd_snf(q[3], 2.0));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	ed93 7b00 	vldr	d7, [r3]
 8008efa:	ed9f 1b8b 	vldr	d1, [pc, #556]	@ 8009128 <quat2eul+0x2b8>
 8008efe:	eeb0 0a47 	vmov.f32	s0, s14
 8008f02:	eef0 0a67 	vmov.f32	s1, s15
 8008f06:	f000 fecf 	bl	8009ca8 <rt_powd_snf>
 8008f0a:	ec53 2b10 	vmov	r2, r3, d0
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8008f0e:	4650      	mov	r0, sl
 8008f10:	4659      	mov	r1, fp
 8008f12:	f7f7 f95f 	bl	80001d4 <__adddf3>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	ec43 2b17 	vmov	d7, r2, r3
 8008f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f22:	eef0 0a67 	vmov.f32	s1, s15
 8008f26:	f003 fb13 	bl	800c550 <sqrt>
 8008f2a:	ec53 2b10 	vmov	r2, r3, d0
 8008f2e:	f04f 0000 	mov.w	r0, #0
 8008f32:	4983      	ldr	r1, [pc, #524]	@ (8009140 <quat2eul+0x2d0>)
 8008f34:	f7f7 fc2e 	bl	8000794 <__aeabi_ddiv>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  z1_idx_0 = q[0] * b;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008f4a:	f7f7 faf9 	bl	8000540 <__aeabi_dmul>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9c7 2306 	strd	r2, r3, [r7, #24]
  z1_idx_1 = q[1] * b;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008f62:	f7f7 faed 	bl	8000540 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  z1_idx_2 = q[2] * b;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3310      	adds	r3, #16
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008f7a:	f7f7 fae1 	bl	8000540 <__aeabi_dmul>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	e9c7 2302 	strd	r2, r3, [r7, #8]
  c = q[3] * b;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3318      	adds	r3, #24
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008f92:	f7f7 fad5 	bl	8000540 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  unnamed_idx_0_tmp = z1_idx_1 * c * 2.0 - z1_idx_0 * z1_idx_2 * 2.0;
 8008f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008fa6:	f7f7 facb 	bl	8000540 <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	f7f7 f90d 	bl	80001d4 <__adddf3>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4692      	mov	sl, r2
 8008fc0:	469b      	mov	fp, r3
 8008fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008fca:	f7f7 fab9 	bl	8000540 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	f7f7 f8fb 	bl	80001d4 <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	f7f7 f8f3 	bl	80001d0 <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (unnamed_idx_0_tmp > 1.0) {
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	4b52      	ldr	r3, [pc, #328]	@ (8009140 <quat2eul+0x2d0>)
 8008ff8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ffc:	f7f7 fd30 	bl	8000a60 <__aeabi_dcmpgt>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <quat2eul+0x1a0>
    unnamed_idx_0_tmp = 1.0;
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	4b4d      	ldr	r3, [pc, #308]	@ (8009140 <quat2eul+0x2d0>)
 800900c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }
  if (unnamed_idx_0_tmp < -1.0) {
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	4b4b      	ldr	r3, [pc, #300]	@ (8009144 <quat2eul+0x2d4>)
 8009016:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800901a:	f7f7 fd03 	bl	8000a24 <__aeabi_dcmplt>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <quat2eul+0x1be>
    unnamed_idx_0_tmp = -1.0;
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	4b46      	ldr	r3, [pc, #280]	@ (8009144 <quat2eul+0x2d4>)
 800902a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }
  if ((unnamed_idx_0_tmp < 0.0) &&
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800903a:	f7f7 fcf3 	bl	8000a24 <__aeabi_dcmplt>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d033      	beq.n	80090ac <quat2eul+0x23c>
      (fabs(unnamed_idx_0_tmp + 1.0) < 2.2204460492503131E-15)) {
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	4b3d      	ldr	r3, [pc, #244]	@ (8009140 <quat2eul+0x2d0>)
 800904a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800904e:	f7f7 f8c1 	bl	80001d4 <__adddf3>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4690      	mov	r8, r2
 8009058:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
  if ((unnamed_idx_0_tmp < 0.0) &&
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	4b39      	ldr	r3, [pc, #228]	@ (8009148 <quat2eul+0x2d8>)
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fcdd 	bl	8000a24 <__aeabi_dcmplt>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01d      	beq.n	80090ac <quat2eul+0x23c>
    a = -2.0 * b_atan2(z1_idx_1, z1_idx_0);
 8009070:	ed97 1b06 	vldr	d1, [r7, #24]
 8009074:	ed97 0b04 	vldr	d0, [r7, #16]
 8009078:	f7fe f99a 	bl	80073b0 <b_atan2>
 800907c:	ec51 0b10 	vmov	r0, r1, d0
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009088:	f7f7 fa5a 	bl	8000540 <__aeabi_dmul>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    c = 0.0;
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    b = 1.5707963267948966;
 80090a0:	a323      	add	r3, pc, #140	@ (adr r3, 8009130 <quat2eul+0x2c0>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80090aa:	e115      	b.n	80092d8 <quat2eul+0x468>
  } else if ((unnamed_idx_0_tmp > 0.0) &&
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090b8:	f7f7 fcd2 	bl	8000a60 <__aeabi_dcmpgt>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d044      	beq.n	800914c <quat2eul+0x2dc>
             (fabs(unnamed_idx_0_tmp - 1.0) < 2.2204460492503131E-15)) {
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009140 <quat2eul+0x2d0>)
 80090c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090cc:	f7f7 f880 	bl	80001d0 <__aeabi_dsub>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
  } else if ((unnamed_idx_0_tmp > 0.0) &&
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <quat2eul+0x2d8>)
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 fc9e 	bl	8000a24 <__aeabi_dcmplt>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d02e      	beq.n	800914c <quat2eul+0x2dc>
    a = 2.0 * b_atan2(z1_idx_1, z1_idx_0);
 80090ee:	ed97 1b06 	vldr	d1, [r7, #24]
 80090f2:	ed97 0b04 	vldr	d0, [r7, #16]
 80090f6:	f7fe f95b 	bl	80073b0 <b_atan2>
 80090fa:	ec51 0b10 	vmov	r0, r1, d0
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	f7f7 f867 	bl	80001d4 <__adddf3>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    c = 0.0;
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    b = -1.5707963267948966;
 800911a:	a307      	add	r3, pc, #28	@ (adr r3, 8009138 <quat2eul+0x2c8>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8009124:	e0d8      	b.n	80092d8 <quat2eul+0x468>
 8009126:	bf00      	nop
 8009128:	00000000 	.word	0x00000000
 800912c:	40000000 	.word	0x40000000
 8009130:	54442d18 	.word	0x54442d18
 8009134:	3ff921fb 	.word	0x3ff921fb
 8009138:	54442d18 	.word	0x54442d18
 800913c:	bff921fb 	.word	0xbff921fb
 8009140:	3ff00000 	.word	0x3ff00000
 8009144:	bff00000 	.word	0xbff00000
 8009148:	3ce40000 	.word	0x3ce40000
  } else {
    b = z1_idx_0 * z1_idx_0 * 2.0 - 1.0;
 800914c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009150:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009154:	f7f7 f9f4 	bl	8000540 <__aeabi_dmul>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	f7f7 f836 	bl	80001d4 <__adddf3>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4610      	mov	r0, r2
 800916e:	4619      	mov	r1, r3
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	4b65      	ldr	r3, [pc, #404]	@ (800930c <quat2eul+0x49c>)
 8009176:	f7f7 f82b 	bl	80001d0 <__aeabi_dsub>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    a = b_atan2(z1_idx_0 * c * 2.0 + z1_idx_1 * z1_idx_2 * 2.0,
 8009182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800918a:	f7f7 f9d9 	bl	8000540 <__aeabi_dmul>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4610      	mov	r0, r2
 8009194:	4619      	mov	r1, r3
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	f7f7 f81b 	bl	80001d4 <__adddf3>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4614      	mov	r4, r2
 80091a4:	461d      	mov	r5, r3
 80091a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091ae:	f7f7 f9c7 	bl	8000540 <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	f7f7 f809 	bl	80001d4 <__adddf3>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 f803 	bl	80001d4 <__adddf3>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	ec43 2b18 	vmov	d8, r2, r3
                b + z1_idx_1 * z1_idx_1 * 2.0);
 80091d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80091da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091de:	f7f7 f9af 	bl	8000540 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	f7f6 fff1 	bl	80001d4 <__adddf3>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
    a = b_atan2(z1_idx_0 * c * 2.0 + z1_idx_1 * z1_idx_2 * 2.0,
 80091fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80091fe:	f7f6 ffe9 	bl	80001d4 <__adddf3>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	ec43 2b17 	vmov	d7, r2, r3
 800920a:	eeb0 1a47 	vmov.f32	s2, s14
 800920e:	eef0 1a67 	vmov.f32	s3, s15
 8009212:	eeb0 0a48 	vmov.f32	s0, s16
 8009216:	eef0 0a68 	vmov.f32	s1, s17
 800921a:	f7fe f8c9 	bl	80073b0 <b_atan2>
 800921e:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    c = b_atan2(z1_idx_0 * z1_idx_1 * 2.0 + z1_idx_2 * c * 2.0,
 8009222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009226:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800922a:	f7f7 f989 	bl	8000540 <__aeabi_dmul>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4610      	mov	r0, r2
 8009234:	4619      	mov	r1, r3
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	f7f6 ffcb 	bl	80001d4 <__adddf3>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4614      	mov	r4, r2
 8009244:	461d      	mov	r5, r3
 8009246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800924a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800924e:	f7f7 f977 	bl	8000540 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	f7f6 ffb9 	bl	80001d4 <__adddf3>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f6 ffb3 	bl	80001d4 <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	ec43 2b18 	vmov	d8, r2, r3
                b + c * c * 2.0);
 8009276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800927a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800927e:	f7f7 f95f 	bl	8000540 <__aeabi_dmul>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	f7f6 ffa1 	bl	80001d4 <__adddf3>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4610      	mov	r0, r2
 8009298:	4619      	mov	r1, r3
    c = b_atan2(z1_idx_0 * z1_idx_1 * 2.0 + z1_idx_2 * c * 2.0,
 800929a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800929e:	f7f6 ff99 	bl	80001d4 <__adddf3>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	ec43 2b17 	vmov	d7, r2, r3
 80092aa:	eeb0 1a47 	vmov.f32	s2, s14
 80092ae:	eef0 1a67 	vmov.f32	s3, s15
 80092b2:	eeb0 0a48 	vmov.f32	s0, s16
 80092b6:	eef0 0a68 	vmov.f32	s1, s17
 80092ba:	f7fe f879 	bl	80073b0 <b_atan2>
 80092be:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    b = -asin(unnamed_idx_0_tmp);
 80092c2:	ed97 0b08 	vldr	d0, [r7, #32]
 80092c6:	f003 f89d 	bl	800c404 <asin>
 80092ca:	ec53 2b10 	vmov	r2, r3, d0
 80092ce:	4611      	mov	r1, r2
 80092d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80092d2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  eul[0] = a;
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092de:	e9c1 2300 	strd	r2, r3, [r1]
  eul[1] = b;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f103 0108 	add.w	r1, r3, #8
 80092e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80092ec:	e9c1 2300 	strd	r2, r3, [r1]
  eul[2] = c;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	f103 0110 	add.w	r1, r3, #16
 80092f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092fa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80092fe:	bf00      	nop
 8009300:	3740      	adds	r7, #64	@ 0x40
 8009302:	46bd      	mov	sp, r7
 8009304:	ecbd 8b02 	vpop	{d8}
 8009308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800930c:	3ff00000 	.word	0x3ff00000

08009310 <quat2rotm>:
 * Arguments    : const double q[4]
 *                double R[3][3]
 * Return Type  : void
 */
static void quat2rotm(const double q[4], double R[3][3])
{
 8009310:	b5b0      	push	{r4, r5, r7, lr}
 8009312:	b0aa      	sub	sp, #168	@ 0xa8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  double normRowMatrix_idx_0;
  double normRowMatrix_idx_1;
  double normRowMatrix_idx_2;
  double tempR_tmp;
  int k;
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	ed93 7b00 	vldr	d7, [r3]
 8009320:	ed9f 1bbb 	vldr	d1, [pc, #748]	@ 8009610 <quat2rotm+0x300>
 8009324:	eeb0 0a47 	vmov.f32	s0, s14
 8009328:	eef0 0a67 	vmov.f32	s1, s15
 800932c:	f000 fcbc 	bl	8009ca8 <rt_powd_snf>
 8009330:	ec55 4b10 	vmov	r4, r5, d0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3308      	adds	r3, #8
 8009338:	ed93 7b00 	vldr	d7, [r3]
 800933c:	ed9f 1bb4 	vldr	d1, [pc, #720]	@ 8009610 <quat2rotm+0x300>
 8009340:	eeb0 0a47 	vmov.f32	s0, s14
 8009344:	eef0 0a67 	vmov.f32	s1, s15
 8009348:	f000 fcae 	bl	8009ca8 <rt_powd_snf>
 800934c:	ec53 2b10 	vmov	r2, r3, d0
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7f6 ff3e 	bl	80001d4 <__adddf3>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4614      	mov	r4, r2
 800935e:	461d      	mov	r5, r3
                  rt_powd_snf(q[2], 2.0)) +
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3310      	adds	r3, #16
 8009364:	ed93 7b00 	vldr	d7, [r3]
 8009368:	ed9f 1ba9 	vldr	d1, [pc, #676]	@ 8009610 <quat2rotm+0x300>
 800936c:	eeb0 0a47 	vmov.f32	s0, s14
 8009370:	eef0 0a67 	vmov.f32	s1, s15
 8009374:	f000 fc98 	bl	8009ca8 <rt_powd_snf>
 8009378:	ec53 2b10 	vmov	r2, r3, d0
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f6 ff28 	bl	80001d4 <__adddf3>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4614      	mov	r4, r2
 800938a:	461d      	mov	r5, r3
                 rt_powd_snf(q[3], 2.0));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3318      	adds	r3, #24
 8009390:	ed93 7b00 	vldr	d7, [r3]
 8009394:	ed9f 1b9e 	vldr	d1, [pc, #632]	@ 8009610 <quat2rotm+0x300>
 8009398:	eeb0 0a47 	vmov.f32	s0, s14
 800939c:	eef0 0a67 	vmov.f32	s1, s15
 80093a0:	f000 fc82 	bl	8009ca8 <rt_powd_snf>
 80093a4:	ec53 2b10 	vmov	r2, r3, d0
  b = 1.0 / sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 80093a8:	4620      	mov	r0, r4
 80093aa:	4629      	mov	r1, r5
 80093ac:	f7f6 ff12 	bl	80001d4 <__adddf3>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	ec43 2b17 	vmov	d7, r2, r3
 80093b8:	eeb0 0a47 	vmov.f32	s0, s14
 80093bc:	eef0 0a67 	vmov.f32	s1, s15
 80093c0:	f003 f8c6 	bl	800c550 <sqrt>
 80093c4:	ec53 2b10 	vmov	r2, r3, d0
 80093c8:	f04f 0000 	mov.w	r0, #0
 80093cc:	4992      	ldr	r1, [pc, #584]	@ (8009618 <quat2rotm+0x308>)
 80093ce:	f7f7 f9e1 	bl	8000794 <__aeabi_ddiv>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  normRowMatrix_idx_0 = q[0] * b;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093e4:	f7f7 f8ac 	bl	8000540 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  normRowMatrix_idx_1 = q[1] * b;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3308      	adds	r3, #8
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093fc:	f7f7 f8a0 	bl	8000540 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  normRowMatrix_idx_2 = q[2] * b;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3310      	adds	r3, #16
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009414:	f7f7 f894 	bl	8000540 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  b *= q[3];
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3318      	adds	r3, #24
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800942c:	f7f7 f888 	bl	8000540 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  tempR_tmp = b * b;
 8009438:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800943c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009440:	f7f7 f87e 	bl	8000540 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  b_tempR_tmp = normRowMatrix_idx_2 * normRowMatrix_idx_2;
 800944c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009450:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009454:	f7f7 f874 	bl	8000540 <__aeabi_dmul>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  tempR[0] = 1.0 - 2.0 * (b_tempR_tmp + tempR_tmp);
 8009460:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009464:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8009468:	f7f6 feb4 	bl	80001d4 <__adddf3>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4610      	mov	r0, r2
 8009472:	4619      	mov	r1, r3
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	f7f6 feac 	bl	80001d4 <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	f04f 0000 	mov.w	r0, #0
 8009484:	4964      	ldr	r1, [pc, #400]	@ (8009618 <quat2rotm+0x308>)
 8009486:	f7f6 fea3 	bl	80001d0 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  c_tempR_tmp = normRowMatrix_idx_1 * normRowMatrix_idx_2;
 8009492:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009496:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800949a:	f7f7 f851 	bl	8000540 <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  d_tempR_tmp = normRowMatrix_idx_0 * b;
 80094a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80094aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80094ae:	f7f7 f847 	bl	8000540 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  tempR[1] = 2.0 * (c_tempR_tmp - d_tempR_tmp);
 80094ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80094be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094c2:	f7f6 fe85 	bl	80001d0 <__aeabi_dsub>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	f7f6 fe7f 	bl	80001d4 <__adddf3>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  e_tempR_tmp = normRowMatrix_idx_1 * b;
 80094de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80094e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80094e6:	f7f7 f82b 	bl	8000540 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  f_tempR_tmp = normRowMatrix_idx_0 * normRowMatrix_idx_2;
 80094f2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80094f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80094fa:	f7f7 f821 	bl	8000540 <__aeabi_dmul>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  tempR[2] = 2.0 * (e_tempR_tmp + f_tempR_tmp);
 8009506:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800950a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800950e:	f7f6 fe61 	bl	80001d4 <__adddf3>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	f7f6 fe59 	bl	80001d4 <__adddf3>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	e9c7 2306 	strd	r2, r3, [r7, #24]
  tempR[3] = 2.0 * (c_tempR_tmp + d_tempR_tmp);
 800952a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800952e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009532:	f7f6 fe4f 	bl	80001d4 <__adddf3>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4610      	mov	r0, r2
 800953c:	4619      	mov	r1, r3
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	f7f6 fe47 	bl	80001d4 <__adddf3>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  c_tempR_tmp = normRowMatrix_idx_1 * normRowMatrix_idx_1;
 800954e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009552:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009556:	f7f6 fff3 	bl	8000540 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  tempR[4] = 1.0 - 2.0 * (c_tempR_tmp + tempR_tmp);
 8009562:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800956a:	f7f6 fe33 	bl	80001d4 <__adddf3>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	f7f6 fe2b 	bl	80001d4 <__adddf3>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	4924      	ldr	r1, [pc, #144]	@ (8009618 <quat2rotm+0x308>)
 8009588:	f7f6 fe22 	bl	80001d0 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  tempR_tmp = normRowMatrix_idx_2 * b;
 8009594:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8009598:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800959c:	f7f6 ffd0 	bl	8000540 <__aeabi_dmul>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  d_tempR_tmp = normRowMatrix_idx_0 * normRowMatrix_idx_1;
 80095a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80095ac:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80095b0:	f7f6 ffc6 	bl	8000540 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  tempR[5] = 2.0 * (tempR_tmp - d_tempR_tmp);
 80095bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80095c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80095c4:	f7f6 fe04 	bl	80001d0 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4610      	mov	r0, r2
 80095ce:	4619      	mov	r1, r3
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f6 fdfe 	bl	80001d4 <__adddf3>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  tempR[6] = 2.0 * (e_tempR_tmp - f_tempR_tmp);
 80095e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80095e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80095e8:	f7f6 fdf2 	bl	80001d0 <__aeabi_dsub>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	f7f6 fdec 	bl	80001d4 <__adddf3>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  tempR[7] = 2.0 * (tempR_tmp + d_tempR_tmp);
 8009604:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009608:	e008      	b.n	800961c <quat2rotm+0x30c>
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w
 8009610:	00000000 	.word	0x00000000
 8009614:	40000000 	.word	0x40000000
 8009618:	3ff00000 	.word	0x3ff00000
 800961c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8009620:	f7f6 fdd8 	bl	80001d4 <__adddf3>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4610      	mov	r0, r2
 800962a:	4619      	mov	r1, r3
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	f7f6 fdd0 	bl	80001d4 <__adddf3>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  tempR[8] = 1.0 - 2.0 * (c_tempR_tmp + b_tempR_tmp);
 800963c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009644:	f7f6 fdc6 	bl	80001d4 <__adddf3>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4610      	mov	r0, r2
 800964e:	4619      	mov	r1, r3
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	f7f6 fdbe 	bl	80001d4 <__adddf3>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	f04f 0000 	mov.w	r0, #0
 8009660:	4952      	ldr	r1, [pc, #328]	@ (80097ac <quat2rotm+0x49c>)
 8009662:	f7f6 fdb5 	bl	80001d0 <__aeabi_dsub>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  for (k = 0; k < 3; k++) {
 800966e:	2300      	movs	r3, #0
 8009670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009674:	e048      	b.n	8009708 <quat2rotm+0x3f8>
    R[k][0] = tempR[3 * k];
 8009676:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	1898      	adds	r0, r3, r2
 8009680:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009684:	4613      	mov	r3, r2
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	4413      	add	r3, r2
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	461a      	mov	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	1899      	adds	r1, r3, r2
 8009692:	00c3      	lsls	r3, r0, #3
 8009694:	33a8      	adds	r3, #168	@ 0xa8
 8009696:	443b      	add	r3, r7
 8009698:	3ba0      	subs	r3, #160	@ 0xa0
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	e9c1 2300 	strd	r2, r3, [r1]
    R[k][1] = tempR[3 * k + 1];
 80096a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80096a6:	4613      	mov	r3, r2
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	4413      	add	r3, r2
 80096ac:	1c58      	adds	r0, r3, #1
 80096ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80096b2:	4613      	mov	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	461a      	mov	r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	1899      	adds	r1, r3, r2
 80096c0:	00c3      	lsls	r3, r0, #3
 80096c2:	33a8      	adds	r3, #168	@ 0xa8
 80096c4:	443b      	add	r3, r7
 80096c6:	3ba0      	subs	r3, #160	@ 0xa0
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[k][2] = tempR[3 * k + 2];
 80096d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80096d4:	4613      	mov	r3, r2
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	4413      	add	r3, r2
 80096da:	1c98      	adds	r0, r3, #2
 80096dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80096e0:	4613      	mov	r3, r2
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	4413      	add	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	461a      	mov	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	1899      	adds	r1, r3, r2
 80096ee:	00c3      	lsls	r3, r0, #3
 80096f0:	33a8      	adds	r3, #168	@ 0xa8
 80096f2:	443b      	add	r3, r7
 80096f4:	3ba0      	subs	r3, #160	@ 0xa0
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (k = 0; k < 3; k++) {
 80096fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009702:	3301      	adds	r3, #1
 8009704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009708:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800970c:	2b02      	cmp	r3, #2
 800970e:	ddb2      	ble.n	8009676 <quat2rotm+0x366>
  }
  for (k = 0; k < 3; k++) {
 8009710:	2300      	movs	r3, #0
 8009712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009716:	e040      	b.n	800979a <quat2rotm+0x48a>
    R[0][k] = tempR[3 * k];
 8009718:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800971c:	4613      	mov	r3, r2
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	4413      	add	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	33a8      	adds	r3, #168	@ 0xa8
 8009726:	443b      	add	r3, r7
 8009728:	3ba0      	subs	r3, #160	@ 0xa0
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	6838      	ldr	r0, [r7, #0]
 8009730:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009734:	00c9      	lsls	r1, r1, #3
 8009736:	4401      	add	r1, r0
 8009738:	e9c1 2300 	strd	r2, r3, [r1]
    R[1][k] = tempR[3 * k + 1];
 800973c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009740:	4613      	mov	r3, r2
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	4413      	add	r3, r2
 8009746:	3301      	adds	r3, #1
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	f102 0018 	add.w	r0, r2, #24
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	33a8      	adds	r3, #168	@ 0xa8
 8009752:	443b      	add	r3, r7
 8009754:	3ba0      	subs	r3, #160	@ 0xa0
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800975e:	00c9      	lsls	r1, r1, #3
 8009760:	4401      	add	r1, r0
 8009762:	e9c1 2300 	strd	r2, r3, [r1]
    R[2][k] = tempR[3 * k + 2];
 8009766:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800976a:	4613      	mov	r3, r2
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4413      	add	r3, r2
 8009770:	3302      	adds	r3, #2
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	33a8      	adds	r3, #168	@ 0xa8
 800977c:	443b      	add	r3, r7
 800977e:	3ba0      	subs	r3, #160	@ 0xa0
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009788:	00c9      	lsls	r1, r1, #3
 800978a:	4401      	add	r1, r0
 800978c:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 3; k++) {
 8009790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009794:	3301      	adds	r3, #1
 8009796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800979a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800979e:	2b02      	cmp	r3, #2
 80097a0:	ddba      	ble.n	8009718 <quat2rotm+0x408>
  }
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	37a8      	adds	r7, #168	@ 0xa8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bdb0      	pop	{r4, r5, r7, pc}
 80097ac:	3ff00000 	.word	0x3ff00000

080097b0 <quatinv>:
/*
 * Arguments    : double q[4]
 * Return Type  : void
 */
static void quatinv(double q[4])
{
 80097b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
  double qnrm;
  qnrm = ((q[0] * q[0] + q[1] * q[1]) + q[2] * q[2]) + q[3] * q[3];
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 febb 	bl	8000540 <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4614      	mov	r4, r2
 80097d0:	461d      	mov	r5, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3308      	adds	r3, #8
 80097d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3308      	adds	r3, #8
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fead 	bl	8000540 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fcf1 	bl	80001d4 <__adddf3>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4614      	mov	r4, r2
 80097f8:	461d      	mov	r5, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3310      	adds	r3, #16
 80097fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3310      	adds	r3, #16
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fe99 	bl	8000540 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fcdd 	bl	80001d4 <__adddf3>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4614      	mov	r4, r2
 8009820:	461d      	mov	r5, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3318      	adds	r3, #24
 8009826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3318      	adds	r3, #24
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	f7f6 fe85 	bl	8000540 <__aeabi_dmul>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	f7f6 fcc9 	bl	80001d4 <__adddf3>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	e9c7 2304 	strd	r2, r3, [r7, #16]
  q[0] /= qnrm;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009850:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009854:	f7f6 ff9e 	bl	8000794 <__aeabi_ddiv>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	68f9      	ldr	r1, [r7, #12]
 800985e:	e9c1 2300 	strd	r2, r3, [r1]
  q[1] = -q[1] / qnrm;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3308      	adds	r3, #8
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	603a      	str	r2, [r7, #0]
 800986c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009870:	607b      	str	r3, [r7, #4]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f103 0408 	add.w	r4, r3, #8
 8009878:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800987c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009880:	f7f6 ff88 	bl	8000794 <__aeabi_ddiv>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	e9c4 2300 	strd	r2, r3, [r4]
  q[2] = -q[2] / qnrm;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3310      	adds	r3, #16
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	4692      	mov	sl, r2
 8009896:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f103 0410 	add.w	r4, r3, #16
 80098a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098a4:	4650      	mov	r0, sl
 80098a6:	4659      	mov	r1, fp
 80098a8:	f7f6 ff74 	bl	8000794 <__aeabi_ddiv>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	e9c4 2300 	strd	r2, r3, [r4]
  q[3] = -q[3] / qnrm;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3318      	adds	r3, #24
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4690      	mov	r8, r2
 80098be:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f103 0418 	add.w	r4, r3, #24
 80098c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7f6 ff60 	bl	8000794 <__aeabi_ddiv>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	e9c4 2300 	strd	r2, r3, [r4]
}
 80098dc:	bf00      	nop
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080098e6 <quatmultiply>:
 *                const double r[4]
 *                double qout[4]
 * Return Type  : void
 */
static void quatmultiply(const double q[4], const double r[4], double qout[4])
{
 80098e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  qout[0] = ((q[0] * r[0] - q[1] * r[1]) - q[2] * r[2]) - q[3] * r[3];
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fe1e 	bl	8000540 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4614      	mov	r4, r2
 800990a:	461d      	mov	r5, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3308      	adds	r3, #8
 8009910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3308      	adds	r3, #8
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f6 fe10 	bl	8000540 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	f7f6 fc52 	bl	80001d0 <__aeabi_dsub>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4614      	mov	r4, r2
 8009932:	461d      	mov	r5, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3310      	adds	r3, #16
 8009938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3310      	adds	r3, #16
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f7f6 fdfc 	bl	8000540 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fc3e 	bl	80001d0 <__aeabi_dsub>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4614      	mov	r4, r2
 800995a:	461d      	mov	r5, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3318      	adds	r3, #24
 8009960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3318      	adds	r3, #24
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f7f6 fde8 	bl	8000540 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc2a 	bl	80001d0 <__aeabi_dsub>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	e9c1 2300 	strd	r2, r3, [r1]
  qout[1] = (q[0] * r[1] + r[0] * q[1]) + (q[2] * r[3] - r[2] * q[3]);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3308      	adds	r3, #8
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fdd4 	bl	8000540 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4614      	mov	r4, r2
 800999e:	461d      	mov	r5, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3308      	adds	r3, #8
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fdc7 	bl	8000540 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 fc0b 	bl	80001d4 <__adddf3>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4690      	mov	r8, r2
 80099c4:	4699      	mov	r9, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3310      	adds	r3, #16
 80099ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3318      	adds	r3, #24
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fdb3 	bl	8000540 <__aeabi_dmul>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4614      	mov	r4, r2
 80099e0:	461d      	mov	r5, r3
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	3310      	adds	r3, #16
 80099e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3318      	adds	r3, #24
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fda5 	bl	8000540 <__aeabi_dmul>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f6 fbe7 	bl	80001d0 <__aeabi_dsub>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f103 0408 	add.w	r4, r3, #8
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4640      	mov	r0, r8
 8009a16:	4649      	mov	r1, r9
 8009a18:	f7f6 fbdc 	bl	80001d4 <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9c4 2300 	strd	r2, r3, [r4]
  qout[2] = (q[0] * r[2] + r[0] * q[2]) + (r[1] * q[3] - q[1] * r[3]);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fd85 	bl	8000540 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	461d      	mov	r5, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3310      	adds	r3, #16
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fd78 	bl	8000540 <__aeabi_dmul>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f6 fbbc 	bl	80001d4 <__adddf3>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4690      	mov	r8, r2
 8009a62:	4699      	mov	r9, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	3308      	adds	r3, #8
 8009a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3318      	adds	r3, #24
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 fd64 	bl	8000540 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	461d      	mov	r5, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3308      	adds	r3, #8
 8009a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3318      	adds	r3, #24
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fd56 	bl	8000540 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4620      	mov	r0, r4
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	f7f6 fb98 	bl	80001d0 <__aeabi_dsub>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f103 0410 	add.w	r4, r3, #16
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fb8d 	bl	80001d4 <__adddf3>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	e9c4 2300 	strd	r2, r3, [r4]
  qout[3] = (q[0] * r[3] + r[0] * q[3]) + (q[1] * r[2] - r[1] * q[2]);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	3318      	adds	r3, #24
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fd36 	bl	8000540 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	461d      	mov	r5, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fd29 	bl	8000540 <__aeabi_dmul>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fb6d 	bl	80001d4 <__adddf3>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4690      	mov	r8, r2
 8009b00:	4699      	mov	r9, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3308      	adds	r3, #8
 8009b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	3310      	adds	r3, #16
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fd15 	bl	8000540 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4614      	mov	r4, r2
 8009b1c:	461d      	mov	r5, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3308      	adds	r3, #8
 8009b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3310      	adds	r3, #16
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fd07 	bl	8000540 <__aeabi_dmul>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 fb49 	bl	80001d0 <__aeabi_dsub>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4610      	mov	r0, r2
 8009b44:	4619      	mov	r1, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f103 0418 	add.w	r4, r3, #24
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	f7f6 fb3e 	bl	80001d4 <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b6a:	0000      	movs	r0, r0
 8009b6c:	0000      	movs	r0, r0
	...

08009b70 <quatnormalize>:
/*
 * Arguments    : double q[4]
 * Return Type  : void
 */
static void quatnormalize(double q[4])
{
 8009b70:	b5b0      	push	{r4, r5, r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  double qm;
  qm = sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	ed93 7b00 	vldr	d7, [r3]
 8009b7e:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 8009ca0 <quatnormalize+0x130>
 8009b82:	eeb0 0a47 	vmov.f32	s0, s14
 8009b86:	eef0 0a67 	vmov.f32	s1, s15
 8009b8a:	f000 f88d 	bl	8009ca8 <rt_powd_snf>
 8009b8e:	ec55 4b10 	vmov	r4, r5, d0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3308      	adds	r3, #8
 8009b96:	ed93 7b00 	vldr	d7, [r3]
 8009b9a:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8009ca0 <quatnormalize+0x130>
 8009b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8009ba2:	eef0 0a67 	vmov.f32	s1, s15
 8009ba6:	f000 f87f 	bl	8009ca8 <rt_powd_snf>
 8009baa:	ec53 2b10 	vmov	r2, r3, d0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 fb0f 	bl	80001d4 <__adddf3>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4614      	mov	r4, r2
 8009bbc:	461d      	mov	r5, r3
             rt_powd_snf(q[2], 2.0)) +
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	ed93 7b00 	vldr	d7, [r3]
 8009bc6:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8009ca0 <quatnormalize+0x130>
 8009bca:	eeb0 0a47 	vmov.f32	s0, s14
 8009bce:	eef0 0a67 	vmov.f32	s1, s15
 8009bd2:	f000 f869 	bl	8009ca8 <rt_powd_snf>
 8009bd6:	ec53 2b10 	vmov	r2, r3, d0
  qm = sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7f6 faf9 	bl	80001d4 <__adddf3>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4614      	mov	r4, r2
 8009be8:	461d      	mov	r5, r3
            rt_powd_snf(q[3], 2.0));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3318      	adds	r3, #24
 8009bee:	ed93 7b00 	vldr	d7, [r3]
 8009bf2:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8009ca0 <quatnormalize+0x130>
 8009bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8009bfa:	eef0 0a67 	vmov.f32	s1, s15
 8009bfe:	f000 f853 	bl	8009ca8 <rt_powd_snf>
 8009c02:	ec53 2b10 	vmov	r2, r3, d0
  qm = sqrt(((rt_powd_snf(q[0], 2.0) + rt_powd_snf(q[1], 2.0)) +
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fae3 	bl	80001d4 <__adddf3>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	ec43 2b17 	vmov	d7, r2, r3
 8009c16:	eeb0 0a47 	vmov.f32	s0, s14
 8009c1a:	eef0 0a67 	vmov.f32	s1, s15
 8009c1e:	f002 fc97 	bl	800c550 <sqrt>
 8009c22:	ed87 0b02 	vstr	d0, [r7, #8]
  q[0] /= qm;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c30:	f7f6 fdb0 	bl	8000794 <__aeabi_ddiv>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	e9c1 2300 	strd	r2, r3, [r1]
  q[1] /= qm;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3308      	adds	r3, #8
 8009c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f103 0408 	add.w	r4, r3, #8
 8009c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c50:	f7f6 fda0 	bl	8000794 <__aeabi_ddiv>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9c4 2300 	strd	r2, r3, [r4]
  q[2] /= qm;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3310      	adds	r3, #16
 8009c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f103 0410 	add.w	r4, r3, #16
 8009c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c6e:	f7f6 fd91 	bl	8000794 <__aeabi_ddiv>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	e9c4 2300 	strd	r2, r3, [r4]
  q[3] /= qm;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3318      	adds	r3, #24
 8009c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f103 0418 	add.w	r4, r3, #24
 8009c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c8c:	f7f6 fd82 	bl	8000794 <__aeabi_ddiv>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca0:	00000000 	.word	0x00000000
 8009ca4:	40000000 	.word	0x40000000

08009ca8 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 8009ca8:	b5b0      	push	{r4, r5, r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	ed87 0b04 	vstr	d0, [r7, #16]
 8009cb2:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8009cb6:	ed97 0b04 	vldr	d0, [r7, #16]
 8009cba:	f002 fb4d 	bl	800c358 <rtIsNaN>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d106      	bne.n	8009cd2 <rt_powd_snf+0x2a>
 8009cc4:	ed97 0b02 	vldr	d0, [r7, #8]
 8009cc8:	f002 fb46 	bl	800c358 <rtIsNaN>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <rt_powd_snf+0x36>
    y = rtNaN;
 8009cd2:	4b80      	ldr	r3, [pc, #512]	@ (8009ed4 <rt_powd_snf+0x22c>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009cdc:	e0ef      	b.n	8009ebe <rt_powd_snf+0x216>
  } else {
    double d;
    y = fabs(u0);
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	603b      	str	r3, [r7, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ce8:	607b      	str	r3, [r7, #4]
 8009cea:	ed97 7b00 	vldr	d7, [r7]
 8009cee:	ed87 7b08 	vstr	d7, [r7, #32]
    d = fabs(u1);
 8009cf2:	68bc      	ldr	r4, [r7, #8]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009cfa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8009cfe:	ed97 0b02 	vldr	d0, [r7, #8]
 8009d02:	f002 fafb 	bl	800c2fc <rtIsInf>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d049      	beq.n	8009da0 <rt_powd_snf+0xf8>
      if (y == 1.0) {
 8009d0c:	f04f 0200 	mov.w	r2, #0
 8009d10:	4b71      	ldr	r3, [pc, #452]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009d12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d16:	f7f6 fe7b 	bl	8000a10 <__aeabi_dcmpeq>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <rt_powd_snf+0x84>
        y = 1.0;
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	4b6c      	ldr	r3, [pc, #432]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009d26:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009d2a:	e0c8      	b.n	8009ebe <rt_powd_snf+0x216>
      } else if (y > 1.0) {
 8009d2c:	f04f 0200 	mov.w	r2, #0
 8009d30:	4b69      	ldr	r3, [pc, #420]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009d32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d36:	f7f6 fe93 	bl	8000a60 <__aeabi_dcmpgt>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d017      	beq.n	8009d70 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d4c:	f7f6 fe88 	bl	8000a60 <__aeabi_dcmpgt>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <rt_powd_snf+0xba>
          y = rtInf;
 8009d56:	4b61      	ldr	r3, [pc, #388]	@ (8009edc <rt_powd_snf+0x234>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009d60:	e0ad      	b.n	8009ebe <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8009d62:	f04f 0200 	mov.w	r2, #0
 8009d66:	f04f 0300 	mov.w	r3, #0
 8009d6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009d6e:	e0a6      	b.n	8009ebe <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d7c:	f7f6 fe70 	bl	8000a60 <__aeabi_dcmpgt>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <rt_powd_snf+0xec>
        y = 0.0;
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009d92:	e094      	b.n	8009ebe <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8009d94:	4b51      	ldr	r3, [pc, #324]	@ (8009edc <rt_powd_snf+0x234>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009d9e:	e08e      	b.n	8009ebe <rt_powd_snf+0x216>
      }
    } else if (d == 0.0) {
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dac:	f7f6 fe30 	bl	8000a10 <__aeabi_dcmpeq>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <rt_powd_snf+0x11a>
      y = 1.0;
 8009db6:	f04f 0200 	mov.w	r2, #0
 8009dba:	4b47      	ldr	r3, [pc, #284]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009dbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009dc0:	e07d      	b.n	8009ebe <rt_powd_snf+0x216>
    } else if (d == 1.0) {
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	4b44      	ldr	r3, [pc, #272]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009dc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dcc:	f7f6 fe20 	bl	8000a10 <__aeabi_dcmpeq>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01b      	beq.n	8009e0e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009de2:	f7f6 fe3d 	bl	8000a60 <__aeabi_dcmpgt>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <rt_powd_snf+0x14e>
        y = u0;
 8009dec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009df0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009df4:	e063      	b.n	8009ebe <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8009df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009dfa:	f04f 0000 	mov.w	r0, #0
 8009dfe:	4936      	ldr	r1, [pc, #216]	@ (8009ed8 <rt_powd_snf+0x230>)
 8009e00:	f7f6 fcc8 	bl	8000794 <__aeabi_ddiv>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009e0c:	e057      	b.n	8009ebe <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e1a:	f7f6 fdf9 	bl	8000a10 <__aeabi_dcmpeq>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <rt_powd_snf+0x192>
      y = u0 * u0;
 8009e24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e2c:	f7f6 fb88 	bl	8000540 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009e38:	e041      	b.n	8009ebe <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8009e3a:	f04f 0200 	mov.w	r2, #0
 8009e3e:	4b28      	ldr	r3, [pc, #160]	@ (8009ee0 <rt_powd_snf+0x238>)
 8009e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e44:	f7f6 fde4 	bl	8000a10 <__aeabi_dcmpeq>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d011      	beq.n	8009e72 <rt_powd_snf+0x1ca>
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e5a:	f7f6 fdf7 	bl	8000a4c <__aeabi_dcmpge>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8009e64:	ed97 0b04 	vldr	d0, [r7, #16]
 8009e68:	f002 fb72 	bl	800c550 <sqrt>
 8009e6c:	ed87 0b08 	vstr	d0, [r7, #32]
 8009e70:	e025      	b.n	8009ebe <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	f04f 0300 	mov.w	r3, #0
 8009e7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e7e:	f7f6 fdd1 	bl	8000a24 <__aeabi_dcmplt>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d012      	beq.n	8009eae <rt_powd_snf+0x206>
 8009e88:	ed97 0b02 	vldr	d0, [r7, #8]
 8009e8c:	f002 fc84 	bl	800c798 <floor>
 8009e90:	ec53 2b10 	vmov	r2, r3, d0
 8009e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e98:	f7f6 fde2 	bl	8000a60 <__aeabi_dcmpgt>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <rt_powd_snf+0x206>
      y = rtNaN;
 8009ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed4 <rt_powd_snf+0x22c>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009eac:	e007      	b.n	8009ebe <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8009eae:	ed97 1b02 	vldr	d1, [r7, #8]
 8009eb2:	ed97 0b04 	vldr	d0, [r7, #16]
 8009eb6:	f002 fadb 	bl	800c470 <pow>
 8009eba:	ed87 0b08 	vstr	d0, [r7, #32]
    }
  }
  return y;
 8009ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ec2:	ec43 2b17 	vmov	d7, r2, r3
}
 8009ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8009eca:	eef0 0a67 	vmov.f32	s1, s15
 8009ece:	3728      	adds	r7, #40	@ 0x28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ed4:	20000030 	.word	0x20000030
 8009ed8:	3ff00000 	.word	0x3ff00000
 8009edc:	20000038 	.word	0x20000038
 8009ee0:	3fe00000 	.word	0x3fe00000
 8009ee4:	00000000 	.word	0x00000000

08009ee8 <ekf10Init>:
 *                const double initState[6]
 *                snaData_t *sys
 * Return Type  : void
 */
void ekf10Init(double freq, const double initState[6], snaData_t *sys)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b09e      	sub	sp, #120	@ 0x78
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	ed87 0b02 	vstr	d0, [r7, #8]
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  double R_acc_noise[3];
  double Q_acc_base_tmp;
  double Q_gyro_quat;
  double dt;
  int i;
  dt = 1.0 / freq;
 8009ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009efa:	f04f 0000 	mov.w	r0, #0
 8009efe:	496e      	ldr	r1, [pc, #440]	@ (800a0b8 <ekf10Init+0x1d0>)
 8009f00:	f7f6 fc48 	bl	8000794 <__aeabi_ddiv>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  /*  State vector: [qw, qx, qy, qz, h, vh]  */
  /*  Quaternion (orientation), altitude (h), vertical velocity (vh) in NED */
  /*  Gyroscope Process Noise (MPU6500) */
  /*  MPU6500: 0.005 °/s/√Hz to rad/s/√Hz */
  /*  Continuous to discrete-time variance */
  Q_gyro_quat = 0.25 * rt_powd_snf(dt, 3.0) * 7.6154354946677164E-9;
 8009f0c:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 800a098 <ekf10Init+0x1b0>
 8009f10:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8009f14:	f7ff fec8 	bl	8009ca8 <rt_powd_snf>
 8009f18:	ec51 0b10 	vmov	r0, r1, d0
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	4b66      	ldr	r3, [pc, #408]	@ (800a0bc <ekf10Init+0x1d4>)
 8009f22:	f7f6 fb0d 	bl	8000540 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a0a0 <ekf10Init+0x1b8>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 fb04 	bl	8000540 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  /*  Quaternion noise (x, y, z) */
  /*  Accelerometer Process Noise (MPU6500) */
  /*  MPU6500: 300 µg/√Hz to m/s^2/√Hz */
  Q_acc_base_tmp = 8.661249E-6 * dt;
 8009f40:	a359      	add	r3, pc, #356	@ (adr r3, 800a0a8 <ekf10Init+0x1c0>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f4a:	f7f6 faf9 	bl	8000540 <__aeabi_dmul>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  /*  Discrete-time variance */
  /*  Process Noise Covariance (Q) - 6x6 for quaternion and altitude/velocity */
  b_Q_gyro_quat[0] = Q_gyro_quat;
 8009f56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009f5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  b_Q_gyro_quat[1] = Q_gyro_quat;
 8009f5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009f62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  b_Q_gyro_quat[2] = Q_gyro_quat;
 8009f66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009f6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  b_Q_gyro_quat[3] = 7.6154354946677164E-9 * dt;
 8009f6e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a0a0 <ekf10Init+0x1b8>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f78:	f7f6 fae2 	bl	8000540 <__aeabi_dmul>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  b_Q_gyro_quat[4] = Q_acc_base_tmp;
 8009f84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f88:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  b_Q_gyro_quat[5] = Q_acc_base_tmp;
 8009f8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f90:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  diag(b_Q_gyro_quat, sys->Q);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f103 0220 	add.w	r2, r3, #32
 8009f9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd fdaf 	bl	8007b04 <diag>
  /*  % Quaternion */
  /*  Altitude, velocity (tuned for stability) */
  /*  Measurement Noise - Accelerometer (MPU6500) */
  /*  Discrete-time variance */
  R_acc_noise[0] = Q_acc_base_tmp;
 8009fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009faa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  R_acc_noise[1] = Q_acc_base_tmp;
 8009fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  R_acc_noise[2] = Q_acc_base_tmp;
 8009fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009fba:	e9c7 2308 	strd	r2, r3, [r7, #32]
  b_diag(R_acc_noise, sys->R_acc);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fd faa2 	bl	8007514 <b_diag>
  /*  3x3 for accel */
  /*  Measurement Noise - Magnetometer (QMC5883P) */
  /*  QMC5883P: ~0.1 gauss noise */
  Q_gyro_quat = 0.25 * dt;
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	4b39      	ldr	r3, [pc, #228]	@ (800a0bc <ekf10Init+0x1d4>)
 8009fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fda:	f7f6 fab1 	bl	8000540 <__aeabi_dmul>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  /*  Discrete-time variance */
  R_acc_noise[0] = Q_gyro_quat;
 8009fe6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009fea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  R_acc_noise[1] = Q_gyro_quat;
 8009fee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  R_acc_noise[2] = Q_gyro_quat;
 8009ff6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009ffa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  b_diag(R_acc_noise, sys->R_mag);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800a004:	f107 0310 	add.w	r3, r7, #16
 800a008:	4611      	mov	r1, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd fa82 	bl	8007514 <b_diag>
  /*  3x3 for mag */
  /*  Measurement Noise - Barometer (BMP280) */
  /*  BMP280 typical noise ~0.02-0.05 m, adjusted for NED */
  /*  Scalar variance for altitude */
  /*  Initial State Covariance (P) - 6x6 for combined system */
  diag(dv, sys->P);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a016:	4619      	mov	r1, r3
 800a018:	4829      	ldr	r0, [pc, #164]	@ (800a0c0 <ekf10Init+0x1d8>)
 800a01a:	f7fd fd73 	bl	8007b04 <diag>
  /*  Relaxed for convergence */
  /*  Output Combined System Structure */
  sys->euler[0] = 0.0;
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	e9c1 2300 	strd	r2, r3, [r1]
  sys->euler[1] = 0.0;
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	f04f 0300 	mov.w	r3, #0
 800a036:	e9c1 2302 	strd	r2, r3, [r1, #8]
  sys->euler[2] = 0.0;
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	e9c1 2304 	strd	r2, r3, [r1, #16]
  sys->dt = dt;
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a04e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  sys->R_baro = 0.0025000000000000005;
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	a316      	add	r3, pc, #88	@ (adr r3, 800a0b0 <ekf10Init+0x1c8>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
  for (i = 0; i < 6; i++) {
 800a05e:	2300      	movs	r3, #0
 800a060:	677b      	str	r3, [r7, #116]	@ 0x74
 800a062:	e00f      	b.n	800a084 <ekf10Init+0x19c>
    sys->x[i] = initState[i];
 800a064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4413      	add	r3, r2
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	6838      	ldr	r0, [r7, #0]
 800a072:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a074:	313b      	adds	r1, #59	@ 0x3b
 800a076:	00c9      	lsls	r1, r1, #3
 800a078:	4401      	add	r1, r0
 800a07a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 800a07e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a080:	3301      	adds	r3, #1
 800a082:	677b      	str	r3, [r7, #116]	@ 0x74
 800a084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a086:	2b05      	cmp	r3, #5
 800a088:	ddec      	ble.n	800a064 <ekf10Init+0x17c>
  /*  % Accelerometer measurement noise */
  /*  % Magnetometer measurement noise */
  /*  % Barometer (BMP280) measurement noise */
  /*  % Initial state: [qw qx qy qz h vh] */
  /*  Initial covariance */
}
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	3778      	adds	r7, #120	@ 0x78
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	f3af 8000 	nop.w
 800a098:	00000000 	.word	0x00000000
 800a09c:	40080000 	.word	0x40080000
 800a0a0:	43a5fd52 	.word	0x43a5fd52
 800a0a4:	3e405aa1 	.word	0x3e405aa1
 800a0a8:	ff91ed19 	.word	0xff91ed19
 800a0ac:	3ee229f8 	.word	0x3ee229f8
 800a0b0:	47ae147c 	.word	0x47ae147c
 800a0b4:	3f647ae1 	.word	0x3f647ae1
 800a0b8:	3ff00000 	.word	0x3ff00000
 800a0bc:	3fd00000 	.word	0x3fd00000
 800a0c0:	0800dd88 	.word	0x0800dd88
 800a0c4:	00000000 	.word	0x00000000

0800a0c8 <ekf10Step>:
 *                double alti
 * Return Type  : void
 */
void ekf10Step(snaData_t *sys, const imuData_t *imu, const double magNED[3],
               double alti)
{
 800a0c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0cc:	f5ad 6d55 	sub.w	sp, sp, #3408	@ 0xd50
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a0d6:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a0da:	6018      	str	r0, [r3, #0]
 800a0dc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a0e0:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a0e4:	6019      	str	r1, [r3, #0]
 800a0e6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a0ea:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a0f4:	ed03 0b02 	vstr	d0, [r3, #-8]
  /*  --- Prediction Step --- */
  /*  1. Quaternion propagation (using gyroscope) */
  /*  Gyroscope quaternion (body frame rates) */
  /*  Quaternion derivative */
  /*  Propagate quaternion */
  a[0] = 0.0;
 800a0f8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a0fc:	f5a3 618b 	sub.w	r1, r3, #1112	@ 0x458
 800a100:	f04f 0200 	mov.w	r2, #0
 800a104:	f04f 0300 	mov.w	r3, #0
 800a108:	e9c1 2300 	strd	r2, r3, [r1]
  a[1] = imu->gyro[0];
 800a10c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a110:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a11a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a11e:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800a122:	e9c3 0102 	strd	r0, r1, [r3, #8]
  a[2] = imu->gyro[1];
 800a126:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a12a:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a134:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a138:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800a13c:	e9c3 0104 	strd	r0, r1, [r3, #16]
  a[3] = imu->gyro[2];
 800a140:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a144:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a14e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a152:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800a156:	e9c3 0106 	strd	r0, r1, [r3, #24]
  quatmultiply(&sys->x[0], a, q_pred);
 800a15a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a15e:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f503 70ec 	add.w	r0, r3, #472	@ 0x1d8
 800a168:	f607 02d8 	addw	r2, r7, #2264	@ 0x8d8
 800a16c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 800a170:	4619      	mov	r1, r3
 800a172:	f7ff fbb8 	bl	80098e6 <quatmultiply>
  q_pred[0] = sys->x[0] + sys->dt * (0.5 * q_pred[0]);
 800a176:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a17a:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	e9d3 8976 	ldrd	r8, r9, [r3, #472]	@ 0x1d8
 800a184:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a188:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a192:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a196:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a19a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	4b6c      	ldr	r3, [pc, #432]	@ (800a354 <ekf10Step+0x28c>)
 800a1a4:	f7f6 f9cc 	bl	8000540 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f9c6 	bl	8000540 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f80a 	bl	80001d4 <__adddf3>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a1cc:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a1d0:	e9c3 0100 	strd	r0, r1, [r3]
  q_pred[1] = sys->x[1] + sys->dt * (0.5 * q_pred[1]);
 800a1d4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a1d8:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	e9d3 8978 	ldrd	r8, r9, [r3, #480]	@ 0x1e0
 800a1e2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a1e6:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a1f0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a1f4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a1f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	4b54      	ldr	r3, [pc, #336]	@ (800a354 <ekf10Step+0x28c>)
 800a202:	f7f6 f99d 	bl	8000540 <__aeabi_dmul>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4620      	mov	r0, r4
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7f6 f997 	bl	8000540 <__aeabi_dmul>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4640      	mov	r0, r8
 800a218:	4649      	mov	r1, r9
 800a21a:	f7f5 ffdb 	bl	80001d4 <__adddf3>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4610      	mov	r0, r2
 800a224:	4619      	mov	r1, r3
 800a226:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a22a:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a22e:	e9c3 0102 	strd	r0, r1, [r3, #8]
  q_pred[2] = sys->x[2] + sys->dt * (0.5 * q_pred[2]);
 800a232:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a236:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	e9d3 897a 	ldrd	r8, r9, [r3, #488]	@ 0x1e8
 800a240:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a244:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a24e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a252:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a256:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	4b3d      	ldr	r3, [pc, #244]	@ (800a354 <ekf10Step+0x28c>)
 800a260:	f7f6 f96e 	bl	8000540 <__aeabi_dmul>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f6 f968 	bl	8000540 <__aeabi_dmul>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f5 ffac 	bl	80001d4 <__adddf3>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4610      	mov	r0, r2
 800a282:	4619      	mov	r1, r3
 800a284:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a288:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a28c:	e9c3 0104 	strd	r0, r1, [r3, #16]
  q_pred[3] = sys->x[3] + sys->dt * (0.5 * q_pred[3]);
 800a290:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a294:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	e9d3 897c 	ldrd	r8, r9, [r3, #496]	@ 0x1f0
 800a29e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a2a2:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a2ac:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a2b0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a2b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	4b25      	ldr	r3, [pc, #148]	@ (800a354 <ekf10Step+0x28c>)
 800a2be:	f7f6 f93f 	bl	8000540 <__aeabi_dmul>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f6 f939 	bl	8000540 <__aeabi_dmul>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ff7d 	bl	80001d4 <__adddf3>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4610      	mov	r0, r2
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a2e6:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800a2ea:	e9c3 0106 	strd	r0, r1, [r3, #24]
  quatnormalize(q_pred);
 800a2ee:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fc3c 	bl	8009b70 <quatnormalize>
  /*  2. Transform accelerometer from body to NED frame */
  /*  Rotation matrix from body to NED */
  /*  Acceleration in NED frame */
  /*  In NED, z is down, gravity is +9.80665 m/s^2, subtract to get motion accel
   */
  quat2rotm(q_pred, dv);
 800a2f8:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 800a2fc:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff f804 	bl	8009310 <quat2rotm>
  d = imu->accel[0];
 800a308:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a30c:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a316:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800a31a:	e9c1 2300 	strd	r2, r3, [r1]
  a_idx_0_tmp = imu->accel[1];
 800a31e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a322:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a32c:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800a330:	e9c1 2300 	strd	r2, r3, [r1]
  mag_norm = imu->accel[2];
 800a334:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a338:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a342:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a346:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 800a34a:	2300      	movs	r3, #0
 800a34c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800a350:	e05b      	b.n	800a40a <ekf10Step+0x342>
 800a352:	bf00      	nop
 800a354:	3fe00000 	.word	0x3fe00000
    dv1[i] = (dv[0][i] * d + dv[1][i] * a_idx_0_tmp) + dv[2][i] * mag_norm;
 800a358:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a35c:	f5a3 6287 	sub.w	r2, r3, #1080	@ 0x438
 800a360:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	4413      	add	r3, r2
 800a368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a36c:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f6 f8e4 	bl	8000540 <__aeabi_dmul>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4614      	mov	r4, r2
 800a37e:	461d      	mov	r5, r3
 800a380:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a384:	f5a3 6287 	sub.w	r2, r3, #1080	@ 0x438
 800a388:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a38c:	3303      	adds	r3, #3
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	4413      	add	r3, r2
 800a392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a396:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7f6 f8cf 	bl	8000540 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 ff13 	bl	80001d4 <__adddf3>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4614      	mov	r4, r2
 800a3b4:	461d      	mov	r5, r3
 800a3b6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a3ba:	f5a3 6287 	sub.w	r2, r3, #1080	@ 0x438
 800a3be:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a3c2:	3306      	adds	r3, #6
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3cc:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 f8b4 	bl	8000540 <__aeabi_dmul>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f5 fef8 	bl	80001d4 <__adddf3>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a3f0:	f5a3 6292 	sub.w	r2, r3, #1168	@ 0x490
 800a3f4:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	4413      	add	r3, r2
 800a3fc:	e9c3 0100 	strd	r0, r1, [r3]
  for (i = 0; i < 3; i++) {
 800a400:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a404:	3301      	adds	r3, #1
 800a406:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800a40a:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dda2      	ble.n	800a358 <ekf10Step+0x290>
  }
  /*  Vertical acceleration (down positive) */
  /*  Convert to upward positive for altitude convention */
  /*  Motion acceleration upward (positive up) */
  /*  3. Altitude and velocity propagation (positive up) */
  h_pred = (sys->x[4] + sys->dt * sys->x[5]) +
 800a412:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a416:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800a420:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a424:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a42e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a432:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	@ 0x200
 800a43c:	f7f6 f880 	bl	8000540 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4620      	mov	r0, r4
 800a446:	4629      	mov	r1, r5
 800a448:	f7f5 fec4 	bl	80001d4 <__adddf3>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4690      	mov	r8, r2
 800a452:	4699      	mov	r9, r3
           0.5 * (sys->dt * sys->dt) * -(dv1[2] - 9.81);
 800a454:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a458:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a462:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a466:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a470:	f7f6 f866 	bl	8000540 <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	4b1b      	ldr	r3, [pc, #108]	@ (800a4f0 <ekf10Step+0x428>)
 800a482:	f7f6 f85d 	bl	8000540 <__aeabi_dmul>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4614      	mov	r4, r2
 800a48c:	461d      	mov	r5, r3
 800a48e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a492:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 800a496:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a49a:	a313      	add	r3, pc, #76	@ (adr r3, 800a4e8 <ekf10Step+0x420>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f5 fe96 	bl	80001d0 <__aeabi_dsub>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7f6 f842 	bl	8000540 <__aeabi_dmul>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
  h_pred = (sys->x[4] + sys->dt * sys->x[5]) +
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f7f5 fe86 	bl	80001d4 <__adddf3>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	f507 6152 	add.w	r1, r7, #3360	@ 0xd20
 800a4d0:	e9c1 2300 	strd	r2, r3, [r1]
  /*  Altitude update */
  /*  Velocity update */
  /*  4. Combined predicted state */
  /*  5. State transition Jacobian (F) - Linearized process model */
  for (i = 0; i < 6; i++) {
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800a4da:	e03b      	b.n	800a554 <ekf10Step+0x48c>
    for (i1 = 0; i1 < 6; i1++) {
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800a4e2:	e02e      	b.n	800a542 <ekf10Step+0x47a>
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	51eb851f 	.word	0x51eb851f
 800a4ec:	40239eb8 	.word	0x40239eb8
 800a4f0:	3fe00000 	.word	0x3fe00000
      F[i][i1] = iv[i][i1];
 800a4f4:	49c2      	ldr	r1, [pc, #776]	@ (800a800 <ekf10Step+0x738>)
 800a4f6:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	4413      	add	r3, r2
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	18ca      	adds	r2, r1, r3
 800a504:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800a508:	4413      	add	r3, r2
 800a50a:	f993 3000 	ldrsb.w	r3, [r3]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7f5 ffac 	bl	800046c <__aeabi_i2d>
 800a514:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a518:	f5a3 7434 	sub.w	r4, r3, #720	@ 0x2d0
 800a51c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a520:	461a      	mov	r2, r3
 800a522:	0052      	lsls	r2, r2, #1
 800a524:	441a      	add	r2, r3
 800a526:	0053      	lsls	r3, r2, #1
 800a528:	461a      	mov	r2, r3
 800a52a:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800a52e:	4413      	add	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	4423      	add	r3, r4
 800a534:	e9c3 0100 	strd	r0, r1, [r3]
    for (i1 = 0; i1 < 6; i1++) {
 800a538:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800a53c:	3301      	adds	r3, #1
 800a53e:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800a542:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800a546:	2b05      	cmp	r3, #5
 800a548:	ddd4      	ble.n	800a4f4 <ekf10Step+0x42c>
  for (i = 0; i < 6; i++) {
 800a54a:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a54e:	3301      	adds	r3, #1
 800a550:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800a554:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800a558:	2b05      	cmp	r3, #5
 800a55a:	ddbf      	ble.n	800a4dc <ekf10Step+0x414>
    }
  }
  double dv2[4][4];
  /*  6x6 identity as base */
  /*  Quaternion part (small-angle approximation) */
  mag_norm = 0.5 * sys->dt;
 800a55c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a560:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	4ba5      	ldr	r3, [pc, #660]	@ (800a804 <ekf10Step+0x73c>)
 800a570:	f7f5 ffe6 	bl	8000540 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a57c:	e9c1 2300 	strd	r2, r3, [r1]
  b_eye(dv2);
 800a580:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd f81b 	bl	80075c0 <b_eye>
  a_tmp = mag_norm * -imu->gyro[0];
 800a58a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a58e:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a59a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a5a4:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ac:	f7f5 ffc8 	bl	8000540 <__aeabi_dmul>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f607 5118 	addw	r1, r7, #3352	@ 0xd18
 800a5b8:	e9c1 2300 	strd	r2, r3, [r1]
  b_a_tmp = mag_norm * -imu->gyro[1];
 800a5bc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a5c0:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a5ca:	623a      	str	r2, [r7, #32]
 800a5cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5d6:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5de:	f7f5 ffaf 	bl	8000540 <__aeabi_dmul>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	f507 6151 	add.w	r1, r7, #3344	@ 0xd10
 800a5ea:	e9c1 2300 	strd	r2, r3, [r1]
  z_mag_idx_2 = mag_norm * -imu->gyro[2];
 800a5ee:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a5f2:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a5fc:	61ba      	str	r2, [r7, #24]
 800a5fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a608:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a610:	f7f5 ff96 	bl	8000540 <__aeabi_dmul>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	f607 5108 	addw	r1, r7, #3336	@ 0xd08
 800a61c:	e9c1 2300 	strd	r2, r3, [r1]
  accel_norm = mag_norm * imu->gyro[0];
 800a620:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a624:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a636:	f7f5 ff83 	bl	8000540 <__aeabi_dmul>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	f507 6150 	add.w	r1, r7, #3328	@ 0xd00
 800a642:	e9c1 2300 	strd	r2, r3, [r1]
  z_mag_idx_0 = mag_norm * 0.0;
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a656:	f7f5 ff73 	bl	8000540 <__aeabi_dmul>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	f607 41f8 	addw	r1, r7, #3320	@ 0xcf8
 800a662:	e9c1 2300 	strd	r2, r3, [r1]
  z_mag_idx_1 = mag_norm * imu->gyro[2];
 800a666:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a66a:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a674:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a67c:	f7f5 ff60 	bl	8000540 <__aeabi_dmul>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	f507 614f 	add.w	r1, r7, #3312	@ 0xcf0
 800a688:	e9c1 2300 	strd	r2, r3, [r1]
  a_idx_0_tmp = mag_norm * imu->gyro[1];
 800a68c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a690:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a69a:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a2:	f7f5 ff4d 	bl	8000540 <__aeabi_dmul>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800a6ae:	e9c1 2300 	strd	r2, r3, [r1]
  F[0][0] = dv2[0][0] + mag_norm * 0.0;
 800a6b2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a6b6:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a6ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a6be:	f04f 0200 	mov.w	r2, #0
 800a6c2:	f04f 0300 	mov.w	r3, #0
 800a6c6:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800a6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ce:	f7f5 ff37 	bl	8000540 <__aeabi_dmul>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	f7f5 fd7b 	bl	80001d4 <__adddf3>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a6e6:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a6ea:	e9c1 2300 	strd	r2, r3, [r1]
  F[0][1] = accel_norm + dv2[0][1];
 800a6ee:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a6f2:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a6f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a6fa:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 fd67 	bl	80001d4 <__adddf3>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a70e:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a712:	e9c1 2302 	strd	r2, r3, [r1, #8]
  F[0][2] = a_idx_0_tmp + dv2[0][2];
 800a716:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a71a:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a71e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a722:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 fd53 	bl	80001d4 <__adddf3>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a736:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a73a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  F[0][3] = z_mag_idx_1 + dv2[0][3];
 800a73e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a742:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a746:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a74a:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fd3f 	bl	80001d4 <__adddf3>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a75e:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a762:	e9c1 2306 	strd	r2, r3, [r1, #24]
  F[1][0] = dv2[1][0] + a_tmp;
 800a766:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a76a:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a76e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800a772:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	f7f5 fd2b 	bl	80001d4 <__adddf3>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a786:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a78a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  F[1][1] = z_mag_idx_0 + dv2[1][1];
 800a78e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a792:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a796:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a79a:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd17 	bl	80001d4 <__adddf3>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a7ae:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a7b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  F[1][2] = z_mag_idx_2 + dv2[1][2];
 800a7b6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a7ba:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a7be:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800a7c2:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fd03 	bl	80001d4 <__adddf3>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a7d6:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a7da:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  F[1][3] = a_idx_0_tmp + dv2[1][3];
 800a7de:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a7e2:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a7e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800a7ea:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fcef 	bl	80001d4 <__adddf3>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a7fe:	e003      	b.n	800a808 <ekf10Step+0x740>
 800a800:	0800ddb8 	.word	0x0800ddb8
 800a804:	3fe00000 	.word	0x3fe00000
 800a808:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a80c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  F[2][0] = dv2[2][0] + b_a_tmp;
 800a810:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a814:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a818:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a81c:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fcd6 	bl	80001d4 <__adddf3>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a830:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
  F[2][1] = z_mag_idx_1 + dv2[2][1];
 800a838:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a83c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a840:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800a844:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fcc2 	bl	80001d4 <__adddf3>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a858:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a85c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  F[2][2] = z_mag_idx_0 + dv2[2][2];
 800a860:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a864:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a868:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800a86c:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	f7f5 fcae 	bl	80001d4 <__adddf3>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a880:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a884:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
  F[2][3] = a_tmp + dv2[2][3];
 800a888:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a88c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a890:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800a894:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fc9a 	bl	80001d4 <__adddf3>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a8a8:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a8ac:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
  F[3][0] = dv2[3][0] + z_mag_idx_2;
 800a8b0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a8b4:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a8b8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800a8bc:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fc86 	bl	80001d4 <__adddf3>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a8d0:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a8d4:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
  F[3][1] = b_a_tmp + dv2[3][1];
 800a8d8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a8dc:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a8e0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800a8e4:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fc72 	bl	80001d4 <__adddf3>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a8f8:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a8fc:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
  F[3][2] = accel_norm + dv2[3][2];
 800a900:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a904:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a908:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800a90c:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f5 fc5e 	bl	80001d4 <__adddf3>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a920:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a924:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
  F[3][3] = z_mag_idx_0 + dv2[3][3];
 800a928:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a92c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800a930:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800a934:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fc4a 	bl	80001d4 <__adddf3>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a948:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a94c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
  /*  Altitude and velocity part (upward positive) */
  F[5][4] = sys->dt;
 800a950:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a954:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a95e:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800a962:	f5a1 7134 	sub.w	r1, r1, #720	@ 0x2d0
 800a966:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
  /*  dh/dvh */
  /*  6. Predict covariance */
  for (i = 0; i < 6; i++) {
 800a96a:	2300      	movs	r3, #0
 800a96c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800a970:	e06f      	b.n	800aa52 <ekf10Step+0x98a>
    for (i1 = 0; i1 < 6; i1++) {
 800a972:	2300      	movs	r3, #0
 800a974:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800a978:	e062      	b.n	800aa40 <ekf10Step+0x978>
      d = 0.0;
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	f04f 0300 	mov.w	r3, #0
 800a982:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800a986:	e9c1 2300 	strd	r2, r3, [r1]
      for (i2 = 0; i2 < 6; i2++) {
 800a98a:	2300      	movs	r3, #0
 800a98c:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800a990:	e038      	b.n	800aa04 <ekf10Step+0x93c>
        d += F[i2][i] * sys->P[i1][i2];
 800a992:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a996:	f5a3 7134 	sub.w	r1, r3, #720	@ 0x2d0
 800a99a:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800a99e:	4613      	mov	r3, r2
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	4413      	add	r3, r2
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800a9aa:	4413      	add	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	440b      	add	r3, r1
 800a9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9b4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800a9b8:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800a9bc:	681c      	ldr	r4, [r3, #0]
 800a9be:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	4413      	add	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800a9ce:	4413      	add	r3, r2
 800a9d0:	3341      	adds	r3, #65	@ 0x41
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	4423      	add	r3, r4
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fdb1 	bl	8000540 <__aeabi_dmul>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800a9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ea:	f7f5 fbf3 	bl	80001d4 <__adddf3>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800a9f6:	e9c1 2300 	strd	r2, r3, [r1]
      for (i2 = 0; i2 < 6; i2++) {
 800a9fa:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800aa04:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800aa08:	2b05      	cmp	r3, #5
 800aa0a:	ddc2      	ble.n	800a992 <ekf10Step+0x8ca>
      }
      b_F[i1][i] = d;
 800aa0c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aa10:	f5a3 717c 	sub.w	r1, r3, #1008	@ 0x3f0
 800aa14:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800aa18:	4613      	mov	r3, r2
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	4413      	add	r3, r2
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800aa24:	4413      	add	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4419      	add	r1, r3
 800aa2a:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	e9c1 2300 	strd	r2, r3, [r1]
    for (i1 = 0; i1 < 6; i1++) {
 800aa36:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800aa40:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	dd98      	ble.n	800a97a <ekf10Step+0x8b2>
  for (i = 0; i < 6; i++) {
 800aa48:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800aa52:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	dd8b      	ble.n	800a972 <ekf10Step+0x8aa>
    }
  }
  for (i = 0; i < 6; i++) {
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800aa60:	e089      	b.n	800ab76 <ekf10Step+0xaae>
    for (i1 = 0; i1 < 6; i1++) {
 800aa62:	2300      	movs	r3, #0
 800aa64:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800aa68:	e07b      	b.n	800ab62 <ekf10Step+0xa9a>
      d = 0.0;
 800aa6a:	f04f 0200 	mov.w	r2, #0
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800aa76:	e9c1 2300 	strd	r2, r3, [r1]
      for (i2 = 0; i2 < 6; i2++) {
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800aa80:	e036      	b.n	800aaf0 <ekf10Step+0xa28>
        d += b_F[i2][i] * F[i2][i1];
 800aa82:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aa86:	f5a3 717c 	sub.w	r1, r3, #1008	@ 0x3f0
 800aa8a:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800aa8e:	4613      	mov	r3, r2
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	4413      	add	r3, r2
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800aa9a:	4413      	add	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	440b      	add	r3, r1
 800aaa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaa4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aaa8:	f5a3 7434 	sub.w	r4, r3, #720	@ 0x2d0
 800aaac:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800aab0:	4613      	mov	r3, r2
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	4423      	add	r3, r4
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fd3b 	bl	8000540 <__aeabi_dmul>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800aad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad6:	f7f5 fb7d 	bl	80001d4 <__adddf3>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800aae2:	e9c1 2300 	strd	r2, r3, [r1]
      for (i2 = 0; i2 < 6; i2++) {
 800aae6:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800aaea:	3301      	adds	r3, #1
 800aaec:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800aaf0:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800aaf4:	2b05      	cmp	r3, #5
 800aaf6:	ddc4      	ble.n	800aa82 <ekf10Step+0x9ba>
      }
      sys->P[i1][i] = d + sys->Q[i1][i];
 800aaf8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aafc:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800ab00:	6819      	ldr	r1, [r3, #0]
 800ab02:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800ab12:	4413      	add	r3, r2
 800ab14:	3304      	adds	r3, #4
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	440b      	add	r3, r1
 800ab1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab1e:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fb55 	bl	80001d4 <__adddf3>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4619      	mov	r1, r3
 800ab32:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ab36:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800ab3a:	681c      	ldr	r4, [r3, #0]
 800ab3c:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800ab4c:	4413      	add	r3, r2
 800ab4e:	3341      	adds	r3, #65	@ 0x41
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	4423      	add	r3, r4
 800ab54:	e9c3 0100 	strd	r0, r1, [r3]
    for (i1 = 0; i1 < 6; i1++) {
 800ab58:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800ab62:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	f77f af7f 	ble.w	800aa6a <ekf10Step+0x9a2>
  for (i = 0; i < 6; i++) {
 800ab6c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800ab70:	3301      	adds	r3, #1
 800ab72:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800ab76:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	f77f af71 	ble.w	800aa62 <ekf10Step+0x99a>
    }
  }
  /*  --- Update Step --- */
  /*  Normalize measurements (avoid division by zero) */
  accel_norm = b_norm(imu->accel);
 800ab80:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ab84:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3318      	adds	r3, #24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fc fd73 	bl	8007678 <b_norm>
 800ab92:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800ab96:	ed83 0b00 	vstr	d0, [r3]
  if (!(accel_norm == 0.0)) {
 800ab9a:	f04f 0200 	mov.w	r2, #0
 800ab9e:	f04f 0300 	mov.w	r3, #0
 800aba2:	f507 6150 	add.w	r1, r7, #3328	@ 0xd00
 800aba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abaa:	f7f5 ff31 	bl	8000a10 <__aeabi_dcmpeq>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <ekf10Step+0xaf0>
      /*  12. Compute Euler angles for output (NED convention) */
      quat2eul(&sys->x[0], sys->euler);
      /*  [yaw, pitch, roll] in radians */
    }
  }
}
 800abb4:	f001 babb 	b.w	800c12e <ekf10Step+0x2066>
    mag_norm = b_norm(magNED);
 800abb8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800abbc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f7fc fd59 	bl	8007678 <b_norm>
 800abc6:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800abca:	ed83 0b00 	vstr	d0, [r3]
    if (!(mag_norm == 0.0)) {
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800abda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abde:	f7f5 ff17 	bl	8000a10 <__aeabi_dcmpeq>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <ekf10Step+0xb24>
}
 800abe8:	f001 baa1 	b.w	800c12e <ekf10Step+0x2066>
      z_mag_idx_0 = magNED[0] / mag_norm;
 800abec:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800abf0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abfa:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 fdc7 	bl	8000794 <__aeabi_ddiv>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	f607 41f8 	addw	r1, r7, #3320	@ 0xcf8
 800ac0e:	e9c1 2300 	strd	r2, r3, [r1]
      z_mag_idx_1 = magNED[1] / mag_norm;
 800ac12:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ac16:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac22:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fdb3 	bl	8000794 <__aeabi_ddiv>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	f507 614f 	add.w	r1, r7, #3312	@ 0xcf0
 800ac36:	e9c1 2300 	strd	r2, r3, [r1]
      z_mag_idx_2 = magNED[2] / mag_norm;
 800ac3a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ac3e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3310      	adds	r3, #16
 800ac46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac4a:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fd9f 	bl	8000794 <__aeabi_ddiv>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	f607 5108 	addw	r1, r7, #3336	@ 0xd08
 800ac5e:	e9c1 2300 	strd	r2, r3, [r1]
      h_global[0] = q_pred[0];
 800ac62:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ac66:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ac72:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800ac76:	e9c1 2300 	strd	r2, r3, [r1]
      h_global[1] = q_pred[1];
 800ac7a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ac7e:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ac82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ac86:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ac8a:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800ac8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      h_global[2] = q_pred[2];
 800ac92:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ac96:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ac9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ac9e:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800aca2:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800aca6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      h_global[3] = q_pred[3];
 800acaa:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800acae:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800acb2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800acb6:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800acba:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800acbe:	e9c1 2306 	strd	r2, r3, [r1, #24]
      quatinv(h_global);
 800acc2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fd72 	bl	80097b0 <quatinv>
      a[0] = 0.0;
 800accc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800acd0:	f5a3 618b 	sub.w	r1, r3, #1112	@ 0x458
 800acd4:	f04f 0200 	mov.w	r2, #0
 800acd8:	f04f 0300 	mov.w	r3, #0
 800acdc:	e9c1 2300 	strd	r2, r3, [r1]
      a[1] = z_mag_idx_0;
 800ace0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ace4:	f5a3 618b 	sub.w	r1, r3, #1112	@ 0x458
 800ace8:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      a[2] = z_mag_idx_1;
 800acf4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800acf8:	f5a3 618b 	sub.w	r1, r3, #1112	@ 0x458
 800acfc:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	e9c1 2304 	strd	r2, r3, [r1, #16]
      a[3] = z_mag_idx_2;
 800ad08:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ad0c:	f5a3 618b 	sub.w	r1, r3, #1112	@ 0x458
 800ad10:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	e9c1 2306 	strd	r2, r3, [r1, #24]
      quatmultiply(a, h_global, dv3);
 800ad1c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ad20:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ad24:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fddc 	bl	80098e6 <quatmultiply>
      quatmultiply(q_pred, dv3, h_global);
 800ad2e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ad32:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ad36:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fdd3 	bl	80098e6 <quatmultiply>
      b_h_global[0] = h_global[1];
 800ad40:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ad44:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800ad48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ad4c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ad50:	f5a1 61a4 	sub.w	r1, r1, #1312	@ 0x520
 800ad54:	e9c1 2300 	strd	r2, r3, [r1]
      b_h_global[1] = h_global[2];
 800ad58:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ad5c:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800ad60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ad64:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ad68:	f5a1 61a4 	sub.w	r1, r1, #1312	@ 0x520
 800ad6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      d = c_norm(b_h_global);
 800ad70:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fc fe1b 	bl	80079b0 <c_norm>
 800ad7a:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800ad7e:	ed83 0b00 	vstr	d0, [r3]
      memset(&H[0][0], 0, 42U * sizeof(double));
 800ad82:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 800ad86:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 faf8 	bl	800c382 <memset>
      mag_norm = 2.0 * -q_pred[2];
 800ad92:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ad96:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ad9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ad9e:	613a      	str	r2, [r7, #16]
 800ada0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	f7f5 fa11 	bl	80001d4 <__adddf3>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800adba:	e9c1 2300 	strd	r2, r3, [r1]
      H[0][0] = mag_norm;
 800adbe:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800adc2:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800adc6:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	e9c1 2300 	strd	r2, r3, [r1]
      H[1][0] = 2.0 * q_pred[3];
 800add2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800add6:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800adda:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	f7f5 f9f7 	bl	80001d4 <__adddf3>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800adee:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800adf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
      H[2][0] = 2.0 * -q_pred[0];
 800adf6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800adfa:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	60ba      	str	r2, [r7, #8]
 800ae04:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	f7f5 f9df 	bl	80001d4 <__adddf3>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ae1e:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800ae22:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
      H[3][0] = 2.0 * q_pred[1];
 800ae26:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ae2a:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ae2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	f7f5 f9cd 	bl	80001d4 <__adddf3>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ae42:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800ae46:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
      H[0][1] = 2.0 * q_pred[1];
 800ae4a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ae4e:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ae52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	f7f5 f9bb 	bl	80001d4 <__adddf3>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ae66:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800ae6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      H[1][1] = 2.0 * q_pred[0];
 800ae6e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ae72:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ae76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	f7f5 f9a9 	bl	80001d4 <__adddf3>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ae8a:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800ae8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
      H[2][1] = 2.0 * q_pred[3];
 800ae92:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ae96:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800ae9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	f7f5 f997 	bl	80001d4 <__adddf3>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800aeae:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800aeb2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
      H[3][1] = 2.0 * q_pred[2];
 800aeb6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aeba:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800aebe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	f7f5 f985 	bl	80001d4 <__adddf3>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800aed2:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800aed6:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
      H[0][2] = 2.0 * q_pred[0];
 800aeda:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aede:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800aee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	f7f5 f973 	bl	80001d4 <__adddf3>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800aef6:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800aefa:	e9c1 2304 	strd	r2, r3, [r1, #16]
      H[1][2] = 2.0 * -q_pred[1];
 800aefe:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800af02:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800af06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800af0a:	4692      	mov	sl, r2
 800af0c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800af10:	4652      	mov	r2, sl
 800af12:	465b      	mov	r3, fp
 800af14:	4650      	mov	r0, sl
 800af16:	4659      	mov	r1, fp
 800af18:	f7f5 f95c 	bl	80001d4 <__adddf3>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800af24:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800af28:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
      H[2][2] = mag_norm;
 800af2c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800af30:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800af34:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
      H[3][2] = 2.0 * q_pred[3];
 800af40:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800af44:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800af48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	f7f5 f940 	bl	80001d4 <__adddf3>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800af5c:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800af60:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
      H[0][3] = -2.0 * h_global[3] * q_pred[2];
 800af64:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800af68:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800af6c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800af70:	f04f 0200 	mov.w	r2, #0
 800af74:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800af78:	f7f5 fae2 	bl	8000540 <__aeabi_dmul>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4610      	mov	r0, r2
 800af82:	4619      	mov	r1, r3
 800af84:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800af88:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800af8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800af90:	f7f5 fad6 	bl	8000540 <__aeabi_dmul>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800af9c:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800afa0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      mag_norm = 2.0 * h_global[3] * q_pred[3];
 800afa4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800afa8:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800afac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	f7f5 f90e 	bl	80001d4 <__adddf3>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4610      	mov	r0, r2
 800afbe:	4619      	mov	r1, r3
 800afc0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800afc4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800afc8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800afcc:	f7f5 fab8 	bl	8000540 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800afd8:	e9c1 2300 	strd	r2, r3, [r1]
      H[1][3] = mag_norm;
 800afdc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800afe0:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800afe4:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
      a_tmp = 2.0 * h_global[3] * q_pred[0];
 800aff0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800aff4:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800aff8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	f7f5 f8e8 	bl	80001d4 <__adddf3>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4610      	mov	r0, r2
 800b00a:	4619      	mov	r1, r3
 800b00c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b010:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f7f5 fa92 	bl	8000540 <__aeabi_dmul>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	f607 5118 	addw	r1, r7, #3352	@ 0xd18
 800b024:	e9c1 2300 	strd	r2, r3, [r1]
      H[2][3] = -4.0 * d * q_pred[2] - a_tmp;
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	4bd0      	ldr	r3, [pc, #832]	@ (800b370 <ekf10Step+0x12a8>)
 800b02e:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800b032:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b036:	f7f5 fa83 	bl	8000540 <__aeabi_dmul>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4610      	mov	r0, r2
 800b040:	4619      	mov	r1, r3
 800b042:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b046:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b04a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b04e:	f7f5 fa77 	bl	8000540 <__aeabi_dmul>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4610      	mov	r0, r2
 800b058:	4619      	mov	r1, r3
 800b05a:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f8b5 	bl	80001d0 <__aeabi_dsub>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b06e:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b072:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
      b_a_tmp = 2.0 * h_global[3] * q_pred[1];
 800b076:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b07a:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800b07e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	f7f5 f8a5 	bl	80001d4 <__adddf3>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4610      	mov	r0, r2
 800b090:	4619      	mov	r1, r3
 800b092:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b096:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b09a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b09e:	f7f5 fa4f 	bl	8000540 <__aeabi_dmul>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	f507 6151 	add.w	r1, r7, #3344	@ 0xd10
 800b0aa:	e9c1 2300 	strd	r2, r3, [r1]
      H[3][3] = -4.0 * d * q_pred[3] + b_a_tmp;
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	4baf      	ldr	r3, [pc, #700]	@ (800b370 <ekf10Step+0x12a8>)
 800b0b4:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800b0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0bc:	f7f5 fa40 	bl	8000540 <__aeabi_dmul>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b0cc:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b0d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b0d4:	f7f5 fa34 	bl	8000540 <__aeabi_dmul>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4619      	mov	r1, r3
 800b0e0:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f874 	bl	80001d4 <__adddf3>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b0f4:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b0f8:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
      H[0][4] = -2.0 * d * q_pred[3] + b_a_tmp;
 800b0fc:	f04f 0200 	mov.w	r2, #0
 800b100:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800b104:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800b108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10c:	f7f5 fa18 	bl	8000540 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4610      	mov	r0, r2
 800b116:	4619      	mov	r1, r3
 800b118:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b11c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b120:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b124:	f7f5 fa0c 	bl	8000540 <__aeabi_dmul>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4610      	mov	r0, r2
 800b12e:	4619      	mov	r1, r3
 800b130:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 f84c 	bl	80001d4 <__adddf3>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b144:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b148:	e9c1 2308 	strd	r2, r3, [r1, #32]
      b_a_tmp = 2.0 * d * q_pred[2];
 800b14c:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800b150:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	f7f5 f83c 	bl	80001d4 <__adddf3>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4610      	mov	r0, r2
 800b162:	4619      	mov	r1, r3
 800b164:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b168:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b16c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b170:	f7f5 f9e6 	bl	8000540 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	f507 6151 	add.w	r1, r7, #3344	@ 0xd10
 800b17c:	e9c1 2300 	strd	r2, r3, [r1]
      H[1][4] = b_a_tmp + a_tmp;
 800b180:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f507 6151 	add.w	r1, r7, #3344	@ 0xd10
 800b18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b190:	f7f5 f820 	bl	80001d4 <__adddf3>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b19c:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b1a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
      a_tmp = 2.0 * d * q_pred[1];
 800b1a4:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800b1a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	f7f5 f810 	bl	80001d4 <__adddf3>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b1c0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b1c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b1c8:	f7f5 f9ba 	bl	8000540 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	f607 5118 	addw	r1, r7, #3352	@ 0xd18
 800b1d4:	e9c1 2300 	strd	r2, r3, [r1]
      H[2][4] = a_tmp + mag_norm;
 800b1d8:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	f607 5118 	addw	r1, r7, #3352	@ 0xd18
 800b1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e8:	f7f4 fff4 	bl	80001d4 <__adddf3>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b1f4:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b1f8:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
      H[3][4] = -2.0 * d * q_pred[0] + 2.0 * h_global[3] * q_pred[2];
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800b204:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800b208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b20c:	f7f5 f998 	bl	8000540 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4610      	mov	r0, r2
 800b216:	4619      	mov	r1, r3
 800b218:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b21c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f98c 	bl	8000540 <__aeabi_dmul>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4614      	mov	r4, r2
 800b22e:	461d      	mov	r5, r3
 800b230:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b234:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800b238:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	f7f4 ffc8 	bl	80001d4 <__adddf3>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4610      	mov	r0, r2
 800b24a:	4619      	mov	r1, r3
 800b24c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b250:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b254:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b258:	f7f5 f972 	bl	8000540 <__aeabi_dmul>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f4 ffb6 	bl	80001d4 <__adddf3>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b270:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b274:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
      H[0][5] = b_a_tmp;
 800b278:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b27c:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800b280:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      H[1][5] = 2.0 * d * q_pred[3] - 4.0 * h_global[3] * q_pred[1];
 800b28c:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800b290:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	f7f4 ff9c 	bl	80001d4 <__adddf3>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b2a8:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b2ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b2b0:	f7f5 f946 	bl	8000540 <__aeabi_dmul>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4614      	mov	r4, r2
 800b2ba:	461d      	mov	r5, r3
 800b2bc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b2c0:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800b2c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	4b29      	ldr	r3, [pc, #164]	@ (800b374 <ekf10Step+0x12ac>)
 800b2ce:	f7f5 f937 	bl	8000540 <__aeabi_dmul>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4619      	mov	r1, r3
 800b2da:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b2de:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b2e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b2e6:	f7f5 f92b 	bl	8000540 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f4 ff6d 	bl	80001d0 <__aeabi_dsub>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b2fe:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b302:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
      H[2][5] = 2.0 * d * q_pred[0] - 4.0 * h_global[3] * q_pred[2];
 800b306:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800b30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	f7f4 ff5f 	bl	80001d4 <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4610      	mov	r0, r2
 800b31c:	4619      	mov	r1, r3
 800b31e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b322:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f5 f909 	bl	8000540 <__aeabi_dmul>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4614      	mov	r4, r2
 800b334:	461d      	mov	r5, r3
 800b336:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b33a:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800b33e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <ekf10Step+0x12ac>)
 800b348:	f7f5 f8fa 	bl	8000540 <__aeabi_dmul>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4610      	mov	r0, r2
 800b352:	4619      	mov	r1, r3
 800b354:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b358:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b35c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b360:	f7f5 f8ee 	bl	8000540 <__aeabi_dmul>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4620      	mov	r0, r4
 800b36a:	4629      	mov	r1, r5
 800b36c:	e004      	b.n	800b378 <ekf10Step+0x12b0>
 800b36e:	bf00      	nop
 800b370:	c0100000 	.word	0xc0100000
 800b374:	40100000 	.word	0x40100000
 800b378:	f7f4 ff2a 	bl	80001d0 <__aeabi_dsub>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b384:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 800b388:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
      H[3][5] = a_tmp;
 800b38c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b390:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800b394:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
      H[4][6] = 1.0;
 800b3a0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b3a4:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	4ba8      	ldr	r3, [pc, #672]	@ (800b650 <ekf10Step+0x1588>)
 800b3ae:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
      for (i = 0; i < 7; i++) {
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b3b8:	e032      	b.n	800b420 <ekf10Step+0x1358>
        for (i1 = 0; i1 < 6; i1++) {
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b3c0:	e025      	b.n	800b40e <ekf10Step+0x1346>
          y_tmp[i][i1] = H[i1][i];
 800b3c2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b3c6:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800b3ca:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b3d8:	4413      	add	r3, r2
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	440b      	add	r3, r1
 800b3de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3e2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b3e6:	f5a3 6418 	sub.w	r4, r3, #2432	@ 0x980
 800b3ea:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	4413      	add	r3, r2
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b3fa:	4413      	add	r3, r2
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4423      	add	r3, r4
 800b400:	e9c3 0100 	strd	r0, r1, [r3]
        for (i1 = 0; i1 < 6; i1++) {
 800b404:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b408:	3301      	adds	r3, #1
 800b40a:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b40e:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b412:	2b05      	cmp	r3, #5
 800b414:	ddd5      	ble.n	800b3c2 <ekf10Step+0x12fa>
      for (i = 0; i < 7; i++) {
 800b416:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b41a:	3301      	adds	r3, #1
 800b41c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b420:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b424:	2b06      	cmp	r3, #6
 800b426:	ddc8      	ble.n	800b3ba <ekf10Step+0x12f2>
      blkdiag(sys->R_acc, sys->R_mag, sys->R_baro, dv4);
 800b428:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b42c:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 800b436:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b43a:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f503 71c4 	add.w	r1, r3, #392	@ 0x188
 800b444:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b448:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	ed93 7b74 	vldr	d7, [r3, #464]	@ 0x1d0
 800b452:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 800b456:	461a      	mov	r2, r3
 800b458:	eeb0 0a47 	vmov.f32	s0, s14
 800b45c:	eef0 0a67 	vmov.f32	s1, s15
 800b460:	f7fc fa0a 	bl	8007878 <blkdiag>
      for (i = 0; i < 6; i++) {
 800b464:	2300      	movs	r3, #0
 800b466:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b46a:	e06f      	b.n	800b54c <ekf10Step+0x1484>
        for (i1 = 0; i1 < 7; i1++) {
 800b46c:	2300      	movs	r3, #0
 800b46e:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b472:	e062      	b.n	800b53a <ekf10Step+0x1472>
          a_idx_0_tmp = 0.0;
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	f04f 0300 	mov.w	r3, #0
 800b47c:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b480:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b484:	2300      	movs	r3, #0
 800b486:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b48a:	e038      	b.n	800b4fe <ekf10Step+0x1436>
            a_idx_0_tmp += sys->P[i2][i] * y_tmp[i1][i2];
 800b48c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b490:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800b494:	6819      	ldr	r1, [r3, #0]
 800b496:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b4a6:	4413      	add	r3, r2
 800b4a8:	3341      	adds	r3, #65	@ 0x41
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4b2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b4b6:	f5a3 6418 	sub.w	r4, r3, #2432	@ 0x980
 800b4ba:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b4be:	4613      	mov	r3, r2
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	4413      	add	r3, r2
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b4ca:	4413      	add	r3, r2
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4423      	add	r3, r4
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f5 f834 	bl	8000540 <__aeabi_dmul>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e4:	f7f4 fe76 	bl	80001d4 <__adddf3>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b4f0:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b4f4:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b4fe:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b502:	2b05      	cmp	r3, #5
 800b504:	ddc2      	ble.n	800b48c <ekf10Step+0x13c4>
          K[i1][i] = a_idx_0_tmp;
 800b506:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b50a:	f5a3 6142 	sub.w	r1, r3, #3104	@ 0xc20
 800b50e:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b512:	4613      	mov	r3, r2
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	4413      	add	r3, r2
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b51e:	4413      	add	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4419      	add	r1, r3
 800b524:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 7; i1++) {
 800b530:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b534:	3301      	adds	r3, #1
 800b536:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b53a:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b53e:	2b06      	cmp	r3, #6
 800b540:	dd98      	ble.n	800b474 <ekf10Step+0x13ac>
      for (i = 0; i < 6; i++) {
 800b542:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b546:	3301      	adds	r3, #1
 800b548:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b54c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b550:	2b05      	cmp	r3, #5
 800b552:	dd8b      	ble.n	800b46c <ekf10Step+0x13a4>
      for (i = 0; i < 7; i++) {
 800b554:	2300      	movs	r3, #0
 800b556:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b55a:	e0ed      	b.n	800b738 <ekf10Step+0x1670>
        for (i1 = 0; i1 < 6; i1++) {
 800b55c:	2300      	movs	r3, #0
 800b55e:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b562:	e060      	b.n	800b626 <ekf10Step+0x155e>
          a_idx_0_tmp = 0.0;
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b570:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b574:	2300      	movs	r3, #0
 800b576:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b57a:	e037      	b.n	800b5ec <ekf10Step+0x1524>
            a_idx_0_tmp += H[i2][i] * sys->P[i1][i2];
 800b57c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b580:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800b584:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b588:	4613      	mov	r3, r2
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b592:	4413      	add	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	440b      	add	r3, r1
 800b598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b59c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b5a0:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800b5a4:	681c      	ldr	r4, [r3, #0]
 800b5a6:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	4413      	add	r3, r2
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3341      	adds	r3, #65	@ 0x41
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4423      	add	r3, r4
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f4 ffbd 	bl	8000540 <__aeabi_dmul>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5d2:	f7f4 fdff 	bl	80001d4 <__adddf3>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b5de:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b5e2:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b5ec:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b5f0:	2b05      	cmp	r3, #5
 800b5f2:	ddc3      	ble.n	800b57c <ekf10Step+0x14b4>
          b_H[i1][i] = a_idx_0_tmp;
 800b5f4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b5f8:	f5a3 612d 	sub.w	r1, r3, #2768	@ 0xad0
 800b5fc:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b600:	4613      	mov	r3, r2
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	1a9b      	subs	r3, r3, r2
 800b606:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b60a:	4413      	add	r3, r2
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	4419      	add	r1, r3
 800b610:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 6; i1++) {
 800b61c:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b620:	3301      	adds	r3, #1
 800b622:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b626:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b62a:	2b05      	cmp	r3, #5
 800b62c:	dd9a      	ble.n	800b564 <ekf10Step+0x149c>
        for (i1 = 0; i1 < 7; i1++) {
 800b62e:	2300      	movs	r3, #0
 800b630:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b634:	e077      	b.n	800b726 <ekf10Step+0x165e>
          a_idx_0_tmp = 0.0;
 800b636:	f04f 0200 	mov.w	r2, #0
 800b63a:	f04f 0300 	mov.w	r3, #0
 800b63e:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b642:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b646:	2300      	movs	r3, #0
 800b648:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b64c:	e038      	b.n	800b6c0 <ekf10Step+0x15f8>
 800b64e:	bf00      	nop
 800b650:	3ff00000 	.word	0x3ff00000
            a_idx_0_tmp += b_H[i2][i] * y_tmp[i1][i2];
 800b654:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b658:	f5a3 612d 	sub.w	r1, r3, #2768	@ 0xad0
 800b65c:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b660:	4613      	mov	r3, r2
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	1a9b      	subs	r3, r3, r2
 800b666:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b66a:	4413      	add	r3, r2
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	440b      	add	r3, r1
 800b670:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b674:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b678:	f5a3 6418 	sub.w	r4, r3, #2432	@ 0x980
 800b67c:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b680:	4613      	mov	r3, r2
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	4413      	add	r3, r2
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800b68c:	4413      	add	r3, r2
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	4423      	add	r3, r4
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f7f4 ff53 	bl	8000540 <__aeabi_dmul>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b6a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6a6:	f7f4 fd95 	bl	80001d4 <__adddf3>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b6b2:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800b6b6:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800b6c0:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	ddc5      	ble.n	800b654 <ekf10Step+0x158c>
          c_H[i1][i] = a_idx_0_tmp + dv4[i1][i];
 800b6c8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b6cc:	f5a3 61d5 	sub.w	r1, r3, #1704	@ 0x6a8
 800b6d0:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b6de:	4413      	add	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	440b      	add	r3, r1
 800b6e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6e8:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fd70 	bl	80001d4 <__adddf3>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b700:	f5a3 6403 	sub.w	r4, r3, #2096	@ 0x830
 800b704:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800b708:	4613      	mov	r3, r2
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	4423      	add	r3, r4
 800b718:	e9c3 0100 	strd	r0, r1, [r3]
        for (i1 = 0; i1 < 7; i1++) {
 800b71c:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b720:	3301      	adds	r3, #1
 800b722:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800b726:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800b72a:	2b06      	cmp	r3, #6
 800b72c:	dd83      	ble.n	800b636 <ekf10Step+0x156e>
      for (i = 0; i < 7; i++) {
 800b72e:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b732:	3301      	adds	r3, #1
 800b734:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800b738:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800b73c:	2b06      	cmp	r3, #6
 800b73e:	f77f af0d 	ble.w	800b55c <ekf10Step+0x1494>
      mrdiv(K, c_H);
 800b742:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 800b746:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b74a:	4611      	mov	r1, r2
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fc ff8f 	bl	8008670 <mrdiv>
      b_imu[0] = imu->accel[0] / accel_norm;
 800b752:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b756:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b760:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f5 f814 	bl	8000794 <__aeabi_ddiv>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b774:	f5a1 6149 	sub.w	r1, r1, #3216	@ 0xc90
 800b778:	e9c1 2300 	strd	r2, r3, [r1]
      b_imu[3] = z_mag_idx_0;
 800b77c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b780:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 800b784:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      b_imu[1] = imu->accel[1] / accel_norm;
 800b790:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b794:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b79e:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 fff5 	bl	8000794 <__aeabi_ddiv>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b7b2:	f5a1 6149 	sub.w	r1, r1, #3216	@ 0xc90
 800b7b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
      b_imu[4] = z_mag_idx_1;
 800b7ba:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b7be:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 800b7c2:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
      b_imu[2] = imu->accel[2] / accel_norm;
 800b7ce:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b7d2:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b7dc:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 ffd6 	bl	8000794 <__aeabi_ddiv>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b7f0:	f5a1 6149 	sub.w	r1, r1, #3216	@ 0xc90
 800b7f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      b_imu[5] = z_mag_idx_2;
 800b7f8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b7fc:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 800b800:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      b_imu[6] = alti;
 800b80c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b810:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 800b814:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b81c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
      a_idx_0_tmp = q_pred[0] * q_pred[2];
 800b820:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b824:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b82c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b830:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b834:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b838:	f7f4 fe82 	bl	8000540 <__aeabi_dmul>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800b844:	e9c1 2300 	strd	r2, r3, [r1]
      mag_norm = q_pred[1] * q_pred[3];
 800b848:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b84c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b850:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b854:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b858:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b85c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b860:	f7f4 fe6e 	bl	8000540 <__aeabi_dmul>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800b86c:	e9c1 2300 	strd	r2, r3, [r1]
      a_tmp = mag_norm - a_idx_0_tmp;
 800b870:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800b87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b880:	f7f4 fca6 	bl	80001d0 <__aeabi_dsub>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	f607 5118 	addw	r1, r7, #3352	@ 0xd18
 800b88c:	e9c1 2300 	strd	r2, r3, [r1]
      dv5[0] = 2.0 * a_tmp;
 800b890:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800b894:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	f7f4 fc9a 	bl	80001d4 <__adddf3>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b8a8:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800b8ac:	e9c1 2300 	strd	r2, r3, [r1]
      b_a_tmp = q_pred[0] * q_pred[1] + q_pred[2] * q_pred[3];
 800b8b0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b8b4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b8b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8bc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b8c0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b8c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b8c8:	f7f4 fe3a 	bl	8000540 <__aeabi_dmul>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4614      	mov	r4, r2
 800b8d2:	461d      	mov	r5, r3
 800b8d4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b8d8:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b8dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b8e0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b8e4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b8e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b8ec:	f7f4 fe28 	bl	8000540 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f7f4 fc6c 	bl	80001d4 <__adddf3>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	f507 6151 	add.w	r1, r7, #3344	@ 0xd10
 800b904:	e9c1 2300 	strd	r2, r3, [r1]
      dv5[1] = 2.0 * b_a_tmp;
 800b908:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800b90c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	f7f4 fc5e 	bl	80001d4 <__adddf3>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800b920:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800b924:	e9c1 2302 	strd	r2, r3, [r1, #8]
      z_mag_idx_2 = q_pred[2] * q_pred[2];
 800b928:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b92c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b930:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b934:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b938:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b93c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b940:	f7f4 fdfe 	bl	8000540 <__aeabi_dmul>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	f607 5108 	addw	r1, r7, #3336	@ 0xd08
 800b94c:	e9c1 2300 	strd	r2, r3, [r1]
      accel_norm = q_pred[3] * q_pred[3];
 800b950:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b954:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b958:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b95c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b960:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b964:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b968:	f7f4 fdea 	bl	8000540 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	f507 6150 	add.w	r1, r7, #3328	@ 0xd00
 800b974:	e9c1 2300 	strd	r2, r3, [r1]
      z_mag_idx_0 = q_pred[1] * q_pred[1];
 800b978:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b97c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b980:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b984:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b988:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b98c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b990:	f7f4 fdd6 	bl	8000540 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	f607 41f8 	addw	r1, r7, #3320	@ 0xcf8
 800b99c:	e9c1 2300 	strd	r2, r3, [r1]
          ((q_pred[0] * q_pred[0] - z_mag_idx_0) - z_mag_idx_2) + accel_norm;
 800b9a0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b9a4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b9a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9ac:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800b9b0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fdc2 	bl	8000540 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f7f4 fc00 	bl	80001d0 <__aeabi_dsub>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fbf6 	bl	80001d0 <__aeabi_dsub>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fbee 	bl	80001d4 <__adddf3>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
      dv5[2] =
 800b9fc:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ba00:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800ba04:	e9c1 2304 	strd	r2, r3, [r1, #16]
      dv5[3] = 2.0 * d * ((0.5 - z_mag_idx_2) - accel_norm) +
 800ba08:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800ba0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	f7f4 fbde 	bl	80001d4 <__adddf3>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	461d      	mov	r5, r3
 800ba20:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f04f 0000 	mov.w	r0, #0
 800ba2c:	49d0      	ldr	r1, [pc, #832]	@ (800bd70 <ekf10Step+0x1ca8>)
 800ba2e:	f7f4 fbcf 	bl	80001d0 <__aeabi_dsub>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4610      	mov	r0, r2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f7f4 fbc5 	bl	80001d0 <__aeabi_dsub>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f4 fd77 	bl	8000540 <__aeabi_dmul>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4614      	mov	r4, r2
 800ba58:	461d      	mov	r5, r3
               2.0 * h_global[3] * a_tmp;
 800ba5a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800ba5e:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800ba62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	f7f4 fbb3 	bl	80001d4 <__adddf3>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4610      	mov	r0, r2
 800ba74:	4619      	mov	r1, r3
 800ba76:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fd5f 	bl	8000540 <__aeabi_dmul>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
      dv5[3] = 2.0 * d * ((0.5 - z_mag_idx_2) - accel_norm) +
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fba3 	bl	80001d4 <__adddf3>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800ba96:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800ba9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      dv5[4] = 2.0 * d * (q_pred[1] * q_pred[2] - q_pred[0] * q_pred[3]) +
 800ba9e:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800baa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	f7f4 fb93 	bl	80001d4 <__adddf3>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4614      	mov	r4, r2
 800bab4:	461d      	mov	r5, r3
 800bab6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800baba:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800babe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bac2:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bac6:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800baca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bace:	f7f4 fd37 	bl	8000540 <__aeabi_dmul>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4690      	mov	r8, r2
 800bad8:	4699      	mov	r9, r3
 800bada:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bade:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800bae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bae6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800baea:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800baee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800baf2:	f7f4 fd25 	bl	8000540 <__aeabi_dmul>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	f7f4 fb67 	bl	80001d0 <__aeabi_dsub>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fd19 	bl	8000540 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4614      	mov	r4, r2
 800bb14:	461d      	mov	r5, r3
               2.0 * h_global[3] * b_a_tmp;
 800bb16:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bb1a:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800bb1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	f7f4 fb55 	bl	80001d4 <__adddf3>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4619      	mov	r1, r3
 800bb32:	f507 6351 	add.w	r3, r7, #3344	@ 0xd10
 800bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3a:	f7f4 fd01 	bl	8000540 <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
      dv5[4] = 2.0 * d * (q_pred[1] * q_pred[2] - q_pred[0] * q_pred[3]) +
 800bb42:	4620      	mov	r0, r4
 800bb44:	4629      	mov	r1, r5
 800bb46:	f7f4 fb45 	bl	80001d4 <__adddf3>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bb52:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800bb56:	e9c1 2308 	strd	r2, r3, [r1, #32]
      dv5[5] = 2.0 * d * (a_idx_0_tmp + mag_norm) +
 800bb5a:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800bb5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	f7f4 fb35 	bl	80001d4 <__adddf3>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4614      	mov	r4, r2
 800bb70:	461d      	mov	r5, r3
 800bb72:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f607 5148 	addw	r1, r7, #3400	@ 0xd48
 800bb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb82:	f7f4 fb27 	bl	80001d4 <__adddf3>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 fcd7 	bl	8000540 <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4614      	mov	r4, r2
 800bb98:	461d      	mov	r5, r3
               2.0 * h_global[3] * ((0.5 - z_mag_idx_0) - z_mag_idx_2);
 800bb9a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bb9e:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800bba2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	f7f4 fb13 	bl	80001d4 <__adddf3>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4690      	mov	r8, r2
 800bbb4:	4699      	mov	r9, r3
 800bbb6:	f607 43f8 	addw	r3, r7, #3320	@ 0xcf8
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f04f 0000 	mov.w	r0, #0
 800bbc2:	496b      	ldr	r1, [pc, #428]	@ (800bd70 <ekf10Step+0x1ca8>)
 800bbc4:	f7f4 fb04 	bl	80001d0 <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fafa 	bl	80001d0 <__aeabi_dsub>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	f7f4 fcac 	bl	8000540 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
      dv5[5] = 2.0 * d * (a_idx_0_tmp + mag_norm) +
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 faf0 	bl	80001d4 <__adddf3>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bbfc:	f6a1 4158 	subw	r1, r1, #3160	@ 0xc58
 800bc00:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      dv5[6] = h_pred;
 800bc04:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bc08:	f6a3 4158 	subw	r1, r3, #3160	@ 0xc58
 800bc0c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
      for (i = 0; i < 7; i++) {
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800bc1e:	e026      	b.n	800bc6e <ekf10Step+0x1ba6>
        b_imu[i] -= dv5[i];
 800bc20:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bc24:	f5a3 6249 	sub.w	r2, r3, #3216	@ 0xc90
 800bc28:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	4413      	add	r3, r2
 800bc30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc34:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bc38:	f6a3 4258 	subw	r2, r3, #3160	@ 0xc58
 800bc3c:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	4413      	add	r3, r2
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fac2 	bl	80001d0 <__aeabi_dsub>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bc54:	f5a1 6049 	sub.w	r0, r1, #3216	@ 0xc90
 800bc58:	f8d7 1d3c 	ldr.w	r1, [r7, #3388]	@ 0xd3c
 800bc5c:	00c9      	lsls	r1, r1, #3
 800bc5e:	4401      	add	r1, r0
 800bc60:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 7; i++) {
 800bc64:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800bc6e:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800bc72:	2b06      	cmp	r3, #6
 800bc74:	ddd4      	ble.n	800bc20 <ekf10Step+0x1b58>
      b_q_pred[0] = q_pred[0];
 800bc76:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bc7a:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bc86:	f5a1 614c 	sub.w	r1, r1, #3264	@ 0xcc0
 800bc8a:	e9c1 2300 	strd	r2, r3, [r1]
      b_q_pred[1] = q_pred[1];
 800bc8e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bc92:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800bc96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bc9a:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bc9e:	f5a1 614c 	sub.w	r1, r1, #3264	@ 0xcc0
 800bca2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      b_q_pred[2] = q_pred[2];
 800bca6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bcaa:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800bcae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bcb2:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bcb6:	f5a1 614c 	sub.w	r1, r1, #3264	@ 0xcc0
 800bcba:	e9c1 2304 	strd	r2, r3, [r1, #16]
      b_q_pred[3] = q_pred[3];
 800bcbe:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bcc2:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800bcc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800bcca:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bcce:	f5a1 614c 	sub.w	r1, r1, #3264	@ 0xcc0
 800bcd2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      b_q_pred[4] = h_pred;
 800bcd6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bcda:	f5a3 614c 	sub.w	r1, r3, #3264	@ 0xcc0
 800bcde:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      b_q_pred[5] = sys->x[5] + sys->dt * -(dv1[2] - 9.81);
 800bcea:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bcee:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800bcf8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bcfc:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800bd06:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bd0a:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 800bd0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bd12:	a315      	add	r3, pc, #84	@ (adr r3, 800bd68 <ekf10Step+0x1ca0>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f7f4 fa5a 	bl	80001d0 <__aeabi_dsub>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	603a      	str	r2, [r7, #0]
 800bd22:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800bd26:	607b      	str	r3, [r7, #4]
 800bd28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4649      	mov	r1, r9
 800bd30:	f7f4 fc06 	bl	8000540 <__aeabi_dmul>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f7f4 fa4a 	bl	80001d4 <__adddf3>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800bd48:	f5a1 614c 	sub.w	r1, r1, #3264	@ 0xcc0
 800bd4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      eye(F);
 800bd50:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fc fc5f 	bl	8008618 <eye>
      for (i = 0; i < 6; i++) {
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800bd60:	e155      	b.n	800c00e <ekf10Step+0x1f46>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	51eb851f 	.word	0x51eb851f
 800bd6c:	40239eb8 	.word	0x40239eb8
 800bd70:	3fe00000 	.word	0x3fe00000
        d = 0.0;
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	f04f 0300 	mov.w	r3, #0
 800bd7c:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bd80:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 7; i1++) {
 800bd84:	2300      	movs	r3, #0
 800bd86:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800bd8a:	e02f      	b.n	800bdec <ekf10Step+0x1d24>
          d += K[i1][i] * b_imu[i1];
 800bd8c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bd90:	f5a3 6142 	sub.w	r1, r3, #3104	@ 0xc20
 800bd94:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800bd98:	4613      	mov	r3, r2
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800bda4:	4413      	add	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	440b      	add	r3, r1
 800bdaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdae:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bdb2:	f5a3 6249 	sub.w	r2, r3, #3216	@ 0xc90
 800bdb6:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f7f4 fbbd 	bl	8000540 <__aeabi_dmul>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd2:	f7f4 f9ff 	bl	80001d4 <__adddf3>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bdde:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 7; i1++) {
 800bde2:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bde6:	3301      	adds	r3, #1
 800bde8:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800bdec:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bdf0:	2b06      	cmp	r3, #6
 800bdf2:	ddcb      	ble.n	800bd8c <ekf10Step+0x1cc4>
        sys->x[i] = b_q_pred[i] + d;
 800bdf4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bdf8:	f5a3 624c 	sub.w	r2, r3, #3264	@ 0xcc0
 800bdfc:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	4413      	add	r3, r2
 800be04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be08:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 f9e0 	bl	80001d4 <__adddf3>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800be1c:	f6a1 5104 	subw	r1, r1, #3332	@ 0xd04
 800be20:	6808      	ldr	r0, [r1, #0]
 800be22:	f8d7 1d3c 	ldr.w	r1, [r7, #3388]	@ 0xd3c
 800be26:	313b      	adds	r1, #59	@ 0x3b
 800be28:	00c9      	lsls	r1, r1, #3
 800be2a:	4401      	add	r1, r0
 800be2c:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 6; i1++) {
 800be30:	2300      	movs	r3, #0
 800be32:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800be36:	e076      	b.n	800bf26 <ekf10Step+0x1e5e>
          d = 0.0;
 800be38:	f04f 0200 	mov.w	r2, #0
 800be3c:	f04f 0300 	mov.w	r3, #0
 800be40:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800be44:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 7; i2++) {
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800be4e:	e035      	b.n	800bebc <ekf10Step+0x1df4>
            d += K[i2][i] * H[i1][i2];
 800be50:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800be54:	f5a3 6142 	sub.w	r1, r3, #3104	@ 0xc20
 800be58:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800be68:	4413      	add	r3, r2
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	440b      	add	r3, r1
 800be6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be72:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800be76:	f5a3 74d8 	sub.w	r4, r3, #432	@ 0x1b0
 800be7a:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800be7e:	4613      	mov	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	1a9b      	subs	r3, r3, r2
 800be84:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800be88:	4413      	add	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	4423      	add	r3, r4
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f7f4 fb55 	bl	8000540 <__aeabi_dmul>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800be9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bea2:	f7f4 f997 	bl	80001d4 <__adddf3>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800beae:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 7; i2++) {
 800beb2:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800beb6:	3301      	adds	r3, #1
 800beb8:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800bebc:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800bec0:	2b06      	cmp	r3, #6
 800bec2:	ddc5      	ble.n	800be50 <ekf10Step+0x1d88>
          b_F[i1][i] = F[i1][i] - d;
 800bec4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bec8:	f5a3 7134 	sub.w	r1, r3, #720	@ 0x2d0
 800becc:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800bed0:	4613      	mov	r3, r2
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	4413      	add	r3, r2
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800bedc:	4413      	add	r3, r2
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	440b      	add	r3, r1
 800bee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bee6:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	f7f4 f96f 	bl	80001d0 <__aeabi_dsub>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800befe:	f5a3 747c 	sub.w	r4, r3, #1008	@ 0x3f0
 800bf02:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800bf12:	4413      	add	r3, r2
 800bf14:	00db      	lsls	r3, r3, #3
 800bf16:	4423      	add	r3, r4
 800bf18:	e9c3 0100 	strd	r0, r1, [r3]
        for (i1 = 0; i1 < 6; i1++) {
 800bf1c:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bf20:	3301      	adds	r3, #1
 800bf22:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800bf26:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	dd84      	ble.n	800be38 <ekf10Step+0x1d70>
        for (i1 = 0; i1 < 6; i1++) {
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800bf34:	e062      	b.n	800bffc <ekf10Step+0x1f34>
          d = 0.0;
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	f04f 0300 	mov.w	r3, #0
 800bf3e:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bf42:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800bf46:	2300      	movs	r3, #0
 800bf48:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800bf4c:	e038      	b.n	800bfc0 <ekf10Step+0x1ef8>
            d += b_F[i2][i] * sys->P[i1][i2];
 800bf4e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bf52:	f5a3 717c 	sub.w	r1, r3, #1008	@ 0x3f0
 800bf56:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	4413      	add	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800bf66:	4413      	add	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	440b      	add	r3, r1
 800bf6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf70:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bf74:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800bf78:	681c      	ldr	r4, [r3, #0]
 800bf7a:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800bf7e:	4613      	mov	r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	4413      	add	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	f8d7 2d34 	ldr.w	r2, [r7, #3380]	@ 0xd34
 800bf8a:	4413      	add	r3, r2
 800bf8c:	3341      	adds	r3, #65	@ 0x41
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	4423      	add	r3, r4
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	f7f4 fad3 	bl	8000540 <__aeabi_dmul>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bfa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa6:	f7f4 f915 	bl	80001d4 <__adddf3>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	f507 6154 	add.w	r1, r7, #3392	@ 0xd40
 800bfb2:	e9c1 2300 	strd	r2, r3, [r1]
          for (i2 = 0; i2 < 6; i2++) {
 800bfb6:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800bfba:	3301      	adds	r3, #1
 800bfbc:	f8c7 3d34 	str.w	r3, [r7, #3380]	@ 0xd34
 800bfc0:	f8d7 3d34 	ldr.w	r3, [r7, #3380]	@ 0xd34
 800bfc4:	2b05      	cmp	r3, #5
 800bfc6:	ddc2      	ble.n	800bf4e <ekf10Step+0x1e86>
          F[i1][i] = d;
 800bfc8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800bfcc:	f5a3 7134 	sub.w	r1, r3, #720	@ 0x2d0
 800bfd0:	f8d7 2d38 	ldr.w	r2, [r7, #3384]	@ 0xd38
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	4413      	add	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	f8d7 2d3c 	ldr.w	r2, [r7, #3388]	@ 0xd3c
 800bfe0:	4413      	add	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	4419      	add	r1, r3
 800bfe6:	f507 6354 	add.w	r3, r7, #3392	@ 0xd40
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	e9c1 2300 	strd	r2, r3, [r1]
        for (i1 = 0; i1 < 6; i1++) {
 800bff2:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800bff6:	3301      	adds	r3, #1
 800bff8:	f8c7 3d38 	str.w	r3, [r7, #3384]	@ 0xd38
 800bffc:	f8d7 3d38 	ldr.w	r3, [r7, #3384]	@ 0xd38
 800c000:	2b05      	cmp	r3, #5
 800c002:	dd98      	ble.n	800bf36 <ekf10Step+0x1e6e>
      for (i = 0; i < 6; i++) {
 800c004:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800c008:	3301      	adds	r3, #1
 800c00a:	f8c7 3d3c 	str.w	r3, [r7, #3388]	@ 0xd3c
 800c00e:	f8d7 3d3c 	ldr.w	r3, [r7, #3388]	@ 0xd3c
 800c012:	2b05      	cmp	r3, #5
 800c014:	f77f aeae 	ble.w	800bd74 <ekf10Step+0x1cac>
      memcpy(&sys->P[0][0], &F[0][0], 36U * sizeof(double));
 800c018:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c01c:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800c026:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 800c02a:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f9da 	bl	800c3e8 <memcpy>
      h_global[0] = sys->x[0];
 800c034:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c038:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800c042:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c046:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800c04a:	e9c1 2300 	strd	r2, r3, [r1]
      h_global[1] = sys->x[1];
 800c04e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c052:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	@ 0x1e0
 800c05c:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c060:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800c064:	e9c1 2302 	strd	r2, r3, [r1, #8]
      h_global[2] = sys->x[2];
 800c068:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c06c:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	@ 0x1e8
 800c076:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c07a:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800c07e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      h_global[3] = sys->x[3];
 800c082:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c086:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	@ 0x1f0
 800c090:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c094:	f5a1 614e 	sub.w	r1, r1, #3296	@ 0xce0
 800c098:	e9c1 2306 	strd	r2, r3, [r1, #24]
      quatnormalize(h_global);
 800c09c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fd fd65 	bl	8009b70 <quatnormalize>
      sys->x[0] = h_global[0];
 800c0a6:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c0aa:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c0b6:	f6a1 5104 	subw	r1, r1, #3332	@ 0xd04
 800c0ba:	6809      	ldr	r1, [r1, #0]
 800c0bc:	e9c1 2376 	strd	r2, r3, [r1, #472]	@ 0x1d8
      sys->x[1] = h_global[1];
 800c0c0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c0c4:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800c0c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c0cc:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c0d0:	f6a1 5104 	subw	r1, r1, #3332	@ 0xd04
 800c0d4:	6809      	ldr	r1, [r1, #0]
 800c0d6:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
      sys->x[2] = h_global[2];
 800c0da:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c0de:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800c0e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0e6:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c0ea:	f6a1 5104 	subw	r1, r1, #3332	@ 0xd04
 800c0ee:	6809      	ldr	r1, [r1, #0]
 800c0f0:	e9c1 237a 	strd	r2, r3, [r1, #488]	@ 0x1e8
      sys->x[3] = h_global[3];
 800c0f4:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c0f8:	f5a3 634e 	sub.w	r3, r3, #3296	@ 0xce0
 800c0fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c100:	f507 6155 	add.w	r1, r7, #3408	@ 0xd50
 800c104:	f6a1 5104 	subw	r1, r1, #3332	@ 0xd04
 800c108:	6809      	ldr	r1, [r1, #0]
 800c10a:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
      quat2eul(&sys->x[0], sys->euler);
 800c10e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c112:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
 800c11c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800c120:	f6a3 5304 	subw	r3, r3, #3332	@ 0xd04
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f7fc fea1 	bl	8008e70 <quat2eul>
}
 800c12e:	bf00      	nop
 800c130:	f507 6755 	add.w	r7, r7, #3408	@ 0xd50
 800c134:	46bd      	mov	sp, r7
 800c136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c13a:	bf00      	nop

0800c13c <initStateEKF>:
 *                double initState[6]
 * Return Type  : void
 */
void initStateEKF(const double meanAccel[3], const double meanMag[3],
                  double meanAlti, double initState[6])
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b092      	sub	sp, #72	@ 0x48
 800c140:	af02      	add	r7, sp, #8
 800c142:	6178      	str	r0, [r7, #20]
 800c144:	6139      	str	r1, [r7, #16]
 800c146:	ed87 0b02 	vstr	d0, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
  double q_b;
  double q_c;
  double q_d;
  int i;
  for (i = 0; i < 6; i++) {
 800c14c:	2300      	movs	r3, #0
 800c14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c150:	e00c      	b.n	800c16c <initStateEKF+0x30>
    initState[i] = 0.0;
 800c152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	18d1      	adds	r1, r2, r3
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	f04f 0300 	mov.w	r3, #0
 800c162:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 800c166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c168:	3301      	adds	r3, #1
 800c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c16e:	2b05      	cmp	r3, #5
 800c170:	ddef      	ble.n	800c152 <initStateEKF+0x16>
  }
  double q_a;
  q_a = ecompass(meanAccel, meanMag, &q_b, &q_c, &q_d);
 800c172:	f107 0120 	add.w	r1, r7, #32
 800c176:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c17a:	f107 0318 	add.w	r3, r7, #24
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	460b      	mov	r3, r1
 800c182:	6939      	ldr	r1, [r7, #16]
 800c184:	6978      	ldr	r0, [r7, #20]
 800c186:	f7fb fceb 	bl	8007b60 <ecompass>
 800c18a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
  initState[0] = q_a;
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c194:	e9c1 2300 	strd	r2, r3, [r1]
  initState[1] = q_b;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f103 0108 	add.w	r1, r3, #8
 800c19e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c1a2:	e9c1 2300 	strd	r2, r3, [r1]
  initState[2] = q_c;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f103 0110 	add.w	r1, r3, #16
 800c1ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c1b0:	e9c1 2300 	strd	r2, r3, [r1]
  initState[3] = q_d;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f103 0118 	add.w	r1, r3, #24
 800c1ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1be:	e9c1 2300 	strd	r2, r3, [r1]
  initState[4] = meanAlti;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f103 0120 	add.w	r1, r3, #32
 800c1c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c1d0:	bf00      	nop
 800c1d2:	3740      	adds	r7, #64	@ 0x40
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <mcalib>:
 * Arguments    : const double rawMag[3]
 *                double CorrectMag[3]
 * Return Type  : void
 */
void mcalib(const double rawMag[3], double CorrectMag[3])
{
 800c1d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c1dc:	b08a      	sub	sp, #40	@ 0x28
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]

  double rawMag_idx_0;
  double rawMag_idx_1;
  double rawMag_idx_2;
  int i;
  rawMag_idx_0 = rawMag[0] - 6.386843848016684;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1ea:	a33e      	add	r3, pc, #248	@ (adr r3, 800c2e4 <mcalib+0x10c>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f7f3 ffee 	bl	80001d0 <__aeabi_dsub>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  rawMag_idx_1 = rawMag[1] + 38.816937330020657;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3308      	adds	r3, #8
 800c200:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c204:	a339      	add	r3, pc, #228	@ (adr r3, 800c2ec <mcalib+0x114>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f3 ffe3 	bl	80001d4 <__adddf3>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	e9c7 2304 	strd	r2, r3, [r7, #16]
  rawMag_idx_2 = rawMag[2] - 11.246602136081217;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	3310      	adds	r3, #16
 800c21a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c21e:	a335      	add	r3, pc, #212	@ (adr r3, 800c2f4 <mcalib+0x11c>)
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f7f3 ffd4 	bl	80001d0 <__aeabi_dsub>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < 3; i++) {
 800c230:	2300      	movs	r3, #0
 800c232:	627b      	str	r3, [r7, #36]	@ 0x24
 800c234:	e04b      	b.n	800c2ce <mcalib+0xf6>
    CorrectMag[i] = (rawMag_idx_0 * b[i][0] + rawMag_idx_1 * b[i][1]) +
 800c236:	492a      	ldr	r1, [pc, #168]	@ (800c2e0 <mcalib+0x108>)
 800c238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c23a:	4613      	mov	r3, r2
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	4413      	add	r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	440b      	add	r3, r1
 800c244:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c24c:	f7f4 f978 	bl	8000540 <__aeabi_dmul>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4614      	mov	r4, r2
 800c256:	461d      	mov	r5, r3
 800c258:	4921      	ldr	r1, [pc, #132]	@ (800c2e0 <mcalib+0x108>)
 800c25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	440b      	add	r3, r1
 800c266:	3308      	adds	r3, #8
 800c268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c26c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c270:	f7f4 f966 	bl	8000540 <__aeabi_dmul>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f3 ffaa 	bl	80001d4 <__adddf3>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4690      	mov	r8, r2
 800c286:	4699      	mov	r9, r3
                    rawMag_idx_2 * b[i][2];
 800c288:	4915      	ldr	r1, [pc, #84]	@ (800c2e0 <mcalib+0x108>)
 800c28a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	3310      	adds	r3, #16
 800c298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c29c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2a0:	f7f4 f94e 	bl	8000540 <__aeabi_dmul>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4619      	mov	r1, r3
    CorrectMag[i] = (rawMag_idx_0 * b[i][0] + rawMag_idx_1 * b[i][1]) +
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	18d4      	adds	r4, r2, r3
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	f7f3 ff8a 	bl	80001d4 <__adddf3>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	e9c4 2300 	strd	r2, r3, [r4]
  for (i = 0; i < 3; i++) {
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	ddb0      	ble.n	800c236 <mcalib+0x5e>
  }
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	3728      	adds	r7, #40	@ 0x28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c2e0:	0800dde0 	.word	0x0800dde0
 800c2e4:	cb2f8fd3 	.word	0xcb2f8fd3
 800c2e8:	40198c20 	.word	0x40198c20
 800c2ec:	6705a8ff 	.word	0x6705a8ff
 800c2f0:	40436891 	.word	0x40436891
 800c2f4:	a29b2f65 	.word	0xa29b2f65
 800c2f8:	40267e42 	.word	0x40267e42

0800c2fc <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 800c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800c306:	683c      	ldr	r4, [r7, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800c30e:	2301      	movs	r3, #1
 800c310:	461e      	mov	r6, r3
 800c312:	f04f 32ff 	mov.w	r2, #4294967295
 800c316:	4b0f      	ldr	r3, [pc, #60]	@ (800c354 <rtIsInf+0x58>)
 800c318:	4620      	mov	r0, r4
 800c31a:	4629      	mov	r1, r5
 800c31c:	f7f4 fbaa 	bl	8000a74 <__aeabi_dcmpun>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <rtIsInf+0x42>
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	4b0a      	ldr	r3, [pc, #40]	@ (800c354 <rtIsInf+0x58>)
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 fb82 	bl	8000a38 <__aeabi_dcmple>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <rtIsInf+0x42>
 800c33a:	2300      	movs	r3, #0
 800c33c:	461e      	mov	r6, r3
 800c33e:	b2f3      	uxtb	r3, r6
 800c340:	f083 0301 	eor.w	r3, r3, #1
 800c344:	b2db      	uxtb	r3, r3
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	b2db      	uxtb	r3, r3
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c354:	7fefffff 	.word	0x7fefffff

0800c358 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800c362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c36a:	f7f4 fb83 	bl	8000a74 <__aeabi_dcmpun>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <rtIsNaN+0x20>
 800c374:	2301      	movs	r3, #1
 800c376:	e000      	b.n	800c37a <rtIsNaN+0x22>
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <memset>:
 800c382:	4402      	add	r2, r0
 800c384:	4603      	mov	r3, r0
 800c386:	4293      	cmp	r3, r2
 800c388:	d100      	bne.n	800c38c <memset+0xa>
 800c38a:	4770      	bx	lr
 800c38c:	f803 1b01 	strb.w	r1, [r3], #1
 800c390:	e7f9      	b.n	800c386 <memset+0x4>
	...

0800c394 <__errno>:
 800c394:	4b01      	ldr	r3, [pc, #4]	@ (800c39c <__errno+0x8>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20000040 	.word	0x20000040

0800c3a0 <__libc_init_array>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	4d0d      	ldr	r5, [pc, #52]	@ (800c3d8 <__libc_init_array+0x38>)
 800c3a4:	4c0d      	ldr	r4, [pc, #52]	@ (800c3dc <__libc_init_array+0x3c>)
 800c3a6:	1b64      	subs	r4, r4, r5
 800c3a8:	10a4      	asrs	r4, r4, #2
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	42a6      	cmp	r6, r4
 800c3ae:	d109      	bne.n	800c3c4 <__libc_init_array+0x24>
 800c3b0:	4d0b      	ldr	r5, [pc, #44]	@ (800c3e0 <__libc_init_array+0x40>)
 800c3b2:	4c0c      	ldr	r4, [pc, #48]	@ (800c3e4 <__libc_init_array+0x44>)
 800c3b4:	f001 fcd0 	bl	800dd58 <_init>
 800c3b8:	1b64      	subs	r4, r4, r5
 800c3ba:	10a4      	asrs	r4, r4, #2
 800c3bc:	2600      	movs	r6, #0
 800c3be:	42a6      	cmp	r6, r4
 800c3c0:	d105      	bne.n	800c3ce <__libc_init_array+0x2e>
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c8:	4798      	blx	r3
 800c3ca:	3601      	adds	r6, #1
 800c3cc:	e7ee      	b.n	800c3ac <__libc_init_array+0xc>
 800c3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d2:	4798      	blx	r3
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	e7f2      	b.n	800c3be <__libc_init_array+0x1e>
 800c3d8:	0800ded8 	.word	0x0800ded8
 800c3dc:	0800ded8 	.word	0x0800ded8
 800c3e0:	0800ded8 	.word	0x0800ded8
 800c3e4:	0800dedc 	.word	0x0800dedc

0800c3e8 <memcpy>:
 800c3e8:	440a      	add	r2, r1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f0:	d100      	bne.n	800c3f4 <memcpy+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fe:	4291      	cmp	r1, r2
 800c400:	d1f9      	bne.n	800c3f6 <memcpy+0xe>
 800c402:	bd10      	pop	{r4, pc}

0800c404 <asin>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	ed2d 8b02 	vpush	{d8}
 800c40a:	ec55 4b10 	vmov	r4, r5, d0
 800c40e:	f000 fa3f 	bl	800c890 <__ieee754_asin>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	4620      	mov	r0, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	eeb0 8a40 	vmov.f32	s16, s0
 800c41e:	eef0 8a60 	vmov.f32	s17, s1
 800c422:	f7f4 fb27 	bl	8000a74 <__aeabi_dcmpun>
 800c426:	b9a8      	cbnz	r0, 800c454 <asin+0x50>
 800c428:	ec45 4b10 	vmov	d0, r4, r5
 800c42c:	f000 f8bc 	bl	800c5a8 <fabs>
 800c430:	4b0c      	ldr	r3, [pc, #48]	@ (800c464 <asin+0x60>)
 800c432:	ec51 0b10 	vmov	r0, r1, d0
 800c436:	2200      	movs	r2, #0
 800c438:	f7f4 fb12 	bl	8000a60 <__aeabi_dcmpgt>
 800c43c:	b150      	cbz	r0, 800c454 <asin+0x50>
 800c43e:	f7ff ffa9 	bl	800c394 <__errno>
 800c442:	ecbd 8b02 	vpop	{d8}
 800c446:	2321      	movs	r3, #33	@ 0x21
 800c448:	6003      	str	r3, [r0, #0]
 800c44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c44e:	4806      	ldr	r0, [pc, #24]	@ (800c468 <asin+0x64>)
 800c450:	f000 b8be 	b.w	800c5d0 <nan>
 800c454:	eeb0 0a48 	vmov.f32	s0, s16
 800c458:	eef0 0a68 	vmov.f32	s1, s17
 800c45c:	ecbd 8b02 	vpop	{d8}
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	3ff00000 	.word	0x3ff00000
 800c468:	0800de28 	.word	0x0800de28

0800c46c <atan2>:
 800c46c:	f000 bc14 	b.w	800cc98 <__ieee754_atan2>

0800c470 <pow>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	ed2d 8b02 	vpush	{d8}
 800c476:	eeb0 8a40 	vmov.f32	s16, s0
 800c47a:	eef0 8a60 	vmov.f32	s17, s1
 800c47e:	ec55 4b11 	vmov	r4, r5, d1
 800c482:	f000 fcd1 	bl	800ce28 <__ieee754_pow>
 800c486:	4622      	mov	r2, r4
 800c488:	462b      	mov	r3, r5
 800c48a:	4620      	mov	r0, r4
 800c48c:	4629      	mov	r1, r5
 800c48e:	ec57 6b10 	vmov	r6, r7, d0
 800c492:	f7f4 faef 	bl	8000a74 <__aeabi_dcmpun>
 800c496:	2800      	cmp	r0, #0
 800c498:	d13b      	bne.n	800c512 <pow+0xa2>
 800c49a:	ec51 0b18 	vmov	r0, r1, d8
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f7f4 fab5 	bl	8000a10 <__aeabi_dcmpeq>
 800c4a6:	b1b8      	cbz	r0, 800c4d8 <pow+0x68>
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7f4 faae 	bl	8000a10 <__aeabi_dcmpeq>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d146      	bne.n	800c546 <pow+0xd6>
 800c4b8:	ec45 4b10 	vmov	d0, r4, r5
 800c4bc:	f000 f87c 	bl	800c5b8 <finite>
 800c4c0:	b338      	cbz	r0, 800c512 <pow+0xa2>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f4 faab 	bl	8000a24 <__aeabi_dcmplt>
 800c4ce:	b300      	cbz	r0, 800c512 <pow+0xa2>
 800c4d0:	f7ff ff60 	bl	800c394 <__errno>
 800c4d4:	2322      	movs	r3, #34	@ 0x22
 800c4d6:	e01b      	b.n	800c510 <pow+0xa0>
 800c4d8:	ec47 6b10 	vmov	d0, r6, r7
 800c4dc:	f000 f86c 	bl	800c5b8 <finite>
 800c4e0:	b9e0      	cbnz	r0, 800c51c <pow+0xac>
 800c4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800c4e6:	eef0 0a68 	vmov.f32	s1, s17
 800c4ea:	f000 f865 	bl	800c5b8 <finite>
 800c4ee:	b1a8      	cbz	r0, 800c51c <pow+0xac>
 800c4f0:	ec45 4b10 	vmov	d0, r4, r5
 800c4f4:	f000 f860 	bl	800c5b8 <finite>
 800c4f8:	b180      	cbz	r0, 800c51c <pow+0xac>
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	463b      	mov	r3, r7
 800c4fe:	4630      	mov	r0, r6
 800c500:	4639      	mov	r1, r7
 800c502:	f7f4 fab7 	bl	8000a74 <__aeabi_dcmpun>
 800c506:	2800      	cmp	r0, #0
 800c508:	d0e2      	beq.n	800c4d0 <pow+0x60>
 800c50a:	f7ff ff43 	bl	800c394 <__errno>
 800c50e:	2321      	movs	r3, #33	@ 0x21
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	ecbd 8b02 	vpop	{d8}
 800c516:	ec47 6b10 	vmov	d0, r6, r7
 800c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51c:	2200      	movs	r2, #0
 800c51e:	2300      	movs	r3, #0
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	f7f4 fa74 	bl	8000a10 <__aeabi_dcmpeq>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d0f2      	beq.n	800c512 <pow+0xa2>
 800c52c:	eeb0 0a48 	vmov.f32	s0, s16
 800c530:	eef0 0a68 	vmov.f32	s1, s17
 800c534:	f000 f840 	bl	800c5b8 <finite>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d0ea      	beq.n	800c512 <pow+0xa2>
 800c53c:	ec45 4b10 	vmov	d0, r4, r5
 800c540:	f000 f83a 	bl	800c5b8 <finite>
 800c544:	e7c3      	b.n	800c4ce <pow+0x5e>
 800c546:	4f01      	ldr	r7, [pc, #4]	@ (800c54c <pow+0xdc>)
 800c548:	2600      	movs	r6, #0
 800c54a:	e7e2      	b.n	800c512 <pow+0xa2>
 800c54c:	3ff00000 	.word	0x3ff00000

0800c550 <sqrt>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	ed2d 8b02 	vpush	{d8}
 800c556:	ec55 4b10 	vmov	r4, r5, d0
 800c55a:	f000 f841 	bl	800c5e0 <__ieee754_sqrt>
 800c55e:	4622      	mov	r2, r4
 800c560:	462b      	mov	r3, r5
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	eeb0 8a40 	vmov.f32	s16, s0
 800c56a:	eef0 8a60 	vmov.f32	s17, s1
 800c56e:	f7f4 fa81 	bl	8000a74 <__aeabi_dcmpun>
 800c572:	b990      	cbnz	r0, 800c59a <sqrt+0x4a>
 800c574:	2200      	movs	r2, #0
 800c576:	2300      	movs	r3, #0
 800c578:	4620      	mov	r0, r4
 800c57a:	4629      	mov	r1, r5
 800c57c:	f7f4 fa52 	bl	8000a24 <__aeabi_dcmplt>
 800c580:	b158      	cbz	r0, 800c59a <sqrt+0x4a>
 800c582:	f7ff ff07 	bl	800c394 <__errno>
 800c586:	2321      	movs	r3, #33	@ 0x21
 800c588:	6003      	str	r3, [r0, #0]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	4610      	mov	r0, r2
 800c590:	4619      	mov	r1, r3
 800c592:	f7f4 f8ff 	bl	8000794 <__aeabi_ddiv>
 800c596:	ec41 0b18 	vmov	d8, r0, r1
 800c59a:	eeb0 0a48 	vmov.f32	s0, s16
 800c59e:	eef0 0a68 	vmov.f32	s1, s17
 800c5a2:	ecbd 8b02 	vpop	{d8}
 800c5a6:	bd38      	pop	{r3, r4, r5, pc}

0800c5a8 <fabs>:
 800c5a8:	ec51 0b10 	vmov	r0, r1, d0
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c5b2:	ec43 2b10 	vmov	d0, r2, r3
 800c5b6:	4770      	bx	lr

0800c5b8 <finite>:
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	ed8d 0b00 	vstr	d0, [sp]
 800c5be:	9801      	ldr	r0, [sp, #4]
 800c5c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c5c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c5c8:	0fc0      	lsrs	r0, r0, #31
 800c5ca:	b002      	add	sp, #8
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <nan>:
 800c5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c5d8 <nan+0x8>
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	00000000 	.word	0x00000000
 800c5dc:	7ff80000 	.word	0x7ff80000

0800c5e0 <__ieee754_sqrt>:
 800c5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	4a68      	ldr	r2, [pc, #416]	@ (800c788 <__ieee754_sqrt+0x1a8>)
 800c5e6:	ec55 4b10 	vmov	r4, r5, d0
 800c5ea:	43aa      	bics	r2, r5
 800c5ec:	462b      	mov	r3, r5
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	d110      	bne.n	800c614 <__ieee754_sqrt+0x34>
 800c5f2:	4622      	mov	r2, r4
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 ffa2 	bl	8000540 <__aeabi_dmul>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4620      	mov	r0, r4
 800c602:	4629      	mov	r1, r5
 800c604:	f7f3 fde6 	bl	80001d4 <__adddf3>
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	ec45 4b10 	vmov	d0, r4, r5
 800c610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c614:	2d00      	cmp	r5, #0
 800c616:	dc0e      	bgt.n	800c636 <__ieee754_sqrt+0x56>
 800c618:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c61c:	4322      	orrs	r2, r4
 800c61e:	d0f5      	beq.n	800c60c <__ieee754_sqrt+0x2c>
 800c620:	b19d      	cbz	r5, 800c64a <__ieee754_sqrt+0x6a>
 800c622:	4622      	mov	r2, r4
 800c624:	4620      	mov	r0, r4
 800c626:	4629      	mov	r1, r5
 800c628:	f7f3 fdd2 	bl	80001d0 <__aeabi_dsub>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	f7f4 f8b0 	bl	8000794 <__aeabi_ddiv>
 800c634:	e7e8      	b.n	800c608 <__ieee754_sqrt+0x28>
 800c636:	152a      	asrs	r2, r5, #20
 800c638:	d115      	bne.n	800c666 <__ieee754_sqrt+0x86>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e009      	b.n	800c652 <__ieee754_sqrt+0x72>
 800c63e:	0acb      	lsrs	r3, r1, #11
 800c640:	3a15      	subs	r2, #21
 800c642:	0549      	lsls	r1, r1, #21
 800c644:	2b00      	cmp	r3, #0
 800c646:	d0fa      	beq.n	800c63e <__ieee754_sqrt+0x5e>
 800c648:	e7f7      	b.n	800c63a <__ieee754_sqrt+0x5a>
 800c64a:	462a      	mov	r2, r5
 800c64c:	e7fa      	b.n	800c644 <__ieee754_sqrt+0x64>
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	3001      	adds	r0, #1
 800c652:	02dc      	lsls	r4, r3, #11
 800c654:	d5fb      	bpl.n	800c64e <__ieee754_sqrt+0x6e>
 800c656:	1e44      	subs	r4, r0, #1
 800c658:	1b12      	subs	r2, r2, r4
 800c65a:	f1c0 0420 	rsb	r4, r0, #32
 800c65e:	fa21 f404 	lsr.w	r4, r1, r4
 800c662:	4323      	orrs	r3, r4
 800c664:	4081      	lsls	r1, r0
 800c666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c66a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c66e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c672:	07d2      	lsls	r2, r2, #31
 800c674:	bf5c      	itt	pl
 800c676:	005b      	lslpl	r3, r3, #1
 800c678:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c67c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c680:	bf58      	it	pl
 800c682:	0049      	lslpl	r1, r1, #1
 800c684:	2600      	movs	r6, #0
 800c686:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c68a:	106d      	asrs	r5, r5, #1
 800c68c:	0049      	lsls	r1, r1, #1
 800c68e:	2016      	movs	r0, #22
 800c690:	4632      	mov	r2, r6
 800c692:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c696:	1917      	adds	r7, r2, r4
 800c698:	429f      	cmp	r7, r3
 800c69a:	bfde      	ittt	le
 800c69c:	193a      	addle	r2, r7, r4
 800c69e:	1bdb      	suble	r3, r3, r7
 800c6a0:	1936      	addle	r6, r6, r4
 800c6a2:	0fcf      	lsrs	r7, r1, #31
 800c6a4:	3801      	subs	r0, #1
 800c6a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c6aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c6b2:	d1f0      	bne.n	800c696 <__ieee754_sqrt+0xb6>
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	2720      	movs	r7, #32
 800c6b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	eb00 0e0c 	add.w	lr, r0, ip
 800c6c2:	db02      	blt.n	800c6ca <__ieee754_sqrt+0xea>
 800c6c4:	d113      	bne.n	800c6ee <__ieee754_sqrt+0x10e>
 800c6c6:	458e      	cmp	lr, r1
 800c6c8:	d811      	bhi.n	800c6ee <__ieee754_sqrt+0x10e>
 800c6ca:	f1be 0f00 	cmp.w	lr, #0
 800c6ce:	eb0e 000c 	add.w	r0, lr, ip
 800c6d2:	da42      	bge.n	800c75a <__ieee754_sqrt+0x17a>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	db40      	blt.n	800c75a <__ieee754_sqrt+0x17a>
 800c6d8:	f102 0801 	add.w	r8, r2, #1
 800c6dc:	1a9b      	subs	r3, r3, r2
 800c6de:	458e      	cmp	lr, r1
 800c6e0:	bf88      	it	hi
 800c6e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c6e6:	eba1 010e 	sub.w	r1, r1, lr
 800c6ea:	4464      	add	r4, ip
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c6f2:	3f01      	subs	r7, #1
 800c6f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c6f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c700:	d1dc      	bne.n	800c6bc <__ieee754_sqrt+0xdc>
 800c702:	4319      	orrs	r1, r3
 800c704:	d01b      	beq.n	800c73e <__ieee754_sqrt+0x15e>
 800c706:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c78c <__ieee754_sqrt+0x1ac>
 800c70a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c790 <__ieee754_sqrt+0x1b0>
 800c70e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c712:	e9db 2300 	ldrd	r2, r3, [fp]
 800c716:	f7f3 fd5b 	bl	80001d0 <__aeabi_dsub>
 800c71a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4640      	mov	r0, r8
 800c724:	4649      	mov	r1, r9
 800c726:	f7f4 f987 	bl	8000a38 <__aeabi_dcmple>
 800c72a:	b140      	cbz	r0, 800c73e <__ieee754_sqrt+0x15e>
 800c72c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c730:	e9da 0100 	ldrd	r0, r1, [sl]
 800c734:	e9db 2300 	ldrd	r2, r3, [fp]
 800c738:	d111      	bne.n	800c75e <__ieee754_sqrt+0x17e>
 800c73a:	3601      	adds	r6, #1
 800c73c:	463c      	mov	r4, r7
 800c73e:	1072      	asrs	r2, r6, #1
 800c740:	0863      	lsrs	r3, r4, #1
 800c742:	07f1      	lsls	r1, r6, #31
 800c744:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c748:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c74c:	bf48      	it	mi
 800c74e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c752:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c756:	4618      	mov	r0, r3
 800c758:	e756      	b.n	800c608 <__ieee754_sqrt+0x28>
 800c75a:	4690      	mov	r8, r2
 800c75c:	e7be      	b.n	800c6dc <__ieee754_sqrt+0xfc>
 800c75e:	f7f3 fd39 	bl	80001d4 <__adddf3>
 800c762:	e9da 8900 	ldrd	r8, r9, [sl]
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4640      	mov	r0, r8
 800c76c:	4649      	mov	r1, r9
 800c76e:	f7f4 f959 	bl	8000a24 <__aeabi_dcmplt>
 800c772:	b120      	cbz	r0, 800c77e <__ieee754_sqrt+0x19e>
 800c774:	1ca0      	adds	r0, r4, #2
 800c776:	bf08      	it	eq
 800c778:	3601      	addeq	r6, #1
 800c77a:	3402      	adds	r4, #2
 800c77c:	e7df      	b.n	800c73e <__ieee754_sqrt+0x15e>
 800c77e:	1c63      	adds	r3, r4, #1
 800c780:	f023 0401 	bic.w	r4, r3, #1
 800c784:	e7db      	b.n	800c73e <__ieee754_sqrt+0x15e>
 800c786:	bf00      	nop
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	20000098 	.word	0x20000098
 800c790:	20000090 	.word	0x20000090
 800c794:	00000000 	.word	0x00000000

0800c798 <floor>:
 800c798:	ec51 0b10 	vmov	r0, r1, d0
 800c79c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c7a8:	2e13      	cmp	r6, #19
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	4680      	mov	r8, r0
 800c7b0:	dc34      	bgt.n	800c81c <floor+0x84>
 800c7b2:	2e00      	cmp	r6, #0
 800c7b4:	da17      	bge.n	800c7e6 <floor+0x4e>
 800c7b6:	a332      	add	r3, pc, #200	@ (adr r3, 800c880 <floor+0xe8>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f3 fd0a 	bl	80001d4 <__adddf3>
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f7f4 f94c 	bl	8000a60 <__aeabi_dcmpgt>
 800c7c8:	b150      	cbz	r0, 800c7e0 <floor+0x48>
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	da55      	bge.n	800c87a <floor+0xe2>
 800c7ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c7d2:	432c      	orrs	r4, r5
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	42ac      	cmp	r4, r5
 800c7d8:	4c2b      	ldr	r4, [pc, #172]	@ (800c888 <floor+0xf0>)
 800c7da:	bf08      	it	eq
 800c7dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	e023      	b.n	800c82e <floor+0x96>
 800c7e6:	4f29      	ldr	r7, [pc, #164]	@ (800c88c <floor+0xf4>)
 800c7e8:	4137      	asrs	r7, r6
 800c7ea:	ea01 0307 	and.w	r3, r1, r7
 800c7ee:	4303      	orrs	r3, r0
 800c7f0:	d01d      	beq.n	800c82e <floor+0x96>
 800c7f2:	a323      	add	r3, pc, #140	@ (adr r3, 800c880 <floor+0xe8>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	f7f3 fcec 	bl	80001d4 <__adddf3>
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	f7f4 f92e 	bl	8000a60 <__aeabi_dcmpgt>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0eb      	beq.n	800c7e0 <floor+0x48>
 800c808:	2c00      	cmp	r4, #0
 800c80a:	bfbe      	ittt	lt
 800c80c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c810:	4133      	asrlt	r3, r6
 800c812:	18e4      	addlt	r4, r4, r3
 800c814:	ea24 0407 	bic.w	r4, r4, r7
 800c818:	2500      	movs	r5, #0
 800c81a:	e7e1      	b.n	800c7e0 <floor+0x48>
 800c81c:	2e33      	cmp	r6, #51	@ 0x33
 800c81e:	dd0a      	ble.n	800c836 <floor+0x9e>
 800c820:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c824:	d103      	bne.n	800c82e <floor+0x96>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	f7f3 fcd3 	bl	80001d4 <__adddf3>
 800c82e:	ec41 0b10 	vmov	d0, r0, r1
 800c832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c836:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c83a:	f04f 37ff 	mov.w	r7, #4294967295
 800c83e:	40df      	lsrs	r7, r3
 800c840:	4207      	tst	r7, r0
 800c842:	d0f4      	beq.n	800c82e <floor+0x96>
 800c844:	a30e      	add	r3, pc, #56	@ (adr r3, 800c880 <floor+0xe8>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f7f3 fcc3 	bl	80001d4 <__adddf3>
 800c84e:	2200      	movs	r2, #0
 800c850:	2300      	movs	r3, #0
 800c852:	f7f4 f905 	bl	8000a60 <__aeabi_dcmpgt>
 800c856:	2800      	cmp	r0, #0
 800c858:	d0c2      	beq.n	800c7e0 <floor+0x48>
 800c85a:	2c00      	cmp	r4, #0
 800c85c:	da0a      	bge.n	800c874 <floor+0xdc>
 800c85e:	2e14      	cmp	r6, #20
 800c860:	d101      	bne.n	800c866 <floor+0xce>
 800c862:	3401      	adds	r4, #1
 800c864:	e006      	b.n	800c874 <floor+0xdc>
 800c866:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c86a:	2301      	movs	r3, #1
 800c86c:	40b3      	lsls	r3, r6
 800c86e:	441d      	add	r5, r3
 800c870:	4545      	cmp	r5, r8
 800c872:	d3f6      	bcc.n	800c862 <floor+0xca>
 800c874:	ea25 0507 	bic.w	r5, r5, r7
 800c878:	e7b2      	b.n	800c7e0 <floor+0x48>
 800c87a:	2500      	movs	r5, #0
 800c87c:	462c      	mov	r4, r5
 800c87e:	e7af      	b.n	800c7e0 <floor+0x48>
 800c880:	8800759c 	.word	0x8800759c
 800c884:	7e37e43c 	.word	0x7e37e43c
 800c888:	bff00000 	.word	0xbff00000
 800c88c:	000fffff 	.word	0x000fffff

0800c890 <__ieee754_asin>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	ec55 4b10 	vmov	r4, r5, d0
 800c898:	4bc7      	ldr	r3, [pc, #796]	@ (800cbb8 <__ieee754_asin+0x328>)
 800c89a:	b087      	sub	sp, #28
 800c89c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c8a0:	429e      	cmp	r6, r3
 800c8a2:	9501      	str	r5, [sp, #4]
 800c8a4:	d92d      	bls.n	800c902 <__ieee754_asin+0x72>
 800c8a6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800c8aa:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c8ae:	4326      	orrs	r6, r4
 800c8b0:	d116      	bne.n	800c8e0 <__ieee754_asin+0x50>
 800c8b2:	a3a7      	add	r3, pc, #668	@ (adr r3, 800cb50 <__ieee754_asin+0x2c0>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fe40 	bl	8000540 <__aeabi_dmul>
 800c8c0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800cb58 <__ieee754_asin+0x2c8>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	460f      	mov	r7, r1
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f3 fe37 	bl	8000540 <__aeabi_dmul>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	f7f3 fc7b 	bl	80001d4 <__adddf3>
 800c8de:	e009      	b.n	800c8f4 <__ieee754_asin+0x64>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fc72 	bl	80001d0 <__aeabi_dsub>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	f7f3 ff50 	bl	8000794 <__aeabi_ddiv>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	460d      	mov	r5, r1
 800c8f8:	ec45 4b10 	vmov	d0, r4, r5
 800c8fc:	b007      	add	sp, #28
 800c8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c902:	4bae      	ldr	r3, [pc, #696]	@ (800cbbc <__ieee754_asin+0x32c>)
 800c904:	429e      	cmp	r6, r3
 800c906:	d810      	bhi.n	800c92a <__ieee754_asin+0x9a>
 800c908:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800c90c:	f080 80ad 	bcs.w	800ca6a <__ieee754_asin+0x1da>
 800c910:	a393      	add	r3, pc, #588	@ (adr r3, 800cb60 <__ieee754_asin+0x2d0>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	4620      	mov	r0, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	f7f3 fc5b 	bl	80001d4 <__adddf3>
 800c91e:	4ba8      	ldr	r3, [pc, #672]	@ (800cbc0 <__ieee754_asin+0x330>)
 800c920:	2200      	movs	r2, #0
 800c922:	f7f4 f89d 	bl	8000a60 <__aeabi_dcmpgt>
 800c926:	2800      	cmp	r0, #0
 800c928:	d1e6      	bne.n	800c8f8 <__ieee754_asin+0x68>
 800c92a:	ec45 4b10 	vmov	d0, r4, r5
 800c92e:	f7ff fe3b 	bl	800c5a8 <fabs>
 800c932:	49a3      	ldr	r1, [pc, #652]	@ (800cbc0 <__ieee754_asin+0x330>)
 800c934:	ec53 2b10 	vmov	r2, r3, d0
 800c938:	2000      	movs	r0, #0
 800c93a:	f7f3 fc49 	bl	80001d0 <__aeabi_dsub>
 800c93e:	4ba1      	ldr	r3, [pc, #644]	@ (800cbc4 <__ieee754_asin+0x334>)
 800c940:	2200      	movs	r2, #0
 800c942:	f7f3 fdfd 	bl	8000540 <__aeabi_dmul>
 800c946:	a388      	add	r3, pc, #544	@ (adr r3, 800cb68 <__ieee754_asin+0x2d8>)
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	4604      	mov	r4, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	f7f3 fdf6 	bl	8000540 <__aeabi_dmul>
 800c954:	a386      	add	r3, pc, #536	@ (adr r3, 800cb70 <__ieee754_asin+0x2e0>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc3b 	bl	80001d4 <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fded 	bl	8000540 <__aeabi_dmul>
 800c966:	a384      	add	r3, pc, #528	@ (adr r3, 800cb78 <__ieee754_asin+0x2e8>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc30 	bl	80001d0 <__aeabi_dsub>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fde4 	bl	8000540 <__aeabi_dmul>
 800c978:	a381      	add	r3, pc, #516	@ (adr r3, 800cb80 <__ieee754_asin+0x2f0>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc29 	bl	80001d4 <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fddb 	bl	8000540 <__aeabi_dmul>
 800c98a:	a37f      	add	r3, pc, #508	@ (adr r3, 800cb88 <__ieee754_asin+0x2f8>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc1e 	bl	80001d0 <__aeabi_dsub>
 800c994:	4622      	mov	r2, r4
 800c996:	462b      	mov	r3, r5
 800c998:	f7f3 fdd2 	bl	8000540 <__aeabi_dmul>
 800c99c:	a37c      	add	r3, pc, #496	@ (adr r3, 800cb90 <__ieee754_asin+0x300>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc17 	bl	80001d4 <__adddf3>
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	462b      	mov	r3, r5
 800c9aa:	f7f3 fdc9 	bl	8000540 <__aeabi_dmul>
 800c9ae:	a37a      	add	r3, pc, #488	@ (adr r3, 800cb98 <__ieee754_asin+0x308>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f7f3 fdc0 	bl	8000540 <__aeabi_dmul>
 800c9c0:	a377      	add	r3, pc, #476	@ (adr r3, 800cba0 <__ieee754_asin+0x310>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc03 	bl	80001d0 <__aeabi_dsub>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	f7f3 fdb7 	bl	8000540 <__aeabi_dmul>
 800c9d2:	a375      	add	r3, pc, #468	@ (adr r3, 800cba8 <__ieee754_asin+0x318>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fbfc 	bl	80001d4 <__adddf3>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	462b      	mov	r3, r5
 800c9e0:	f7f3 fdae 	bl	8000540 <__aeabi_dmul>
 800c9e4:	a372      	add	r3, pc, #456	@ (adr r3, 800cbb0 <__ieee754_asin+0x320>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fbf1 	bl	80001d0 <__aeabi_dsub>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	f7f3 fda5 	bl	8000540 <__aeabi_dmul>
 800c9f6:	4b72      	ldr	r3, [pc, #456]	@ (800cbc0 <__ieee754_asin+0x330>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f7f3 fbeb 	bl	80001d4 <__adddf3>
 800c9fe:	ec45 4b10 	vmov	d0, r4, r5
 800ca02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca06:	f7ff fdeb 	bl	800c5e0 <__ieee754_sqrt>
 800ca0a:	4b6f      	ldr	r3, [pc, #444]	@ (800cbc8 <__ieee754_asin+0x338>)
 800ca0c:	429e      	cmp	r6, r3
 800ca0e:	ec5b ab10 	vmov	sl, fp, d0
 800ca12:	f240 80db 	bls.w	800cbcc <__ieee754_asin+0x33c>
 800ca16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca1e:	f7f3 feb9 	bl	8000794 <__aeabi_ddiv>
 800ca22:	4652      	mov	r2, sl
 800ca24:	465b      	mov	r3, fp
 800ca26:	f7f3 fd8b 	bl	8000540 <__aeabi_dmul>
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	f7f3 fbd1 	bl	80001d4 <__adddf3>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	f7f3 fbcd 	bl	80001d4 <__adddf3>
 800ca3a:	a347      	add	r3, pc, #284	@ (adr r3, 800cb58 <__ieee754_asin+0x2c8>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f7f3 fbc6 	bl	80001d0 <__aeabi_dsub>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	a141      	add	r1, pc, #260	@ (adr r1, 800cb50 <__ieee754_asin+0x2c0>)
 800ca4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca4e:	f7f3 fbbf 	bl	80001d0 <__aeabi_dsub>
 800ca52:	9b01      	ldr	r3, [sp, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfdc      	itt	le
 800ca58:	4602      	movle	r2, r0
 800ca5a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800ca5e:	4604      	mov	r4, r0
 800ca60:	460d      	mov	r5, r1
 800ca62:	bfdc      	itt	le
 800ca64:	4614      	movle	r4, r2
 800ca66:	461d      	movle	r5, r3
 800ca68:	e746      	b.n	800c8f8 <__ieee754_asin+0x68>
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fd65 	bl	8000540 <__aeabi_dmul>
 800ca76:	a33c      	add	r3, pc, #240	@ (adr r3, 800cb68 <__ieee754_asin+0x2d8>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	4606      	mov	r6, r0
 800ca7e:	460f      	mov	r7, r1
 800ca80:	f7f3 fd5e 	bl	8000540 <__aeabi_dmul>
 800ca84:	a33a      	add	r3, pc, #232	@ (adr r3, 800cb70 <__ieee754_asin+0x2e0>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fba3 	bl	80001d4 <__adddf3>
 800ca8e:	4632      	mov	r2, r6
 800ca90:	463b      	mov	r3, r7
 800ca92:	f7f3 fd55 	bl	8000540 <__aeabi_dmul>
 800ca96:	a338      	add	r3, pc, #224	@ (adr r3, 800cb78 <__ieee754_asin+0x2e8>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	f7f3 fb98 	bl	80001d0 <__aeabi_dsub>
 800caa0:	4632      	mov	r2, r6
 800caa2:	463b      	mov	r3, r7
 800caa4:	f7f3 fd4c 	bl	8000540 <__aeabi_dmul>
 800caa8:	a335      	add	r3, pc, #212	@ (adr r3, 800cb80 <__ieee754_asin+0x2f0>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7f3 fb91 	bl	80001d4 <__adddf3>
 800cab2:	4632      	mov	r2, r6
 800cab4:	463b      	mov	r3, r7
 800cab6:	f7f3 fd43 	bl	8000540 <__aeabi_dmul>
 800caba:	a333      	add	r3, pc, #204	@ (adr r3, 800cb88 <__ieee754_asin+0x2f8>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f7f3 fb86 	bl	80001d0 <__aeabi_dsub>
 800cac4:	4632      	mov	r2, r6
 800cac6:	463b      	mov	r3, r7
 800cac8:	f7f3 fd3a 	bl	8000540 <__aeabi_dmul>
 800cacc:	a330      	add	r3, pc, #192	@ (adr r3, 800cb90 <__ieee754_asin+0x300>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fb7f 	bl	80001d4 <__adddf3>
 800cad6:	4632      	mov	r2, r6
 800cad8:	463b      	mov	r3, r7
 800cada:	f7f3 fd31 	bl	8000540 <__aeabi_dmul>
 800cade:	a32e      	add	r3, pc, #184	@ (adr r3, 800cb98 <__ieee754_asin+0x308>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	4680      	mov	r8, r0
 800cae6:	4689      	mov	r9, r1
 800cae8:	4630      	mov	r0, r6
 800caea:	4639      	mov	r1, r7
 800caec:	f7f3 fd28 	bl	8000540 <__aeabi_dmul>
 800caf0:	a32b      	add	r3, pc, #172	@ (adr r3, 800cba0 <__ieee754_asin+0x310>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fb6b 	bl	80001d0 <__aeabi_dsub>
 800cafa:	4632      	mov	r2, r6
 800cafc:	463b      	mov	r3, r7
 800cafe:	f7f3 fd1f 	bl	8000540 <__aeabi_dmul>
 800cb02:	a329      	add	r3, pc, #164	@ (adr r3, 800cba8 <__ieee754_asin+0x318>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fb64 	bl	80001d4 <__adddf3>
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	463b      	mov	r3, r7
 800cb10:	f7f3 fd16 	bl	8000540 <__aeabi_dmul>
 800cb14:	a326      	add	r3, pc, #152	@ (adr r3, 800cbb0 <__ieee754_asin+0x320>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fb59 	bl	80001d0 <__aeabi_dsub>
 800cb1e:	4632      	mov	r2, r6
 800cb20:	463b      	mov	r3, r7
 800cb22:	f7f3 fd0d 	bl	8000540 <__aeabi_dmul>
 800cb26:	4b26      	ldr	r3, [pc, #152]	@ (800cbc0 <__ieee754_asin+0x330>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f7f3 fb53 	bl	80001d4 <__adddf3>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f3 fe2d 	bl	8000794 <__aeabi_ddiv>
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	f7f3 fcff 	bl	8000540 <__aeabi_dmul>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4620      	mov	r0, r4
 800cb48:	4629      	mov	r1, r5
 800cb4a:	e6c6      	b.n	800c8da <__ieee754_asin+0x4a>
 800cb4c:	f3af 8000 	nop.w
 800cb50:	54442d18 	.word	0x54442d18
 800cb54:	3ff921fb 	.word	0x3ff921fb
 800cb58:	33145c07 	.word	0x33145c07
 800cb5c:	3c91a626 	.word	0x3c91a626
 800cb60:	8800759c 	.word	0x8800759c
 800cb64:	7e37e43c 	.word	0x7e37e43c
 800cb68:	0dfdf709 	.word	0x0dfdf709
 800cb6c:	3f023de1 	.word	0x3f023de1
 800cb70:	7501b288 	.word	0x7501b288
 800cb74:	3f49efe0 	.word	0x3f49efe0
 800cb78:	b5688f3b 	.word	0xb5688f3b
 800cb7c:	3fa48228 	.word	0x3fa48228
 800cb80:	0e884455 	.word	0x0e884455
 800cb84:	3fc9c155 	.word	0x3fc9c155
 800cb88:	03eb6f7d 	.word	0x03eb6f7d
 800cb8c:	3fd4d612 	.word	0x3fd4d612
 800cb90:	55555555 	.word	0x55555555
 800cb94:	3fc55555 	.word	0x3fc55555
 800cb98:	b12e9282 	.word	0xb12e9282
 800cb9c:	3fb3b8c5 	.word	0x3fb3b8c5
 800cba0:	1b8d0159 	.word	0x1b8d0159
 800cba4:	3fe6066c 	.word	0x3fe6066c
 800cba8:	9c598ac8 	.word	0x9c598ac8
 800cbac:	40002ae5 	.word	0x40002ae5
 800cbb0:	1c8a2d4b 	.word	0x1c8a2d4b
 800cbb4:	40033a27 	.word	0x40033a27
 800cbb8:	3fefffff 	.word	0x3fefffff
 800cbbc:	3fdfffff 	.word	0x3fdfffff
 800cbc0:	3ff00000 	.word	0x3ff00000
 800cbc4:	3fe00000 	.word	0x3fe00000
 800cbc8:	3fef3332 	.word	0x3fef3332
 800cbcc:	4652      	mov	r2, sl
 800cbce:	465b      	mov	r3, fp
 800cbd0:	4650      	mov	r0, sl
 800cbd2:	4659      	mov	r1, fp
 800cbd4:	f7f3 fafe 	bl	80001d4 <__adddf3>
 800cbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbdc:	4606      	mov	r6, r0
 800cbde:	460f      	mov	r7, r1
 800cbe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe4:	f7f3 fdd6 	bl	8000794 <__aeabi_ddiv>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	4630      	mov	r0, r6
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f7f3 fca6 	bl	8000540 <__aeabi_dmul>
 800cbf4:	f04f 0800 	mov.w	r8, #0
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	460f      	mov	r7, r1
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	465b      	mov	r3, fp
 800cc00:	4640      	mov	r0, r8
 800cc02:	4659      	mov	r1, fp
 800cc04:	f7f3 fc9c 	bl	8000540 <__aeabi_dmul>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f3 fade 	bl	80001d0 <__aeabi_dsub>
 800cc14:	4642      	mov	r2, r8
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	465b      	mov	r3, fp
 800cc1c:	4650      	mov	r0, sl
 800cc1e:	4659      	mov	r1, fp
 800cc20:	f7f3 fad8 	bl	80001d4 <__adddf3>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 fdb2 	bl	8000794 <__aeabi_ddiv>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	f7f3 face 	bl	80001d4 <__adddf3>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	a112      	add	r1, pc, #72	@ (adr r1, 800cc88 <__ieee754_asin+0x3f8>)
 800cc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc42:	f7f3 fac5 	bl	80001d0 <__aeabi_dsub>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	f7f3 fabf 	bl	80001d0 <__aeabi_dsub>
 800cc52:	4642      	mov	r2, r8
 800cc54:	4604      	mov	r4, r0
 800cc56:	460d      	mov	r5, r1
 800cc58:	465b      	mov	r3, fp
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	4659      	mov	r1, fp
 800cc5e:	f7f3 fab9 	bl	80001d4 <__adddf3>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	a10a      	add	r1, pc, #40	@ (adr r1, 800cc90 <__ieee754_asin+0x400>)
 800cc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc6c:	f7f3 fab0 	bl	80001d0 <__aeabi_dsub>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4620      	mov	r0, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	f7f3 faaa 	bl	80001d0 <__aeabi_dsub>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	a103      	add	r1, pc, #12	@ (adr r1, 800cc90 <__ieee754_asin+0x400>)
 800cc82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc86:	e6e2      	b.n	800ca4e <__ieee754_asin+0x1be>
 800cc88:	33145c07 	.word	0x33145c07
 800cc8c:	3c91a626 	.word	0x3c91a626
 800cc90:	54442d18 	.word	0x54442d18
 800cc94:	3fe921fb 	.word	0x3fe921fb

0800cc98 <__ieee754_atan2>:
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	ec57 6b11 	vmov	r6, r7, d1
 800cca0:	4273      	negs	r3, r6
 800cca2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ce20 <__ieee754_atan2+0x188>
 800cca6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ccaa:	4333      	orrs	r3, r6
 800ccac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ccb0:	4543      	cmp	r3, r8
 800ccb2:	ec51 0b10 	vmov	r0, r1, d0
 800ccb6:	4635      	mov	r5, r6
 800ccb8:	d809      	bhi.n	800ccce <__ieee754_atan2+0x36>
 800ccba:	4244      	negs	r4, r0
 800ccbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ccc0:	4304      	orrs	r4, r0
 800ccc2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ccc6:	4544      	cmp	r4, r8
 800ccc8:	468e      	mov	lr, r1
 800ccca:	4681      	mov	r9, r0
 800cccc:	d907      	bls.n	800ccde <__ieee754_atan2+0x46>
 800ccce:	4632      	mov	r2, r6
 800ccd0:	463b      	mov	r3, r7
 800ccd2:	f7f3 fa7f 	bl	80001d4 <__adddf3>
 800ccd6:	ec41 0b10 	vmov	d0, r0, r1
 800ccda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccde:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800cce2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800cce6:	4334      	orrs	r4, r6
 800cce8:	d103      	bne.n	800ccf2 <__ieee754_atan2+0x5a>
 800ccea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccee:	f000 bddf 	b.w	800d8b0 <atan>
 800ccf2:	17bc      	asrs	r4, r7, #30
 800ccf4:	f004 0402 	and.w	r4, r4, #2
 800ccf8:	ea53 0909 	orrs.w	r9, r3, r9
 800ccfc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cd00:	d107      	bne.n	800cd12 <__ieee754_atan2+0x7a>
 800cd02:	2c02      	cmp	r4, #2
 800cd04:	d05f      	beq.n	800cdc6 <__ieee754_atan2+0x12e>
 800cd06:	2c03      	cmp	r4, #3
 800cd08:	d1e5      	bne.n	800ccd6 <__ieee754_atan2+0x3e>
 800cd0a:	a141      	add	r1, pc, #260	@ (adr r1, 800ce10 <__ieee754_atan2+0x178>)
 800cd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd10:	e7e1      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cd12:	4315      	orrs	r5, r2
 800cd14:	d106      	bne.n	800cd24 <__ieee754_atan2+0x8c>
 800cd16:	f1be 0f00 	cmp.w	lr, #0
 800cd1a:	da5f      	bge.n	800cddc <__ieee754_atan2+0x144>
 800cd1c:	a13e      	add	r1, pc, #248	@ (adr r1, 800ce18 <__ieee754_atan2+0x180>)
 800cd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd22:	e7d8      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cd24:	4542      	cmp	r2, r8
 800cd26:	d10f      	bne.n	800cd48 <__ieee754_atan2+0xb0>
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd2e:	d107      	bne.n	800cd40 <__ieee754_atan2+0xa8>
 800cd30:	2c02      	cmp	r4, #2
 800cd32:	d84c      	bhi.n	800cdce <__ieee754_atan2+0x136>
 800cd34:	4b34      	ldr	r3, [pc, #208]	@ (800ce08 <__ieee754_atan2+0x170>)
 800cd36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd3e:	e7ca      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cd40:	2c02      	cmp	r4, #2
 800cd42:	d848      	bhi.n	800cdd6 <__ieee754_atan2+0x13e>
 800cd44:	4b31      	ldr	r3, [pc, #196]	@ (800ce0c <__ieee754_atan2+0x174>)
 800cd46:	e7f6      	b.n	800cd36 <__ieee754_atan2+0x9e>
 800cd48:	4543      	cmp	r3, r8
 800cd4a:	d0e4      	beq.n	800cd16 <__ieee754_atan2+0x7e>
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800cd52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd56:	da1e      	bge.n	800cd96 <__ieee754_atan2+0xfe>
 800cd58:	2f00      	cmp	r7, #0
 800cd5a:	da01      	bge.n	800cd60 <__ieee754_atan2+0xc8>
 800cd5c:	323c      	adds	r2, #60	@ 0x3c
 800cd5e:	db1e      	blt.n	800cd9e <__ieee754_atan2+0x106>
 800cd60:	4632      	mov	r2, r6
 800cd62:	463b      	mov	r3, r7
 800cd64:	f7f3 fd16 	bl	8000794 <__aeabi_ddiv>
 800cd68:	ec41 0b10 	vmov	d0, r0, r1
 800cd6c:	f7ff fc1c 	bl	800c5a8 <fabs>
 800cd70:	f000 fd9e 	bl	800d8b0 <atan>
 800cd74:	ec51 0b10 	vmov	r0, r1, d0
 800cd78:	2c01      	cmp	r4, #1
 800cd7a:	d013      	beq.n	800cda4 <__ieee754_atan2+0x10c>
 800cd7c:	2c02      	cmp	r4, #2
 800cd7e:	d015      	beq.n	800cdac <__ieee754_atan2+0x114>
 800cd80:	2c00      	cmp	r4, #0
 800cd82:	d0a8      	beq.n	800ccd6 <__ieee754_atan2+0x3e>
 800cd84:	a318      	add	r3, pc, #96	@ (adr r3, 800cde8 <__ieee754_atan2+0x150>)
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	f7f3 fa21 	bl	80001d0 <__aeabi_dsub>
 800cd8e:	a318      	add	r3, pc, #96	@ (adr r3, 800cdf0 <__ieee754_atan2+0x158>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	e014      	b.n	800cdc0 <__ieee754_atan2+0x128>
 800cd96:	a118      	add	r1, pc, #96	@ (adr r1, 800cdf8 <__ieee754_atan2+0x160>)
 800cd98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd9c:	e7ec      	b.n	800cd78 <__ieee754_atan2+0xe0>
 800cd9e:	2000      	movs	r0, #0
 800cda0:	2100      	movs	r1, #0
 800cda2:	e7e9      	b.n	800cd78 <__ieee754_atan2+0xe0>
 800cda4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cda8:	4619      	mov	r1, r3
 800cdaa:	e794      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cdac:	a30e      	add	r3, pc, #56	@ (adr r3, 800cde8 <__ieee754_atan2+0x150>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	f7f3 fa0d 	bl	80001d0 <__aeabi_dsub>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	a10d      	add	r1, pc, #52	@ (adr r1, 800cdf0 <__ieee754_atan2+0x158>)
 800cdbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdc0:	f7f3 fa06 	bl	80001d0 <__aeabi_dsub>
 800cdc4:	e787      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cdc6:	a10a      	add	r1, pc, #40	@ (adr r1, 800cdf0 <__ieee754_atan2+0x158>)
 800cdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdcc:	e783      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cdce:	a10c      	add	r1, pc, #48	@ (adr r1, 800ce00 <__ieee754_atan2+0x168>)
 800cdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd4:	e77f      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	2100      	movs	r1, #0
 800cdda:	e77c      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cddc:	a106      	add	r1, pc, #24	@ (adr r1, 800cdf8 <__ieee754_atan2+0x160>)
 800cdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde2:	e778      	b.n	800ccd6 <__ieee754_atan2+0x3e>
 800cde4:	f3af 8000 	nop.w
 800cde8:	33145c07 	.word	0x33145c07
 800cdec:	3ca1a626 	.word	0x3ca1a626
 800cdf0:	54442d18 	.word	0x54442d18
 800cdf4:	400921fb 	.word	0x400921fb
 800cdf8:	54442d18 	.word	0x54442d18
 800cdfc:	3ff921fb 	.word	0x3ff921fb
 800ce00:	54442d18 	.word	0x54442d18
 800ce04:	3fe921fb 	.word	0x3fe921fb
 800ce08:	0800de48 	.word	0x0800de48
 800ce0c:	0800de30 	.word	0x0800de30
 800ce10:	54442d18 	.word	0x54442d18
 800ce14:	c00921fb 	.word	0xc00921fb
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	bff921fb 	.word	0xbff921fb
 800ce20:	7ff00000 	.word	0x7ff00000
 800ce24:	00000000 	.word	0x00000000

0800ce28 <__ieee754_pow>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	b091      	sub	sp, #68	@ 0x44
 800ce2e:	ed8d 1b00 	vstr	d1, [sp]
 800ce32:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ce36:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ce3a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ce3e:	ec57 6b10 	vmov	r6, r7, d0
 800ce42:	d113      	bne.n	800ce6c <__ieee754_pow+0x44>
 800ce44:	19b3      	adds	r3, r6, r6
 800ce46:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ce4a:	4152      	adcs	r2, r2
 800ce4c:	4298      	cmp	r0, r3
 800ce4e:	4b98      	ldr	r3, [pc, #608]	@ (800d0b0 <__ieee754_pow+0x288>)
 800ce50:	4193      	sbcs	r3, r2
 800ce52:	f080 84ea 	bcs.w	800d82a <__ieee754_pow+0xa02>
 800ce56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 f9b9 	bl	80001d4 <__adddf3>
 800ce62:	ec41 0b10 	vmov	d0, r0, r1
 800ce66:	b011      	add	sp, #68	@ 0x44
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	4a91      	ldr	r2, [pc, #580]	@ (800d0b4 <__ieee754_pow+0x28c>)
 800ce6e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ce72:	4590      	cmp	r8, r2
 800ce74:	463d      	mov	r5, r7
 800ce76:	4633      	mov	r3, r6
 800ce78:	d806      	bhi.n	800ce88 <__ieee754_pow+0x60>
 800ce7a:	d101      	bne.n	800ce80 <__ieee754_pow+0x58>
 800ce7c:	2e00      	cmp	r6, #0
 800ce7e:	d1ea      	bne.n	800ce56 <__ieee754_pow+0x2e>
 800ce80:	4592      	cmp	sl, r2
 800ce82:	d801      	bhi.n	800ce88 <__ieee754_pow+0x60>
 800ce84:	d10e      	bne.n	800cea4 <__ieee754_pow+0x7c>
 800ce86:	b169      	cbz	r1, 800cea4 <__ieee754_pow+0x7c>
 800ce88:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ce8c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ce90:	431d      	orrs	r5, r3
 800ce92:	d1e0      	bne.n	800ce56 <__ieee754_pow+0x2e>
 800ce94:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce98:	18db      	adds	r3, r3, r3
 800ce9a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ce9e:	4152      	adcs	r2, r2
 800cea0:	429d      	cmp	r5, r3
 800cea2:	e7d4      	b.n	800ce4e <__ieee754_pow+0x26>
 800cea4:	2d00      	cmp	r5, #0
 800cea6:	46c3      	mov	fp, r8
 800cea8:	da3a      	bge.n	800cf20 <__ieee754_pow+0xf8>
 800ceaa:	4a83      	ldr	r2, [pc, #524]	@ (800d0b8 <__ieee754_pow+0x290>)
 800ceac:	4592      	cmp	sl, r2
 800ceae:	d84d      	bhi.n	800cf4c <__ieee754_pow+0x124>
 800ceb0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ceb4:	4592      	cmp	sl, r2
 800ceb6:	f240 84c7 	bls.w	800d848 <__ieee754_pow+0xa20>
 800ceba:	ea4f 522a 	mov.w	r2, sl, asr #20
 800cebe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cec2:	2a14      	cmp	r2, #20
 800cec4:	dd0f      	ble.n	800cee6 <__ieee754_pow+0xbe>
 800cec6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ceca:	fa21 f402 	lsr.w	r4, r1, r2
 800cece:	fa04 f202 	lsl.w	r2, r4, r2
 800ced2:	428a      	cmp	r2, r1
 800ced4:	f040 84b8 	bne.w	800d848 <__ieee754_pow+0xa20>
 800ced8:	f004 0401 	and.w	r4, r4, #1
 800cedc:	f1c4 0402 	rsb	r4, r4, #2
 800cee0:	2900      	cmp	r1, #0
 800cee2:	d158      	bne.n	800cf96 <__ieee754_pow+0x16e>
 800cee4:	e00e      	b.n	800cf04 <__ieee754_pow+0xdc>
 800cee6:	2900      	cmp	r1, #0
 800cee8:	d154      	bne.n	800cf94 <__ieee754_pow+0x16c>
 800ceea:	f1c2 0214 	rsb	r2, r2, #20
 800ceee:	fa4a f402 	asr.w	r4, sl, r2
 800cef2:	fa04 f202 	lsl.w	r2, r4, r2
 800cef6:	4552      	cmp	r2, sl
 800cef8:	f040 84a3 	bne.w	800d842 <__ieee754_pow+0xa1a>
 800cefc:	f004 0401 	and.w	r4, r4, #1
 800cf00:	f1c4 0402 	rsb	r4, r4, #2
 800cf04:	4a6d      	ldr	r2, [pc, #436]	@ (800d0bc <__ieee754_pow+0x294>)
 800cf06:	4592      	cmp	sl, r2
 800cf08:	d12e      	bne.n	800cf68 <__ieee754_pow+0x140>
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	f280 8494 	bge.w	800d83a <__ieee754_pow+0xa12>
 800cf12:	496a      	ldr	r1, [pc, #424]	@ (800d0bc <__ieee754_pow+0x294>)
 800cf14:	4632      	mov	r2, r6
 800cf16:	463b      	mov	r3, r7
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7f3 fc3b 	bl	8000794 <__aeabi_ddiv>
 800cf1e:	e7a0      	b.n	800ce62 <__ieee754_pow+0x3a>
 800cf20:	2400      	movs	r4, #0
 800cf22:	bbc1      	cbnz	r1, 800cf96 <__ieee754_pow+0x16e>
 800cf24:	4a63      	ldr	r2, [pc, #396]	@ (800d0b4 <__ieee754_pow+0x28c>)
 800cf26:	4592      	cmp	sl, r2
 800cf28:	d1ec      	bne.n	800cf04 <__ieee754_pow+0xdc>
 800cf2a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800cf2e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800cf32:	431a      	orrs	r2, r3
 800cf34:	f000 8479 	beq.w	800d82a <__ieee754_pow+0xa02>
 800cf38:	4b61      	ldr	r3, [pc, #388]	@ (800d0c0 <__ieee754_pow+0x298>)
 800cf3a:	4598      	cmp	r8, r3
 800cf3c:	d908      	bls.n	800cf50 <__ieee754_pow+0x128>
 800cf3e:	f1b9 0f00 	cmp.w	r9, #0
 800cf42:	f2c0 8476 	blt.w	800d832 <__ieee754_pow+0xa0a>
 800cf46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf4a:	e78a      	b.n	800ce62 <__ieee754_pow+0x3a>
 800cf4c:	2402      	movs	r4, #2
 800cf4e:	e7e8      	b.n	800cf22 <__ieee754_pow+0xfa>
 800cf50:	f1b9 0f00 	cmp.w	r9, #0
 800cf54:	f04f 0000 	mov.w	r0, #0
 800cf58:	f04f 0100 	mov.w	r1, #0
 800cf5c:	da81      	bge.n	800ce62 <__ieee754_pow+0x3a>
 800cf5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cf62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cf66:	e77c      	b.n	800ce62 <__ieee754_pow+0x3a>
 800cf68:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800cf6c:	d106      	bne.n	800cf7c <__ieee754_pow+0x154>
 800cf6e:	4632      	mov	r2, r6
 800cf70:	463b      	mov	r3, r7
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 fae3 	bl	8000540 <__aeabi_dmul>
 800cf7a:	e772      	b.n	800ce62 <__ieee754_pow+0x3a>
 800cf7c:	4a51      	ldr	r2, [pc, #324]	@ (800d0c4 <__ieee754_pow+0x29c>)
 800cf7e:	4591      	cmp	r9, r2
 800cf80:	d109      	bne.n	800cf96 <__ieee754_pow+0x16e>
 800cf82:	2d00      	cmp	r5, #0
 800cf84:	db07      	blt.n	800cf96 <__ieee754_pow+0x16e>
 800cf86:	ec47 6b10 	vmov	d0, r6, r7
 800cf8a:	b011      	add	sp, #68	@ 0x44
 800cf8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	f7ff bb26 	b.w	800c5e0 <__ieee754_sqrt>
 800cf94:	2400      	movs	r4, #0
 800cf96:	ec47 6b10 	vmov	d0, r6, r7
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	f7ff fb04 	bl	800c5a8 <fabs>
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	ec51 0b10 	vmov	r0, r1, d0
 800cfa6:	bb53      	cbnz	r3, 800cffe <__ieee754_pow+0x1d6>
 800cfa8:	4b44      	ldr	r3, [pc, #272]	@ (800d0bc <__ieee754_pow+0x294>)
 800cfaa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d002      	beq.n	800cfb8 <__ieee754_pow+0x190>
 800cfb2:	f1b8 0f00 	cmp.w	r8, #0
 800cfb6:	d122      	bne.n	800cffe <__ieee754_pow+0x1d6>
 800cfb8:	f1b9 0f00 	cmp.w	r9, #0
 800cfbc:	da05      	bge.n	800cfca <__ieee754_pow+0x1a2>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	493d      	ldr	r1, [pc, #244]	@ (800d0bc <__ieee754_pow+0x294>)
 800cfc6:	f7f3 fbe5 	bl	8000794 <__aeabi_ddiv>
 800cfca:	2d00      	cmp	r5, #0
 800cfcc:	f6bf af49 	bge.w	800ce62 <__ieee754_pow+0x3a>
 800cfd0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800cfd4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800cfd8:	ea58 0804 	orrs.w	r8, r8, r4
 800cfdc:	d108      	bne.n	800cff0 <__ieee754_pow+0x1c8>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f7f3 f8f3 	bl	80001d0 <__aeabi_dsub>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	e794      	b.n	800cf1a <__ieee754_pow+0xf2>
 800cff0:	2c01      	cmp	r4, #1
 800cff2:	f47f af36 	bne.w	800ce62 <__ieee754_pow+0x3a>
 800cff6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cffa:	4619      	mov	r1, r3
 800cffc:	e731      	b.n	800ce62 <__ieee754_pow+0x3a>
 800cffe:	0feb      	lsrs	r3, r5, #31
 800d000:	3b01      	subs	r3, #1
 800d002:	ea53 0204 	orrs.w	r2, r3, r4
 800d006:	d102      	bne.n	800d00e <__ieee754_pow+0x1e6>
 800d008:	4632      	mov	r2, r6
 800d00a:	463b      	mov	r3, r7
 800d00c:	e7e9      	b.n	800cfe2 <__ieee754_pow+0x1ba>
 800d00e:	3c01      	subs	r4, #1
 800d010:	431c      	orrs	r4, r3
 800d012:	d016      	beq.n	800d042 <__ieee754_pow+0x21a>
 800d014:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d0a0 <__ieee754_pow+0x278>
 800d018:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d01c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d020:	f240 8112 	bls.w	800d248 <__ieee754_pow+0x420>
 800d024:	4b28      	ldr	r3, [pc, #160]	@ (800d0c8 <__ieee754_pow+0x2a0>)
 800d026:	459a      	cmp	sl, r3
 800d028:	4b25      	ldr	r3, [pc, #148]	@ (800d0c0 <__ieee754_pow+0x298>)
 800d02a:	d916      	bls.n	800d05a <__ieee754_pow+0x232>
 800d02c:	4598      	cmp	r8, r3
 800d02e:	d80b      	bhi.n	800d048 <__ieee754_pow+0x220>
 800d030:	f1b9 0f00 	cmp.w	r9, #0
 800d034:	da0b      	bge.n	800d04e <__ieee754_pow+0x226>
 800d036:	2000      	movs	r0, #0
 800d038:	b011      	add	sp, #68	@ 0x44
 800d03a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03e:	f000 be83 	b.w	800dd48 <__math_oflow>
 800d042:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800d0a8 <__ieee754_pow+0x280>
 800d046:	e7e7      	b.n	800d018 <__ieee754_pow+0x1f0>
 800d048:	f1b9 0f00 	cmp.w	r9, #0
 800d04c:	dcf3      	bgt.n	800d036 <__ieee754_pow+0x20e>
 800d04e:	2000      	movs	r0, #0
 800d050:	b011      	add	sp, #68	@ 0x44
 800d052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d056:	f000 be6f 	b.w	800dd38 <__math_uflow>
 800d05a:	4598      	cmp	r8, r3
 800d05c:	d20c      	bcs.n	800d078 <__ieee754_pow+0x250>
 800d05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	f7f3 fcdd 	bl	8000a24 <__aeabi_dcmplt>
 800d06a:	3800      	subs	r0, #0
 800d06c:	bf18      	it	ne
 800d06e:	2001      	movne	r0, #1
 800d070:	f1b9 0f00 	cmp.w	r9, #0
 800d074:	daec      	bge.n	800d050 <__ieee754_pow+0x228>
 800d076:	e7df      	b.n	800d038 <__ieee754_pow+0x210>
 800d078:	4b10      	ldr	r3, [pc, #64]	@ (800d0bc <__ieee754_pow+0x294>)
 800d07a:	4598      	cmp	r8, r3
 800d07c:	f04f 0200 	mov.w	r2, #0
 800d080:	d924      	bls.n	800d0cc <__ieee754_pow+0x2a4>
 800d082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d086:	2300      	movs	r3, #0
 800d088:	f7f3 fccc 	bl	8000a24 <__aeabi_dcmplt>
 800d08c:	3800      	subs	r0, #0
 800d08e:	bf18      	it	ne
 800d090:	2001      	movne	r0, #1
 800d092:	f1b9 0f00 	cmp.w	r9, #0
 800d096:	dccf      	bgt.n	800d038 <__ieee754_pow+0x210>
 800d098:	e7da      	b.n	800d050 <__ieee754_pow+0x228>
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
 800d0a0:	00000000 	.word	0x00000000
 800d0a4:	3ff00000 	.word	0x3ff00000
 800d0a8:	00000000 	.word	0x00000000
 800d0ac:	bff00000 	.word	0xbff00000
 800d0b0:	fff00000 	.word	0xfff00000
 800d0b4:	7ff00000 	.word	0x7ff00000
 800d0b8:	433fffff 	.word	0x433fffff
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	3fefffff 	.word	0x3fefffff
 800d0c4:	3fe00000 	.word	0x3fe00000
 800d0c8:	43f00000 	.word	0x43f00000
 800d0cc:	4b5a      	ldr	r3, [pc, #360]	@ (800d238 <__ieee754_pow+0x410>)
 800d0ce:	f7f3 f87f 	bl	80001d0 <__aeabi_dsub>
 800d0d2:	a351      	add	r3, pc, #324	@ (adr r3, 800d218 <__ieee754_pow+0x3f0>)
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	f7f3 fa30 	bl	8000540 <__aeabi_dmul>
 800d0e0:	a34f      	add	r3, pc, #316	@ (adr r3, 800d220 <__ieee754_pow+0x3f8>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	460f      	mov	r7, r1
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	f7f3 fa27 	bl	8000540 <__aeabi_dmul>
 800d0f2:	4b52      	ldr	r3, [pc, #328]	@ (800d23c <__ieee754_pow+0x414>)
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	468b      	mov	fp, r1
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 fa1f 	bl	8000540 <__aeabi_dmul>
 800d102:	4602      	mov	r2, r0
 800d104:	460b      	mov	r3, r1
 800d106:	a148      	add	r1, pc, #288	@ (adr r1, 800d228 <__ieee754_pow+0x400>)
 800d108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d10c:	f7f3 f860 	bl	80001d0 <__aeabi_dsub>
 800d110:	4622      	mov	r2, r4
 800d112:	462b      	mov	r3, r5
 800d114:	f7f3 fa14 	bl	8000540 <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	2000      	movs	r0, #0
 800d11e:	4948      	ldr	r1, [pc, #288]	@ (800d240 <__ieee754_pow+0x418>)
 800d120:	f7f3 f856 	bl	80001d0 <__aeabi_dsub>
 800d124:	4622      	mov	r2, r4
 800d126:	4680      	mov	r8, r0
 800d128:	4689      	mov	r9, r1
 800d12a:	462b      	mov	r3, r5
 800d12c:	4620      	mov	r0, r4
 800d12e:	4629      	mov	r1, r5
 800d130:	f7f3 fa06 	bl	8000540 <__aeabi_dmul>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	4640      	mov	r0, r8
 800d13a:	4649      	mov	r1, r9
 800d13c:	f7f3 fa00 	bl	8000540 <__aeabi_dmul>
 800d140:	a33b      	add	r3, pc, #236	@ (adr r3, 800d230 <__ieee754_pow+0x408>)
 800d142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d146:	f7f3 f9fb 	bl	8000540 <__aeabi_dmul>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	4650      	mov	r0, sl
 800d150:	4659      	mov	r1, fp
 800d152:	f7f3 f83d 	bl	80001d0 <__aeabi_dsub>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4680      	mov	r8, r0
 800d15c:	4689      	mov	r9, r1
 800d15e:	4630      	mov	r0, r6
 800d160:	4639      	mov	r1, r7
 800d162:	f7f3 f837 	bl	80001d4 <__adddf3>
 800d166:	2400      	movs	r4, #0
 800d168:	4632      	mov	r2, r6
 800d16a:	463b      	mov	r3, r7
 800d16c:	4620      	mov	r0, r4
 800d16e:	460d      	mov	r5, r1
 800d170:	f7f3 f82e 	bl	80001d0 <__aeabi_dsub>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	4640      	mov	r0, r8
 800d17a:	4649      	mov	r1, r9
 800d17c:	f7f3 f828 	bl	80001d0 <__aeabi_dsub>
 800d180:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d184:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d188:	2300      	movs	r3, #0
 800d18a:	9304      	str	r3, [sp, #16]
 800d18c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	4652      	mov	r2, sl
 800d196:	465b      	mov	r3, fp
 800d198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d19c:	f7f3 f818 	bl	80001d0 <__aeabi_dsub>
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	462b      	mov	r3, r5
 800d1a4:	f7f3 f9cc 	bl	8000540 <__aeabi_dmul>
 800d1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	4689      	mov	r9, r1
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 f9c4 	bl	8000540 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4640      	mov	r0, r8
 800d1be:	4649      	mov	r1, r9
 800d1c0:	f7f3 f808 	bl	80001d4 <__adddf3>
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	465b      	mov	r3, fp
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	460f      	mov	r7, r1
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	f7f3 f9b6 	bl	8000540 <__aeabi_dmul>
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	4680      	mov	r8, r0
 800d1da:	4689      	mov	r9, r1
 800d1dc:	4630      	mov	r0, r6
 800d1de:	4639      	mov	r1, r7
 800d1e0:	f7f2 fff8 	bl	80001d4 <__adddf3>
 800d1e4:	4b17      	ldr	r3, [pc, #92]	@ (800d244 <__ieee754_pow+0x41c>)
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	468a      	mov	sl, r1
 800d1ee:	468b      	mov	fp, r1
 800d1f0:	f340 82ef 	ble.w	800d7d2 <__ieee754_pow+0x9aa>
 800d1f4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d1f8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d1fc:	4303      	orrs	r3, r0
 800d1fe:	f000 81e8 	beq.w	800d5d2 <__ieee754_pow+0x7aa>
 800d202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d206:	2200      	movs	r2, #0
 800d208:	2300      	movs	r3, #0
 800d20a:	f7f3 fc0b 	bl	8000a24 <__aeabi_dcmplt>
 800d20e:	3800      	subs	r0, #0
 800d210:	bf18      	it	ne
 800d212:	2001      	movne	r0, #1
 800d214:	e710      	b.n	800d038 <__ieee754_pow+0x210>
 800d216:	bf00      	nop
 800d218:	60000000 	.word	0x60000000
 800d21c:	3ff71547 	.word	0x3ff71547
 800d220:	f85ddf44 	.word	0xf85ddf44
 800d224:	3e54ae0b 	.word	0x3e54ae0b
 800d228:	55555555 	.word	0x55555555
 800d22c:	3fd55555 	.word	0x3fd55555
 800d230:	652b82fe 	.word	0x652b82fe
 800d234:	3ff71547 	.word	0x3ff71547
 800d238:	3ff00000 	.word	0x3ff00000
 800d23c:	3fd00000 	.word	0x3fd00000
 800d240:	3fe00000 	.word	0x3fe00000
 800d244:	408fffff 	.word	0x408fffff
 800d248:	4bd5      	ldr	r3, [pc, #852]	@ (800d5a0 <__ieee754_pow+0x778>)
 800d24a:	402b      	ands	r3, r5
 800d24c:	2200      	movs	r2, #0
 800d24e:	b92b      	cbnz	r3, 800d25c <__ieee754_pow+0x434>
 800d250:	4bd4      	ldr	r3, [pc, #848]	@ (800d5a4 <__ieee754_pow+0x77c>)
 800d252:	f7f3 f975 	bl	8000540 <__aeabi_dmul>
 800d256:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d25a:	468b      	mov	fp, r1
 800d25c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d260:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d264:	4413      	add	r3, r2
 800d266:	930a      	str	r3, [sp, #40]	@ 0x28
 800d268:	4bcf      	ldr	r3, [pc, #828]	@ (800d5a8 <__ieee754_pow+0x780>)
 800d26a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d26e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d272:	459b      	cmp	fp, r3
 800d274:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d278:	dd08      	ble.n	800d28c <__ieee754_pow+0x464>
 800d27a:	4bcc      	ldr	r3, [pc, #816]	@ (800d5ac <__ieee754_pow+0x784>)
 800d27c:	459b      	cmp	fp, r3
 800d27e:	f340 81a5 	ble.w	800d5cc <__ieee754_pow+0x7a4>
 800d282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d284:	3301      	adds	r3, #1
 800d286:	930a      	str	r3, [sp, #40]	@ 0x28
 800d288:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d28c:	f04f 0a00 	mov.w	sl, #0
 800d290:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d294:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d296:	4bc6      	ldr	r3, [pc, #792]	@ (800d5b0 <__ieee754_pow+0x788>)
 800d298:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d29c:	ed93 7b00 	vldr	d7, [r3]
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	ec53 2b17 	vmov	r2, r3, d7
 800d2a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2ae:	f7f2 ff8f 	bl	80001d0 <__aeabi_dsub>
 800d2b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2be:	f7f2 ff89 	bl	80001d4 <__adddf3>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	49ba      	ldr	r1, [pc, #744]	@ (800d5b4 <__ieee754_pow+0x78c>)
 800d2ca:	f7f3 fa63 	bl	8000794 <__aeabi_ddiv>
 800d2ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	4639      	mov	r1, r7
 800d2da:	f7f3 f931 	bl	8000540 <__aeabi_dmul>
 800d2de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2e2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d2e6:	106d      	asrs	r5, r5, #1
 800d2e8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d2ec:	f04f 0b00 	mov.w	fp, #0
 800d2f0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d2f4:	4661      	mov	r1, ip
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d2fc:	4658      	mov	r0, fp
 800d2fe:	46e1      	mov	r9, ip
 800d300:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d304:	4614      	mov	r4, r2
 800d306:	461d      	mov	r5, r3
 800d308:	f7f3 f91a 	bl	8000540 <__aeabi_dmul>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4630      	mov	r0, r6
 800d312:	4639      	mov	r1, r7
 800d314:	f7f2 ff5c 	bl	80001d0 <__aeabi_dsub>
 800d318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d31c:	4606      	mov	r6, r0
 800d31e:	460f      	mov	r7, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f2 ff54 	bl	80001d0 <__aeabi_dsub>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d330:	f7f2 ff4e 	bl	80001d0 <__aeabi_dsub>
 800d334:	465a      	mov	r2, fp
 800d336:	464b      	mov	r3, r9
 800d338:	f7f3 f902 	bl	8000540 <__aeabi_dmul>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4630      	mov	r0, r6
 800d342:	4639      	mov	r1, r7
 800d344:	f7f2 ff44 	bl	80001d0 <__aeabi_dsub>
 800d348:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d34c:	f7f3 f8f8 	bl	8000540 <__aeabi_dmul>
 800d350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d354:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d358:	4610      	mov	r0, r2
 800d35a:	4619      	mov	r1, r3
 800d35c:	f7f3 f8f0 	bl	8000540 <__aeabi_dmul>
 800d360:	a37d      	add	r3, pc, #500	@ (adr r3, 800d558 <__ieee754_pow+0x730>)
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	4604      	mov	r4, r0
 800d368:	460d      	mov	r5, r1
 800d36a:	f7f3 f8e9 	bl	8000540 <__aeabi_dmul>
 800d36e:	a37c      	add	r3, pc, #496	@ (adr r3, 800d560 <__ieee754_pow+0x738>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f2 ff2e 	bl	80001d4 <__adddf3>
 800d378:	4622      	mov	r2, r4
 800d37a:	462b      	mov	r3, r5
 800d37c:	f7f3 f8e0 	bl	8000540 <__aeabi_dmul>
 800d380:	a379      	add	r3, pc, #484	@ (adr r3, 800d568 <__ieee754_pow+0x740>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ff25 	bl	80001d4 <__adddf3>
 800d38a:	4622      	mov	r2, r4
 800d38c:	462b      	mov	r3, r5
 800d38e:	f7f3 f8d7 	bl	8000540 <__aeabi_dmul>
 800d392:	a377      	add	r3, pc, #476	@ (adr r3, 800d570 <__ieee754_pow+0x748>)
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	f7f2 ff1c 	bl	80001d4 <__adddf3>
 800d39c:	4622      	mov	r2, r4
 800d39e:	462b      	mov	r3, r5
 800d3a0:	f7f3 f8ce 	bl	8000540 <__aeabi_dmul>
 800d3a4:	a374      	add	r3, pc, #464	@ (adr r3, 800d578 <__ieee754_pow+0x750>)
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	f7f2 ff13 	bl	80001d4 <__adddf3>
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	f7f3 f8c5 	bl	8000540 <__aeabi_dmul>
 800d3b6:	a372      	add	r3, pc, #456	@ (adr r3, 800d580 <__ieee754_pow+0x758>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f2 ff0a 	bl	80001d4 <__adddf3>
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	462b      	mov	r3, r5
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	f7f3 f8b8 	bl	8000540 <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	f7f3 f8b2 	bl	8000540 <__aeabi_dmul>
 800d3dc:	465a      	mov	r2, fp
 800d3de:	4604      	mov	r4, r0
 800d3e0:	460d      	mov	r5, r1
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3e8:	f7f2 fef4 	bl	80001d4 <__adddf3>
 800d3ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3f0:	f7f3 f8a6 	bl	8000540 <__aeabi_dmul>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	f7f2 feec 	bl	80001d4 <__adddf3>
 800d3fc:	465a      	mov	r2, fp
 800d3fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d402:	464b      	mov	r3, r9
 800d404:	4658      	mov	r0, fp
 800d406:	4649      	mov	r1, r9
 800d408:	f7f3 f89a 	bl	8000540 <__aeabi_dmul>
 800d40c:	4b6a      	ldr	r3, [pc, #424]	@ (800d5b8 <__ieee754_pow+0x790>)
 800d40e:	2200      	movs	r2, #0
 800d410:	4606      	mov	r6, r0
 800d412:	460f      	mov	r7, r1
 800d414:	f7f2 fede 	bl	80001d4 <__adddf3>
 800d418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d41c:	f7f2 feda 	bl	80001d4 <__adddf3>
 800d420:	46d8      	mov	r8, fp
 800d422:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d426:	460d      	mov	r5, r1
 800d428:	465a      	mov	r2, fp
 800d42a:	460b      	mov	r3, r1
 800d42c:	4640      	mov	r0, r8
 800d42e:	4649      	mov	r1, r9
 800d430:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d434:	f7f3 f884 	bl	8000540 <__aeabi_dmul>
 800d438:	465c      	mov	r4, fp
 800d43a:	4680      	mov	r8, r0
 800d43c:	4689      	mov	r9, r1
 800d43e:	4b5e      	ldr	r3, [pc, #376]	@ (800d5b8 <__ieee754_pow+0x790>)
 800d440:	2200      	movs	r2, #0
 800d442:	4620      	mov	r0, r4
 800d444:	4629      	mov	r1, r5
 800d446:	f7f2 fec3 	bl	80001d0 <__aeabi_dsub>
 800d44a:	4632      	mov	r2, r6
 800d44c:	463b      	mov	r3, r7
 800d44e:	f7f2 febf 	bl	80001d0 <__aeabi_dsub>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d45a:	f7f2 feb9 	bl	80001d0 <__aeabi_dsub>
 800d45e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d462:	f7f3 f86d 	bl	8000540 <__aeabi_dmul>
 800d466:	4622      	mov	r2, r4
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	462b      	mov	r3, r5
 800d46e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d472:	f7f3 f865 	bl	8000540 <__aeabi_dmul>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	4630      	mov	r0, r6
 800d47c:	4639      	mov	r1, r7
 800d47e:	f7f2 fea9 	bl	80001d4 <__adddf3>
 800d482:	4606      	mov	r6, r0
 800d484:	460f      	mov	r7, r1
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4640      	mov	r0, r8
 800d48c:	4649      	mov	r1, r9
 800d48e:	f7f2 fea1 	bl	80001d4 <__adddf3>
 800d492:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d496:	a33c      	add	r3, pc, #240	@ (adr r3, 800d588 <__ieee754_pow+0x760>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	4658      	mov	r0, fp
 800d49e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	f7f3 f84c 	bl	8000540 <__aeabi_dmul>
 800d4a8:	465c      	mov	r4, fp
 800d4aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4ae:	4642      	mov	r2, r8
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	f7f2 fe8b 	bl	80001d0 <__aeabi_dsub>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4630      	mov	r0, r6
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f2 fe85 	bl	80001d0 <__aeabi_dsub>
 800d4c6:	a332      	add	r3, pc, #200	@ (adr r3, 800d590 <__ieee754_pow+0x768>)
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f3 f838 	bl	8000540 <__aeabi_dmul>
 800d4d0:	a331      	add	r3, pc, #196	@ (adr r3, 800d598 <__ieee754_pow+0x770>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460f      	mov	r7, r1
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f3 f82f 	bl	8000540 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f2 fe73 	bl	80001d4 <__adddf3>
 800d4ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4f0:	4b32      	ldr	r3, [pc, #200]	@ (800d5bc <__ieee754_pow+0x794>)
 800d4f2:	4413      	add	r3, r2
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f7f2 fe6c 	bl	80001d4 <__adddf3>
 800d4fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d500:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d502:	f7f2 ffb3 	bl	800046c <__aeabi_i2d>
 800d506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d508:	4b2d      	ldr	r3, [pc, #180]	@ (800d5c0 <__ieee754_pow+0x798>)
 800d50a:	4413      	add	r3, r2
 800d50c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d510:	4606      	mov	r6, r0
 800d512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d516:	460f      	mov	r7, r1
 800d518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d51c:	f7f2 fe5a 	bl	80001d4 <__adddf3>
 800d520:	4642      	mov	r2, r8
 800d522:	464b      	mov	r3, r9
 800d524:	f7f2 fe56 	bl	80001d4 <__adddf3>
 800d528:	4632      	mov	r2, r6
 800d52a:	463b      	mov	r3, r7
 800d52c:	f7f2 fe52 	bl	80001d4 <__adddf3>
 800d530:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d534:	4632      	mov	r2, r6
 800d536:	463b      	mov	r3, r7
 800d538:	4658      	mov	r0, fp
 800d53a:	460d      	mov	r5, r1
 800d53c:	f7f2 fe48 	bl	80001d0 <__aeabi_dsub>
 800d540:	4642      	mov	r2, r8
 800d542:	464b      	mov	r3, r9
 800d544:	f7f2 fe44 	bl	80001d0 <__aeabi_dsub>
 800d548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d54c:	f7f2 fe40 	bl	80001d0 <__aeabi_dsub>
 800d550:	465c      	mov	r4, fp
 800d552:	4602      	mov	r2, r0
 800d554:	e036      	b.n	800d5c4 <__ieee754_pow+0x79c>
 800d556:	bf00      	nop
 800d558:	4a454eef 	.word	0x4a454eef
 800d55c:	3fca7e28 	.word	0x3fca7e28
 800d560:	93c9db65 	.word	0x93c9db65
 800d564:	3fcd864a 	.word	0x3fcd864a
 800d568:	a91d4101 	.word	0xa91d4101
 800d56c:	3fd17460 	.word	0x3fd17460
 800d570:	518f264d 	.word	0x518f264d
 800d574:	3fd55555 	.word	0x3fd55555
 800d578:	db6fabff 	.word	0xdb6fabff
 800d57c:	3fdb6db6 	.word	0x3fdb6db6
 800d580:	33333303 	.word	0x33333303
 800d584:	3fe33333 	.word	0x3fe33333
 800d588:	e0000000 	.word	0xe0000000
 800d58c:	3feec709 	.word	0x3feec709
 800d590:	dc3a03fd 	.word	0xdc3a03fd
 800d594:	3feec709 	.word	0x3feec709
 800d598:	145b01f5 	.word	0x145b01f5
 800d59c:	be3e2fe0 	.word	0xbe3e2fe0
 800d5a0:	7ff00000 	.word	0x7ff00000
 800d5a4:	43400000 	.word	0x43400000
 800d5a8:	0003988e 	.word	0x0003988e
 800d5ac:	000bb679 	.word	0x000bb679
 800d5b0:	0800de80 	.word	0x0800de80
 800d5b4:	3ff00000 	.word	0x3ff00000
 800d5b8:	40080000 	.word	0x40080000
 800d5bc:	0800de60 	.word	0x0800de60
 800d5c0:	0800de70 	.word	0x0800de70
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ca:	e5d7      	b.n	800d17c <__ieee754_pow+0x354>
 800d5cc:	f04f 0a01 	mov.w	sl, #1
 800d5d0:	e65e      	b.n	800d290 <__ieee754_pow+0x468>
 800d5d2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d8a4 <__ieee754_pow+0xa7c>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	4630      	mov	r0, r6
 800d5da:	4639      	mov	r1, r7
 800d5dc:	f7f2 fdfa 	bl	80001d4 <__adddf3>
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	f7f2 fdf0 	bl	80001d0 <__aeabi_dsub>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5f8:	f7f3 fa32 	bl	8000a60 <__aeabi_dcmpgt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f47f ae00 	bne.w	800d202 <__ieee754_pow+0x3da>
 800d602:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d606:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d60a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d60e:	fa43 fa0a 	asr.w	sl, r3, sl
 800d612:	44da      	add	sl, fp
 800d614:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d618:	489d      	ldr	r0, [pc, #628]	@ (800d890 <__ieee754_pow+0xa68>)
 800d61a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d61e:	4108      	asrs	r0, r1
 800d620:	ea00 030a 	and.w	r3, r0, sl
 800d624:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d628:	f1c1 0114 	rsb	r1, r1, #20
 800d62c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d630:	fa4a fa01 	asr.w	sl, sl, r1
 800d634:	f1bb 0f00 	cmp.w	fp, #0
 800d638:	4640      	mov	r0, r8
 800d63a:	4649      	mov	r1, r9
 800d63c:	f04f 0200 	mov.w	r2, #0
 800d640:	bfb8      	it	lt
 800d642:	f1ca 0a00 	rsblt	sl, sl, #0
 800d646:	f7f2 fdc3 	bl	80001d0 <__aeabi_dsub>
 800d64a:	4680      	mov	r8, r0
 800d64c:	4689      	mov	r9, r1
 800d64e:	4632      	mov	r2, r6
 800d650:	463b      	mov	r3, r7
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f2 fdbd 	bl	80001d4 <__adddf3>
 800d65a:	2400      	movs	r4, #0
 800d65c:	a37c      	add	r3, pc, #496	@ (adr r3, 800d850 <__ieee754_pow+0xa28>)
 800d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d662:	4620      	mov	r0, r4
 800d664:	460d      	mov	r5, r1
 800d666:	f7f2 ff6b 	bl	8000540 <__aeabi_dmul>
 800d66a:	4642      	mov	r2, r8
 800d66c:	e9cd 0100 	strd	r0, r1, [sp]
 800d670:	464b      	mov	r3, r9
 800d672:	4620      	mov	r0, r4
 800d674:	4629      	mov	r1, r5
 800d676:	f7f2 fdab 	bl	80001d0 <__aeabi_dsub>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4630      	mov	r0, r6
 800d680:	4639      	mov	r1, r7
 800d682:	f7f2 fda5 	bl	80001d0 <__aeabi_dsub>
 800d686:	a374      	add	r3, pc, #464	@ (adr r3, 800d858 <__ieee754_pow+0xa30>)
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f7f2 ff58 	bl	8000540 <__aeabi_dmul>
 800d690:	a373      	add	r3, pc, #460	@ (adr r3, 800d860 <__ieee754_pow+0xa38>)
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	4680      	mov	r8, r0
 800d698:	4689      	mov	r9, r1
 800d69a:	4620      	mov	r0, r4
 800d69c:	4629      	mov	r1, r5
 800d69e:	f7f2 ff4f 	bl	8000540 <__aeabi_dmul>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 fd93 	bl	80001d4 <__adddf3>
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6ba:	f7f2 fd8b 	bl	80001d4 <__adddf3>
 800d6be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6c2:	4680      	mov	r8, r0
 800d6c4:	4689      	mov	r9, r1
 800d6c6:	f7f2 fd83 	bl	80001d0 <__aeabi_dsub>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f2 fd7d 	bl	80001d0 <__aeabi_dsub>
 800d6d6:	4642      	mov	r2, r8
 800d6d8:	4606      	mov	r6, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	464b      	mov	r3, r9
 800d6de:	4640      	mov	r0, r8
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	f7f2 ff2d 	bl	8000540 <__aeabi_dmul>
 800d6e6:	a360      	add	r3, pc, #384	@ (adr r3, 800d868 <__ieee754_pow+0xa40>)
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	f7f2 ff26 	bl	8000540 <__aeabi_dmul>
 800d6f4:	a35e      	add	r3, pc, #376	@ (adr r3, 800d870 <__ieee754_pow+0xa48>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 fd69 	bl	80001d0 <__aeabi_dsub>
 800d6fe:	4622      	mov	r2, r4
 800d700:	462b      	mov	r3, r5
 800d702:	f7f2 ff1d 	bl	8000540 <__aeabi_dmul>
 800d706:	a35c      	add	r3, pc, #368	@ (adr r3, 800d878 <__ieee754_pow+0xa50>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 fd62 	bl	80001d4 <__adddf3>
 800d710:	4622      	mov	r2, r4
 800d712:	462b      	mov	r3, r5
 800d714:	f7f2 ff14 	bl	8000540 <__aeabi_dmul>
 800d718:	a359      	add	r3, pc, #356	@ (adr r3, 800d880 <__ieee754_pow+0xa58>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 fd57 	bl	80001d0 <__aeabi_dsub>
 800d722:	4622      	mov	r2, r4
 800d724:	462b      	mov	r3, r5
 800d726:	f7f2 ff0b 	bl	8000540 <__aeabi_dmul>
 800d72a:	a357      	add	r3, pc, #348	@ (adr r3, 800d888 <__ieee754_pow+0xa60>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f7f2 fd50 	bl	80001d4 <__adddf3>
 800d734:	4622      	mov	r2, r4
 800d736:	462b      	mov	r3, r5
 800d738:	f7f2 ff02 	bl	8000540 <__aeabi_dmul>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4640      	mov	r0, r8
 800d742:	4649      	mov	r1, r9
 800d744:	f7f2 fd44 	bl	80001d0 <__aeabi_dsub>
 800d748:	4604      	mov	r4, r0
 800d74a:	460d      	mov	r5, r1
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4640      	mov	r0, r8
 800d752:	4649      	mov	r1, r9
 800d754:	f7f2 fef4 	bl	8000540 <__aeabi_dmul>
 800d758:	2200      	movs	r2, #0
 800d75a:	e9cd 0100 	strd	r0, r1, [sp]
 800d75e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f2 fd33 	bl	80001d0 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d772:	f7f3 f80f 	bl	8000794 <__aeabi_ddiv>
 800d776:	4632      	mov	r2, r6
 800d778:	4604      	mov	r4, r0
 800d77a:	460d      	mov	r5, r1
 800d77c:	463b      	mov	r3, r7
 800d77e:	4640      	mov	r0, r8
 800d780:	4649      	mov	r1, r9
 800d782:	f7f2 fedd 	bl	8000540 <__aeabi_dmul>
 800d786:	4632      	mov	r2, r6
 800d788:	463b      	mov	r3, r7
 800d78a:	f7f2 fd23 	bl	80001d4 <__adddf3>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4620      	mov	r0, r4
 800d794:	4629      	mov	r1, r5
 800d796:	f7f2 fd1b 	bl	80001d0 <__aeabi_dsub>
 800d79a:	4642      	mov	r2, r8
 800d79c:	464b      	mov	r3, r9
 800d79e:	f7f2 fd17 	bl	80001d0 <__aeabi_dsub>
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	493b      	ldr	r1, [pc, #236]	@ (800d894 <__ieee754_pow+0xa6c>)
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f7f2 fd11 	bl	80001d0 <__aeabi_dsub>
 800d7ae:	ec41 0b10 	vmov	d0, r0, r1
 800d7b2:	ee10 3a90 	vmov	r3, s1
 800d7b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d7ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7be:	da30      	bge.n	800d822 <__ieee754_pow+0x9fa>
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	f000 fa0d 	bl	800dbe0 <scalbn>
 800d7c6:	ec51 0b10 	vmov	r0, r1, d0
 800d7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ce:	f7ff bbd2 	b.w	800cf76 <__ieee754_pow+0x14e>
 800d7d2:	4c31      	ldr	r4, [pc, #196]	@ (800d898 <__ieee754_pow+0xa70>)
 800d7d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	d91a      	bls.n	800d812 <__ieee754_pow+0x9ea>
 800d7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800d89c <__ieee754_pow+0xa74>)
 800d7de:	440b      	add	r3, r1
 800d7e0:	4303      	orrs	r3, r0
 800d7e2:	d009      	beq.n	800d7f8 <__ieee754_pow+0x9d0>
 800d7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f7f3 f91a 	bl	8000a24 <__aeabi_dcmplt>
 800d7f0:	3800      	subs	r0, #0
 800d7f2:	bf18      	it	ne
 800d7f4:	2001      	movne	r0, #1
 800d7f6:	e42b      	b.n	800d050 <__ieee754_pow+0x228>
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	464b      	mov	r3, r9
 800d7fc:	f7f2 fce8 	bl	80001d0 <__aeabi_dsub>
 800d800:	4632      	mov	r2, r6
 800d802:	463b      	mov	r3, r7
 800d804:	f7f3 f922 	bl	8000a4c <__aeabi_dcmpge>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d1eb      	bne.n	800d7e4 <__ieee754_pow+0x9bc>
 800d80c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d8ac <__ieee754_pow+0xa84>
 800d810:	e6f7      	b.n	800d602 <__ieee754_pow+0x7da>
 800d812:	469a      	mov	sl, r3
 800d814:	4b22      	ldr	r3, [pc, #136]	@ (800d8a0 <__ieee754_pow+0xa78>)
 800d816:	459a      	cmp	sl, r3
 800d818:	f63f aef3 	bhi.w	800d602 <__ieee754_pow+0x7da>
 800d81c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d820:	e715      	b.n	800d64e <__ieee754_pow+0x826>
 800d822:	ec51 0b10 	vmov	r0, r1, d0
 800d826:	4619      	mov	r1, r3
 800d828:	e7cf      	b.n	800d7ca <__ieee754_pow+0x9a2>
 800d82a:	491a      	ldr	r1, [pc, #104]	@ (800d894 <__ieee754_pow+0xa6c>)
 800d82c:	2000      	movs	r0, #0
 800d82e:	f7ff bb18 	b.w	800ce62 <__ieee754_pow+0x3a>
 800d832:	2000      	movs	r0, #0
 800d834:	2100      	movs	r1, #0
 800d836:	f7ff bb14 	b.w	800ce62 <__ieee754_pow+0x3a>
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7ff bb10 	b.w	800ce62 <__ieee754_pow+0x3a>
 800d842:	460c      	mov	r4, r1
 800d844:	f7ff bb5e 	b.w	800cf04 <__ieee754_pow+0xdc>
 800d848:	2400      	movs	r4, #0
 800d84a:	f7ff bb49 	b.w	800cee0 <__ieee754_pow+0xb8>
 800d84e:	bf00      	nop
 800d850:	00000000 	.word	0x00000000
 800d854:	3fe62e43 	.word	0x3fe62e43
 800d858:	fefa39ef 	.word	0xfefa39ef
 800d85c:	3fe62e42 	.word	0x3fe62e42
 800d860:	0ca86c39 	.word	0x0ca86c39
 800d864:	be205c61 	.word	0xbe205c61
 800d868:	72bea4d0 	.word	0x72bea4d0
 800d86c:	3e663769 	.word	0x3e663769
 800d870:	c5d26bf1 	.word	0xc5d26bf1
 800d874:	3ebbbd41 	.word	0x3ebbbd41
 800d878:	af25de2c 	.word	0xaf25de2c
 800d87c:	3f11566a 	.word	0x3f11566a
 800d880:	16bebd93 	.word	0x16bebd93
 800d884:	3f66c16c 	.word	0x3f66c16c
 800d888:	5555553e 	.word	0x5555553e
 800d88c:	3fc55555 	.word	0x3fc55555
 800d890:	fff00000 	.word	0xfff00000
 800d894:	3ff00000 	.word	0x3ff00000
 800d898:	4090cbff 	.word	0x4090cbff
 800d89c:	3f6f3400 	.word	0x3f6f3400
 800d8a0:	3fe00000 	.word	0x3fe00000
 800d8a4:	652b82fe 	.word	0x652b82fe
 800d8a8:	3c971547 	.word	0x3c971547
 800d8ac:	4090cc00 	.word	0x4090cc00

0800d8b0 <atan>:
 800d8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	ec55 4b10 	vmov	r4, r5, d0
 800d8b8:	4bbf      	ldr	r3, [pc, #764]	@ (800dbb8 <atan+0x308>)
 800d8ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	46ab      	mov	fp, r5
 800d8c2:	d918      	bls.n	800d8f6 <atan+0x46>
 800d8c4:	4bbd      	ldr	r3, [pc, #756]	@ (800dbbc <atan+0x30c>)
 800d8c6:	429e      	cmp	r6, r3
 800d8c8:	d801      	bhi.n	800d8ce <atan+0x1e>
 800d8ca:	d109      	bne.n	800d8e0 <atan+0x30>
 800d8cc:	b144      	cbz	r4, 800d8e0 <atan+0x30>
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fc7d 	bl	80001d4 <__adddf3>
 800d8da:	4604      	mov	r4, r0
 800d8dc:	460d      	mov	r5, r1
 800d8de:	e006      	b.n	800d8ee <atan+0x3e>
 800d8e0:	f1bb 0f00 	cmp.w	fp, #0
 800d8e4:	f340 812b 	ble.w	800db3e <atan+0x28e>
 800d8e8:	a597      	add	r5, pc, #604	@ (adr r5, 800db48 <atan+0x298>)
 800d8ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d8ee:	ec45 4b10 	vmov	d0, r4, r5
 800d8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f6:	4bb2      	ldr	r3, [pc, #712]	@ (800dbc0 <atan+0x310>)
 800d8f8:	429e      	cmp	r6, r3
 800d8fa:	d813      	bhi.n	800d924 <atan+0x74>
 800d8fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d900:	429e      	cmp	r6, r3
 800d902:	d80c      	bhi.n	800d91e <atan+0x6e>
 800d904:	a392      	add	r3, pc, #584	@ (adr r3, 800db50 <atan+0x2a0>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	4620      	mov	r0, r4
 800d90c:	4629      	mov	r1, r5
 800d90e:	f7f2 fc61 	bl	80001d4 <__adddf3>
 800d912:	4bac      	ldr	r3, [pc, #688]	@ (800dbc4 <atan+0x314>)
 800d914:	2200      	movs	r2, #0
 800d916:	f7f3 f8a3 	bl	8000a60 <__aeabi_dcmpgt>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d1e7      	bne.n	800d8ee <atan+0x3e>
 800d91e:	f04f 3aff 	mov.w	sl, #4294967295
 800d922:	e029      	b.n	800d978 <atan+0xc8>
 800d924:	f7fe fe40 	bl	800c5a8 <fabs>
 800d928:	4ba7      	ldr	r3, [pc, #668]	@ (800dbc8 <atan+0x318>)
 800d92a:	429e      	cmp	r6, r3
 800d92c:	ec55 4b10 	vmov	r4, r5, d0
 800d930:	f200 80bc 	bhi.w	800daac <atan+0x1fc>
 800d934:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d938:	429e      	cmp	r6, r3
 800d93a:	f200 809e 	bhi.w	800da7a <atan+0x1ca>
 800d93e:	4622      	mov	r2, r4
 800d940:	462b      	mov	r3, r5
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fc45 	bl	80001d4 <__adddf3>
 800d94a:	4b9e      	ldr	r3, [pc, #632]	@ (800dbc4 <atan+0x314>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	f7f2 fc3f 	bl	80001d0 <__aeabi_dsub>
 800d952:	2200      	movs	r2, #0
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	f7f2 fc38 	bl	80001d4 <__adddf3>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4630      	mov	r0, r6
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f2 ff12 	bl	8000794 <__aeabi_ddiv>
 800d970:	f04f 0a00 	mov.w	sl, #0
 800d974:	4604      	mov	r4, r0
 800d976:	460d      	mov	r5, r1
 800d978:	4622      	mov	r2, r4
 800d97a:	462b      	mov	r3, r5
 800d97c:	4620      	mov	r0, r4
 800d97e:	4629      	mov	r1, r5
 800d980:	f7f2 fdde 	bl	8000540 <__aeabi_dmul>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	f7f2 fdd8 	bl	8000540 <__aeabi_dmul>
 800d990:	a371      	add	r3, pc, #452	@ (adr r3, 800db58 <atan+0x2a8>)
 800d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d996:	4606      	mov	r6, r0
 800d998:	460f      	mov	r7, r1
 800d99a:	f7f2 fdd1 	bl	8000540 <__aeabi_dmul>
 800d99e:	a370      	add	r3, pc, #448	@ (adr r3, 800db60 <atan+0x2b0>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 fc16 	bl	80001d4 <__adddf3>
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	463b      	mov	r3, r7
 800d9ac:	f7f2 fdc8 	bl	8000540 <__aeabi_dmul>
 800d9b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800db68 <atan+0x2b8>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	f7f2 fc0d 	bl	80001d4 <__adddf3>
 800d9ba:	4632      	mov	r2, r6
 800d9bc:	463b      	mov	r3, r7
 800d9be:	f7f2 fdbf 	bl	8000540 <__aeabi_dmul>
 800d9c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800db70 <atan+0x2c0>)
 800d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c8:	f7f2 fc04 	bl	80001d4 <__adddf3>
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	f7f2 fdb6 	bl	8000540 <__aeabi_dmul>
 800d9d4:	a368      	add	r3, pc, #416	@ (adr r3, 800db78 <atan+0x2c8>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 fbfb 	bl	80001d4 <__adddf3>
 800d9de:	4632      	mov	r2, r6
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	f7f2 fdad 	bl	8000540 <__aeabi_dmul>
 800d9e6:	a366      	add	r3, pc, #408	@ (adr r3, 800db80 <atan+0x2d0>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	f7f2 fbf2 	bl	80001d4 <__adddf3>
 800d9f0:	4642      	mov	r2, r8
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	f7f2 fda4 	bl	8000540 <__aeabi_dmul>
 800d9f8:	a363      	add	r3, pc, #396	@ (adr r3, 800db88 <atan+0x2d8>)
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	4680      	mov	r8, r0
 800da00:	4689      	mov	r9, r1
 800da02:	4630      	mov	r0, r6
 800da04:	4639      	mov	r1, r7
 800da06:	f7f2 fd9b 	bl	8000540 <__aeabi_dmul>
 800da0a:	a361      	add	r3, pc, #388	@ (adr r3, 800db90 <atan+0x2e0>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fbde 	bl	80001d0 <__aeabi_dsub>
 800da14:	4632      	mov	r2, r6
 800da16:	463b      	mov	r3, r7
 800da18:	f7f2 fd92 	bl	8000540 <__aeabi_dmul>
 800da1c:	a35e      	add	r3, pc, #376	@ (adr r3, 800db98 <atan+0x2e8>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fbd5 	bl	80001d0 <__aeabi_dsub>
 800da26:	4632      	mov	r2, r6
 800da28:	463b      	mov	r3, r7
 800da2a:	f7f2 fd89 	bl	8000540 <__aeabi_dmul>
 800da2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800dba0 <atan+0x2f0>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fbcc 	bl	80001d0 <__aeabi_dsub>
 800da38:	4632      	mov	r2, r6
 800da3a:	463b      	mov	r3, r7
 800da3c:	f7f2 fd80 	bl	8000540 <__aeabi_dmul>
 800da40:	a359      	add	r3, pc, #356	@ (adr r3, 800dba8 <atan+0x2f8>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f7f2 fbc3 	bl	80001d0 <__aeabi_dsub>
 800da4a:	4632      	mov	r2, r6
 800da4c:	463b      	mov	r3, r7
 800da4e:	f7f2 fd77 	bl	8000540 <__aeabi_dmul>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f2 fbbb 	bl	80001d4 <__adddf3>
 800da5e:	4622      	mov	r2, r4
 800da60:	462b      	mov	r3, r5
 800da62:	f7f2 fd6d 	bl	8000540 <__aeabi_dmul>
 800da66:	f1ba 3fff 	cmp.w	sl, #4294967295
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	d148      	bne.n	800db02 <atan+0x252>
 800da70:	4620      	mov	r0, r4
 800da72:	4629      	mov	r1, r5
 800da74:	f7f2 fbac 	bl	80001d0 <__aeabi_dsub>
 800da78:	e72f      	b.n	800d8da <atan+0x2a>
 800da7a:	4b52      	ldr	r3, [pc, #328]	@ (800dbc4 <atan+0x314>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	4620      	mov	r0, r4
 800da80:	4629      	mov	r1, r5
 800da82:	f7f2 fba5 	bl	80001d0 <__aeabi_dsub>
 800da86:	4b4f      	ldr	r3, [pc, #316]	@ (800dbc4 <atan+0x314>)
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	2200      	movs	r2, #0
 800da8e:	4620      	mov	r0, r4
 800da90:	4629      	mov	r1, r5
 800da92:	f7f2 fb9f 	bl	80001d4 <__adddf3>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4630      	mov	r0, r6
 800da9c:	4639      	mov	r1, r7
 800da9e:	f7f2 fe79 	bl	8000794 <__aeabi_ddiv>
 800daa2:	f04f 0a01 	mov.w	sl, #1
 800daa6:	4604      	mov	r4, r0
 800daa8:	460d      	mov	r5, r1
 800daaa:	e765      	b.n	800d978 <atan+0xc8>
 800daac:	4b47      	ldr	r3, [pc, #284]	@ (800dbcc <atan+0x31c>)
 800daae:	429e      	cmp	r6, r3
 800dab0:	d21c      	bcs.n	800daec <atan+0x23c>
 800dab2:	4b47      	ldr	r3, [pc, #284]	@ (800dbd0 <atan+0x320>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f2 fb89 	bl	80001d0 <__aeabi_dsub>
 800dabe:	4b44      	ldr	r3, [pc, #272]	@ (800dbd0 <atan+0x320>)
 800dac0:	4606      	mov	r6, r0
 800dac2:	460f      	mov	r7, r1
 800dac4:	2200      	movs	r2, #0
 800dac6:	4620      	mov	r0, r4
 800dac8:	4629      	mov	r1, r5
 800daca:	f7f2 fd39 	bl	8000540 <__aeabi_dmul>
 800dace:	4b3d      	ldr	r3, [pc, #244]	@ (800dbc4 <atan+0x314>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	f7f2 fb7f 	bl	80001d4 <__adddf3>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4630      	mov	r0, r6
 800dadc:	4639      	mov	r1, r7
 800dade:	f7f2 fe59 	bl	8000794 <__aeabi_ddiv>
 800dae2:	f04f 0a02 	mov.w	sl, #2
 800dae6:	4604      	mov	r4, r0
 800dae8:	460d      	mov	r5, r1
 800daea:	e745      	b.n	800d978 <atan+0xc8>
 800daec:	4622      	mov	r2, r4
 800daee:	462b      	mov	r3, r5
 800daf0:	4938      	ldr	r1, [pc, #224]	@ (800dbd4 <atan+0x324>)
 800daf2:	2000      	movs	r0, #0
 800daf4:	f7f2 fe4e 	bl	8000794 <__aeabi_ddiv>
 800daf8:	f04f 0a03 	mov.w	sl, #3
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	e73a      	b.n	800d978 <atan+0xc8>
 800db02:	4b35      	ldr	r3, [pc, #212]	@ (800dbd8 <atan+0x328>)
 800db04:	4e35      	ldr	r6, [pc, #212]	@ (800dbdc <atan+0x32c>)
 800db06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fb5f 	bl	80001d0 <__aeabi_dsub>
 800db12:	4622      	mov	r2, r4
 800db14:	462b      	mov	r3, r5
 800db16:	f7f2 fb5b 	bl	80001d0 <__aeabi_dsub>
 800db1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800db26:	f7f2 fb53 	bl	80001d0 <__aeabi_dsub>
 800db2a:	f1bb 0f00 	cmp.w	fp, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	460d      	mov	r5, r1
 800db32:	f6bf aedc 	bge.w	800d8ee <atan+0x3e>
 800db36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db3a:	461d      	mov	r5, r3
 800db3c:	e6d7      	b.n	800d8ee <atan+0x3e>
 800db3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800dbb0 <atan+0x300>)
 800db40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db44:	e6d3      	b.n	800d8ee <atan+0x3e>
 800db46:	bf00      	nop
 800db48:	54442d18 	.word	0x54442d18
 800db4c:	3ff921fb 	.word	0x3ff921fb
 800db50:	8800759c 	.word	0x8800759c
 800db54:	7e37e43c 	.word	0x7e37e43c
 800db58:	e322da11 	.word	0xe322da11
 800db5c:	3f90ad3a 	.word	0x3f90ad3a
 800db60:	24760deb 	.word	0x24760deb
 800db64:	3fa97b4b 	.word	0x3fa97b4b
 800db68:	a0d03d51 	.word	0xa0d03d51
 800db6c:	3fb10d66 	.word	0x3fb10d66
 800db70:	c54c206e 	.word	0xc54c206e
 800db74:	3fb745cd 	.word	0x3fb745cd
 800db78:	920083ff 	.word	0x920083ff
 800db7c:	3fc24924 	.word	0x3fc24924
 800db80:	5555550d 	.word	0x5555550d
 800db84:	3fd55555 	.word	0x3fd55555
 800db88:	2c6a6c2f 	.word	0x2c6a6c2f
 800db8c:	bfa2b444 	.word	0xbfa2b444
 800db90:	52defd9a 	.word	0x52defd9a
 800db94:	3fadde2d 	.word	0x3fadde2d
 800db98:	af749a6d 	.word	0xaf749a6d
 800db9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800dba0:	fe231671 	.word	0xfe231671
 800dba4:	3fbc71c6 	.word	0x3fbc71c6
 800dba8:	9998ebc4 	.word	0x9998ebc4
 800dbac:	3fc99999 	.word	0x3fc99999
 800dbb0:	54442d18 	.word	0x54442d18
 800dbb4:	bff921fb 	.word	0xbff921fb
 800dbb8:	440fffff 	.word	0x440fffff
 800dbbc:	7ff00000 	.word	0x7ff00000
 800dbc0:	3fdbffff 	.word	0x3fdbffff
 800dbc4:	3ff00000 	.word	0x3ff00000
 800dbc8:	3ff2ffff 	.word	0x3ff2ffff
 800dbcc:	40038000 	.word	0x40038000
 800dbd0:	3ff80000 	.word	0x3ff80000
 800dbd4:	bff00000 	.word	0xbff00000
 800dbd8:	0800de90 	.word	0x0800de90
 800dbdc:	0800deb0 	.word	0x0800deb0

0800dbe0 <scalbn>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	ec55 4b10 	vmov	r4, r5, d0
 800dbe6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dbea:	4606      	mov	r6, r0
 800dbec:	462b      	mov	r3, r5
 800dbee:	b991      	cbnz	r1, 800dc16 <scalbn+0x36>
 800dbf0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dbf4:	4323      	orrs	r3, r4
 800dbf6:	d03d      	beq.n	800dc74 <scalbn+0x94>
 800dbf8:	4b35      	ldr	r3, [pc, #212]	@ (800dcd0 <scalbn+0xf0>)
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f7f2 fc9e 	bl	8000540 <__aeabi_dmul>
 800dc04:	4b33      	ldr	r3, [pc, #204]	@ (800dcd4 <scalbn+0xf4>)
 800dc06:	429e      	cmp	r6, r3
 800dc08:	4604      	mov	r4, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	da0f      	bge.n	800dc2e <scalbn+0x4e>
 800dc0e:	a328      	add	r3, pc, #160	@ (adr r3, 800dcb0 <scalbn+0xd0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	e01e      	b.n	800dc54 <scalbn+0x74>
 800dc16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dc1a:	4291      	cmp	r1, r2
 800dc1c:	d10b      	bne.n	800dc36 <scalbn+0x56>
 800dc1e:	4622      	mov	r2, r4
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 fad6 	bl	80001d4 <__adddf3>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	e022      	b.n	800dc74 <scalbn+0x94>
 800dc2e:	460b      	mov	r3, r1
 800dc30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dc34:	3936      	subs	r1, #54	@ 0x36
 800dc36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dc3a:	4296      	cmp	r6, r2
 800dc3c:	dd0d      	ble.n	800dc5a <scalbn+0x7a>
 800dc3e:	2d00      	cmp	r5, #0
 800dc40:	a11d      	add	r1, pc, #116	@ (adr r1, 800dcb8 <scalbn+0xd8>)
 800dc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc46:	da02      	bge.n	800dc4e <scalbn+0x6e>
 800dc48:	a11d      	add	r1, pc, #116	@ (adr r1, 800dcc0 <scalbn+0xe0>)
 800dc4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc4e:	a31a      	add	r3, pc, #104	@ (adr r3, 800dcb8 <scalbn+0xd8>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	f7f2 fc74 	bl	8000540 <__aeabi_dmul>
 800dc58:	e7e6      	b.n	800dc28 <scalbn+0x48>
 800dc5a:	1872      	adds	r2, r6, r1
 800dc5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dc60:	428a      	cmp	r2, r1
 800dc62:	dcec      	bgt.n	800dc3e <scalbn+0x5e>
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	dd08      	ble.n	800dc7a <scalbn+0x9a>
 800dc68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dc6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dc70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc74:	ec45 4b10 	vmov	d0, r4, r5
 800dc78:	bd70      	pop	{r4, r5, r6, pc}
 800dc7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dc7e:	da08      	bge.n	800dc92 <scalbn+0xb2>
 800dc80:	2d00      	cmp	r5, #0
 800dc82:	a10b      	add	r1, pc, #44	@ (adr r1, 800dcb0 <scalbn+0xd0>)
 800dc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc88:	dac1      	bge.n	800dc0e <scalbn+0x2e>
 800dc8a:	a10f      	add	r1, pc, #60	@ (adr r1, 800dcc8 <scalbn+0xe8>)
 800dc8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc90:	e7bd      	b.n	800dc0e <scalbn+0x2e>
 800dc92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dc96:	3236      	adds	r2, #54	@ 0x36
 800dc98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dc9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dca0:	4620      	mov	r0, r4
 800dca2:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd8 <scalbn+0xf8>)
 800dca4:	4629      	mov	r1, r5
 800dca6:	2200      	movs	r2, #0
 800dca8:	e7d4      	b.n	800dc54 <scalbn+0x74>
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w
 800dcb0:	c2f8f359 	.word	0xc2f8f359
 800dcb4:	01a56e1f 	.word	0x01a56e1f
 800dcb8:	8800759c 	.word	0x8800759c
 800dcbc:	7e37e43c 	.word	0x7e37e43c
 800dcc0:	8800759c 	.word	0x8800759c
 800dcc4:	fe37e43c 	.word	0xfe37e43c
 800dcc8:	c2f8f359 	.word	0xc2f8f359
 800dccc:	81a56e1f 	.word	0x81a56e1f
 800dcd0:	43500000 	.word	0x43500000
 800dcd4:	ffff3cb0 	.word	0xffff3cb0
 800dcd8:	3c900000 	.word	0x3c900000

0800dcdc <with_errno>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	ed2d 8b02 	vpush	{d8}
 800dce2:	eeb0 8a40 	vmov.f32	s16, s0
 800dce6:	eef0 8a60 	vmov.f32	s17, s1
 800dcea:	4604      	mov	r4, r0
 800dcec:	f7fe fb52 	bl	800c394 <__errno>
 800dcf0:	eeb0 0a48 	vmov.f32	s0, s16
 800dcf4:	eef0 0a68 	vmov.f32	s1, s17
 800dcf8:	ecbd 8b02 	vpop	{d8}
 800dcfc:	6004      	str	r4, [r0, #0]
 800dcfe:	bd10      	pop	{r4, pc}

0800dd00 <xflow>:
 800dd00:	4603      	mov	r3, r0
 800dd02:	b507      	push	{r0, r1, r2, lr}
 800dd04:	ec51 0b10 	vmov	r0, r1, d0
 800dd08:	b183      	cbz	r3, 800dd2c <xflow+0x2c>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd10:	e9cd 2300 	strd	r2, r3, [sp]
 800dd14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd18:	f7f2 fc12 	bl	8000540 <__aeabi_dmul>
 800dd1c:	ec41 0b10 	vmov	d0, r0, r1
 800dd20:	2022      	movs	r0, #34	@ 0x22
 800dd22:	b003      	add	sp, #12
 800dd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd28:	f7ff bfd8 	b.w	800dcdc <with_errno>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	e7ee      	b.n	800dd10 <xflow+0x10>
 800dd32:	0000      	movs	r0, r0
 800dd34:	0000      	movs	r0, r0
	...

0800dd38 <__math_uflow>:
 800dd38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd40 <__math_uflow+0x8>
 800dd3c:	f7ff bfe0 	b.w	800dd00 <xflow>
 800dd40:	00000000 	.word	0x00000000
 800dd44:	10000000 	.word	0x10000000

0800dd48 <__math_oflow>:
 800dd48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd50 <__math_oflow+0x8>
 800dd4c:	f7ff bfd8 	b.w	800dd00 <xflow>
 800dd50:	00000000 	.word	0x00000000
 800dd54:	70000000 	.word	0x70000000

0800dd58 <_init>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	bf00      	nop
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr

0800dd64 <_fini>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr
